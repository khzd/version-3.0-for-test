///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        19/Jul/2015  11:18:37 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  S:\zigbee\Myzigbe\version 3.0 for new             /
//                          ZStack-CC2530-2.5.1a\Projects\zstack\AT           /
//                          commands\AT command 3.2 -Body                     /
//                          Sensor\Source\AT_ZCL_ONOFF_SWITCH.c               /
//    Command line       =  -f "S:\zigbee\Myzigbe\version 3.0 for new         /
//                          ZStack-CC2530-2.5.1a\Projects\zstack\AT           /
//                          commands\AT command 3.2 -Body                     /
//                          Sensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter /
//                          .cfg" (-DCPU32MHZ -DROOT=__near_func              /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                  /
//                          "S:\zigbee\Myzigbe\version 3.0 for new            /
//                          ZStack-CC2530-2.5.1a\Projects\zstack\AT           /
//                          commands\AT command 3.2 -Body                     /
//                          Sensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig /
//                          .cfg" (-DZIGBEEPRO -DSECURE=0                     /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x2015                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "S:\zigbee\Myzigbe\version /
//                           3.0 for new ZStack-CC2530-2.5.1a\Projects\zstack /
//                          \AT commands\AT command 3.2 -Body                 /
//                          Sensor\Source\AT_ZCL_ONOFF_SWITCH.c" -D           /
//                          ZIGBEEPRO -D NWK_AUTO_POLL -D HAL_UART=TRUE -D    /
//                          HOLD_AUTO_START -D NV_RESTORE -D REFLECTOR -D     /
//                          xHAL_UART_ISR_TX_MAX=200 -D xPOWER_SAVING -D      /
//                          ZCL_READ -D ZCL_WRITE -D ZCL_IDENTIFY -D          /
//                          ZCL_ON_OFF -D ZCL_DISCOVER -D HAL_UART_ISR=1 -D   /
//                          HAL_UART_DMA=0 -D xZTOOL_P1 -D xMT_TASK -D        /
//                          xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                   /
//                          xLCD_SUPPORTED=DEBUG -D                           /
//                          xMT_UART_DEFAULT_OVERFLOW=FALSE -lC               /
//                          "S:\zigbee\Myzigbe\version 3.0 for new            /
//                          ZStack-CC2530-2.5.1a\Projects\zstack\AT           /
//                          commands\AT command 3.2 -Body                     /
//                          Sensor\CC2530DB\RouterEB\List\" -lA               /
//                          "S:\zigbee\Myzigbe\version 3.0 for new            /
//                          ZStack-CC2530-2.5.1a\Projects\zstack\AT           /
//                          commands\AT command 3.2 -Body                     /
//                          Sensor\CC2530DB\RouterEB\List\" --diag_suppress   /
//                          Pe001,Pa010 -o "S:\zigbee\Myzigbe\version 3.0     /
//                          for new ZStack-CC2530-2.5.1a\Projects\zstack\AT   /
//                          commands\AT command 3.2 -Body                     /
//                          Sensor\CC2530DB\RouterEB\Obj\" -e                 /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "S:\zigbee\Myzigbe\version 3.0 for new            /
//                          ZStack-CC2530-2.5.1a\Projects\zstack\AT           /
//                          commands\AT command 3.2 -Body Sensor\CC2530DB\"   /
//                          -I "S:\zigbee\Myzigbe\version 3.0 for new         /
//                          ZStack-CC2530-2.5.1a\Projects\zstack\AT           /
//                          commands\AT command 3.2 -Body                     /
//                          Sensor\CC2530DB\..\Source\" -I                    /
//                          "S:\zigbee\Myzigbe\version 3.0 for new            /
//                          ZStack-CC2530-2.5.1a\Projects\zstack\AT           /
//                          commands\AT command 3.2 -Body                     /
//                          Sensor\CC2530DB\..\Source\hal\" -I                /
//                          "S:\zigbee\Myzigbe\version 3.0 for new            /
//                          ZStack-CC2530-2.5.1a\Projects\zstack\AT           /
//                          commands\AT command 3.2 -Body                     /
//                          Sensor\CC2530DB\..\Source\Modified\" -I           /
//                          "S:\zigbee\Myzigbe\version 3.0 for new            /
//                          ZStack-CC2530-2.5.1a\Projects\zstack\AT           /
//                          commands\AT command 3.2 -Body                     /
//                          Sensor\CC2530DB\..\..\..\ZMain\TI2530DB\" -I      /
//                          "S:\zigbee\Myzigbe\version 3.0 for new            /
//                          ZStack-CC2530-2.5.1a\Projects\zstack\AT           /
//                          commands\AT command 3.2 -Body                     /
//                          Sensor\CC2530DB\..\..\..\..\..\Components\hal\inc /
//                          lude\" -I "S:\zigbee\Myzigbe\version 3.0 for new  /
//                          ZStack-CC2530-2.5.1a\Projects\zstack\AT           /
//                          commands\AT command 3.2 -Body                     /
//                          Sensor\CC2530DB\..\..\..\..\..\Components\hal\tar /
//                          get\CC2530EB\" -I "S:\zigbee\Myzigbe\version 3.0  /
//                          for new ZStack-CC2530-2.5.1a\Projects\zstack\AT   /
//                          commands\AT command 3.2 -Body                     /
//                          Sensor\CC2530DB\..\..\..\..\..\Components\mac\inc /
//                          lude\" -I "S:\zigbee\Myzigbe\version 3.0 for new  /
//                          ZStack-CC2530-2.5.1a\Projects\zstack\AT           /
//                          commands\AT command 3.2 -Body                     /
//                          Sensor\CC2530DB\..\..\..\..\..\Components\mac\hig /
//                          h_level\" -I "S:\zigbee\Myzigbe\version 3.0 for   /
//                          new ZStack-CC2530-2.5.1a\Projects\zstack\AT       /
//                          commands\AT command 3.2 -Body                     /
//                          Sensor\CC2530DB\..\..\..\..\..\Components\mac\low /
//                          _level\srf04\" -I "S:\zigbee\Myzigbe\version 3.0  /
//                          for new ZStack-CC2530-2.5.1a\Projects\zstack\AT   /
//                          commands\AT command 3.2 -Body                     /
//                          Sensor\CC2530DB\..\..\..\..\..\Components\mac\low /
//                          _level\srf04\single_chip\" -I                     /
//                          "S:\zigbee\Myzigbe\version 3.0 for new            /
//                          ZStack-CC2530-2.5.1a\Projects\zstack\AT           /
//                          commands\AT command 3.2 -Body                     /
//                          Sensor\CC2530DB\..\..\..\..\..\Components\mt\"    /
//                          -I "S:\zigbee\Myzigbe\version 3.0 for new         /
//                          ZStack-CC2530-2.5.1a\Projects\zstack\AT           /
//                          commands\AT command 3.2 -Body                     /
//                          Sensor\CC2530DB\..\..\..\..\..\Components\osal\in /
//                          clude\" -I "S:\zigbee\Myzigbe\version 3.0 for     /
//                          new ZStack-CC2530-2.5.1a\Projects\zstack\AT       /
//                          commands\AT command 3.2 -Body                     /
//                          Sensor\CC2530DB\..\..\..\..\..\Components\service /
//                          s\saddr\" -I "S:\zigbee\Myzigbe\version 3.0 for   /
//                          new ZStack-CC2530-2.5.1a\Projects\zstack\AT       /
//                          commands\AT command 3.2 -Body                     /
//                          Sensor\CC2530DB\..\..\..\..\..\Components\service /
//                          s\sdata\" -I "S:\zigbee\Myzigbe\version 3.0 for   /
//                          new ZStack-CC2530-2.5.1a\Projects\zstack\AT       /
//                          commands\AT command 3.2 -Body                     /
//                          Sensor\CC2530DB\..\..\..\..\..\Components\stack\a /
//                          f\" -I "S:\zigbee\Myzigbe\version 3.0 for new     /
//                          ZStack-CC2530-2.5.1a\Projects\zstack\AT           /
//                          commands\AT command 3.2 -Body                     /
//                          Sensor\CC2530DB\..\..\..\..\..\Components\stack\n /
//                          wk\" -I "S:\zigbee\Myzigbe\version 3.0 for new    /
//                          ZStack-CC2530-2.5.1a\Projects\zstack\AT           /
//                          commands\AT command 3.2 -Body                     /
//                          Sensor\CC2530DB\..\..\..\..\..\Components\stack\s /
//                          api\" -I "S:\zigbee\Myzigbe\version 3.0 for new   /
//                          ZStack-CC2530-2.5.1a\Projects\zstack\AT           /
//                          commands\AT command 3.2 -Body                     /
//                          Sensor\CC2530DB\..\..\..\..\..\Components\stack\s /
//                          ec\" -I "S:\zigbee\Myzigbe\version 3.0 for new    /
//                          ZStack-CC2530-2.5.1a\Projects\zstack\AT           /
//                          commands\AT command 3.2 -Body                     /
//                          Sensor\CC2530DB\..\..\..\..\..\Components\stack\s /
//                          ys\" -I "S:\zigbee\Myzigbe\version 3.0 for new    /
//                          ZStack-CC2530-2.5.1a\Projects\zstack\AT           /
//                          commands\AT command 3.2 -Body                     /
//                          Sensor\CC2530DB\..\..\..\..\..\Components\stack\z /
//                          do\" -I "S:\zigbee\Myzigbe\version 3.0 for new    /
//                          ZStack-CC2530-2.5.1a\Projects\zstack\AT           /
//                          commands\AT command 3.2 -Body                     /
//                          Sensor\CC2530DB\..\..\..\..\..\Components\stack\z /
//                          cl\" -I "S:\zigbee\Myzigbe\version 3.0 for new    /
//                          ZStack-CC2530-2.5.1a\Projects\zstack\AT           /
//                          commands\AT command 3.2 -Body                     /
//                          Sensor\CC2530DB\..\..\..\..\..\Components\zmac\"  /
//                          -I "S:\zigbee\Myzigbe\version 3.0 for new         /
//                          ZStack-CC2530-2.5.1a\Projects\zstack\AT           /
//                          commands\AT command 3.2 -Body                     /
//                          Sensor\CC2530DB\..\..\..\..\..\Components\zmac\f8 /
//                          w\" -Ohz --require_prototypes                     /
//    List file          =  S:\zigbee\Myzigbe\version 3.0 for new             /
//                          ZStack-CC2530-2.5.1a\Projects\zstack\AT           /
//                          commands\AT command 3.2 -Body                     /
//                          Sensor\CC2530DB\RouterEB\List\AT_ZCL_ONOFF_SWITCH /
//                          .s51                                              /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME AT_ZCL_ONOFF_SWITCH

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION ??AT_ZCL_ONOFF_SWITCH_BasicResetCB?relay,0203H
        FUNCTION ??AT_ZCL_ONOFF_SWITCH_EP_ENABLE?relay,0203H
        FUNCTION ??AT_ZCL_ONOFF_SWITCH_IdentifyCB?relay,0203H
        PUBLIC ??AT_ZCL_ONOFF_SWITCH_Init?relay
        FUNCTION ??AT_ZCL_ONOFF_SWITCH_Init?relay,0203H
        PUBLIC ??AT_ZCL_ONOFF_SWITCH_OnOffCB?relay
        FUNCTION ??AT_ZCL_ONOFF_SWITCH_OnOffCB?relay,0203H
        FUNCTION ??AT_ZCL_ONOFF_SWITCH_ProcessIdentifyTimeChange,0203H
        PUBLIC ??AT_ZCL_ONOFF_SWITCH_event_loop?relay
        FUNCTION ??AT_ZCL_ONOFF_SWITCH_event_loop?relay,0203H
        PUBLIC ??AT_ZCL_ONOFF_SWITCH_setting?relay
        FUNCTION ??AT_ZCL_ONOFF_SWITCH_setting?relay,0203H
        FUNCTION ??AT_ZCL_ONOFF_SWITCH_update?relay,0203H
        FUNCTION AT_ZCL_ONOFF_SWITCH_BasicResetCB,021603H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 4, STACK
        LOCFRAME XSTACK, 4, STACK
        FUNCTION AT_ZCL_ONOFF_SWITCH_EP_ENABLE,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION AT_ZCL_ONOFF_SWITCH_IdentifyCB,021603H
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC AT_ZCL_ONOFF_SWITCH_Init
        FUNCTION AT_ZCL_ONOFF_SWITCH_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC AT_ZCL_ONOFF_SWITCH_OnOffCB
        FUNCTION AT_ZCL_ONOFF_SWITCH_OnOffCB,021603H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION AT_ZCL_ONOFF_SWITCH_ProcessIdentifyTimeChange,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC AT_ZCL_ONOFF_SWITCH_TaskID
        PUBLIC AT_ZCL_ONOFF_SWITCH_event_loop
        FUNCTION AT_ZCL_ONOFF_SWITCH_event_loop,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC AT_ZCL_ONOFF_SWITCH_setting
        FUNCTION AT_ZCL_ONOFF_SWITCH_setting,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        FUNCTION AT_ZCL_ONOFF_SWITCH_update,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 33, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
zclHA_Init          SYMBOL "zclHA_Init"
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
AT_ZCL_EP_ENABLE_Register SYMBOL "AT_ZCL_EP_ENABLE_Register"
switch_init         SYMBOL "switch_init"
osal_nv_item_init   SYMBOL "osal_nv_item_init"
osal_nv_read        SYMBOL "osal_nv_read"
osal_nv_write       SYMBOL "osal_nv_write"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
switch_status       SYMBOL "switch_status"
zcl_SendCommand     SYMBOL "zcl_SendCommand"
HalLedSet           SYMBOL "HalLedSet"
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
HalLedBlink         SYMBOL "HalLedBlink"
??AT_ZCL_EP_ENABLE_Register?relay SYMBOL "?relay", AT_ZCL_EP_ENABLE_Register
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_nv_item_init?relay SYMBOL "?relay", osal_nv_item_init
??osal_nv_read?relay SYMBOL "?relay", osal_nv_read
??osal_nv_write?relay SYMBOL "?relay", osal_nv_write
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
??switch_init?relay SYMBOL "?relay", switch_init
??switch_status?relay SYMBOL "?relay", switch_status
??zclGeneral_RegisterCmdCallbacks?relay SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
??zclHA_Init?relay  SYMBOL "?relay", zclHA_Init
??zcl_SendCommand?relay SYMBOL "?relay", zcl_SendCommand
??zcl_registerAttrList?relay SYMBOL "?relay", zcl_registerAttrList
AT_ZCL_ONOFF_SWITCH_Init SYMBOL "AT_ZCL_ONOFF_SWITCH_Init"
??AT_ZCL_ONOFF_SWITCH_Init?relay SYMBOL "?relay", AT_ZCL_ONOFF_SWITCH_Init
AT_ZCL_ONOFF_SWITCH_OnOffCB SYMBOL "AT_ZCL_ONOFF_SWITCH_OnOffCB"
??AT_ZCL_ONOFF_SWITCH_OnOffCB?relay SYMBOL "?relay", AT_ZCL_ONOFF_SWITCH_OnOffCB
AT_ZCL_ONOFF_SWITCH_event_loop SYMBOL "AT_ZCL_ONOFF_SWITCH_event_loop"
??AT_ZCL_ONOFF_SWITCH_event_loop?relay SYMBOL "?relay", AT_ZCL_ONOFF_SWITCH_event_loop
AT_ZCL_ONOFF_SWITCH_setting SYMBOL "AT_ZCL_ONOFF_SWITCH_setting"
??AT_ZCL_ONOFF_SWITCH_setting?relay SYMBOL "?relay", AT_ZCL_ONOFF_SWITCH_setting

        EXTERN zclHA_Init
        FUNCTION zclHA_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_ZCL_EP_ENABLE_Register
        FUNCTION AT_ZCL_EP_ENABLE_Register,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN switch_init
        FUNCTION switch_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN switch_status
        FUNCTION switch_status,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendCommand
        FUNCTION zcl_SendCommand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AT_ZCL_EP_ENABLE_Register?relay
        FUNCTION ??AT_ZCL_EP_ENABLE_Register?relay,00H
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_nv_item_init?relay
        FUNCTION ??osal_nv_item_init?relay,00H
        EXTERN ??osal_nv_read?relay
        FUNCTION ??osal_nv_read?relay,00H
        EXTERN ??osal_nv_write?relay
        FUNCTION ??osal_nv_write?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN ??switch_init?relay
        FUNCTION ??switch_init?relay,00H
        EXTERN ??switch_status?relay
        FUNCTION ??switch_status?relay,00H
        EXTERN ??zclGeneral_RegisterCmdCallbacks?relay
        FUNCTION ??zclGeneral_RegisterCmdCallbacks?relay,00H
        EXTERN ??zclHA_Init?relay
        FUNCTION ??zclHA_Init?relay,00H
        EXTERN ??zcl_SendCommand?relay
        FUNCTION ??zcl_SendCommand?relay,00H
        EXTERN ??zcl_registerAttrList?relay
        FUNCTION ??zcl_registerAttrList?relay,00H
        EXTERN AT_ZCL_ONOFF_SWITCH_Attrs
        EXTERN AT_ZCL_ONOFF_SWITCH_IdentifyTime
        EXTERN AT_ZCL_ONOFF_SWITCH_OnOff
        EXTERN AT_ZCL_ONOFF_SWITCH_SimpleDesc
        EXTERN AT_ZCL_ONOFF_SWITCH_action

// S:\zigbee\Myzigbe\version 3.0 for new ZStack-CC2530-2.5.1a\Projects\zstack\AT commands\AT command 3.2 -Body Sensor\Source\AT_ZCL_ONOFF_SWITCH.c
//    1 
//    2 /*********************************************************************
//    3  * INCLUDES
//    4  */
//    5 #include "ZComDef.h"
//    6 #include "OSAL.h"
//    7 #include "AF.h"
//    8 #include "ZDApp.h"
//    9 
//   10 #include "zcl.h"
//   11 #include "zcl_general.h"
//   12 #include "zcl_ms.h"
//   13 #include "zcl_ha.h"
//   14 #include "AT_ZCL.h"
//   15 #include "AT_uart.h"
//   16 #include "AT_ZCL_ONOFF_SWITCH.h"
//   17 #include "AT_switch.h"
//   18 #include "OSAL_Nv.h"
//   19 
//   20 #include "onboard.h"
//   21 
//   22 /* HAL */
//   23 #include "hal_led.h"
//   24 #include "hal_key.h"
//   25 
//   26 /*********************************************************************
//   27  * GLOBAL VARIABLES
//   28  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   29 byte AT_ZCL_ONOFF_SWITCH_TaskID;
AT_ZCL_ONOFF_SWITCH_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   30 
//   31 /*********************************************************************
//   32  * LOCAL FUNCTION
//   33  */
//   34 static void AT_ZCL_ONOFF_SWITCH_IdentifyCB( zclIdentify_t *pCmd );
//   35 static void AT_ZCL_ONOFF_SWITCH_BasicResetCB( void );
//   36 static void AT_ZCL_ONOFF_SWITCH_ProcessIdentifyTimeChange( void );
//   37 static void AT_ZCL_ONOFF_SWITCH_update(void);
//   38 
//   39 //ninglvfeihong Modified
//   40 void AT_ZCL_ONOFF_SWITCH_OnOffCB( uint8 cmd );

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   41 static uint8 light_setting_reverse = FALSE;
light_setting_reverse:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   42 void AT_ZCL_ONOFF_SWITCH_setting(uint8 reverse);
//   43 
//   44 static void AT_ZCL_ONOFF_SWITCH_EP_ENABLE( bool isEnable);
//   45 
//   46 /*********************************************************************
//   47  * ZCL General Profile Callback table
//   48  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//   49 static zclGeneral_AppCallbacks_t AT_ZCL_ONOFF_SWITCH_GEN_CmdCallbacks =
AT_ZCL_ONOFF_SWITCH_GEN_CmdCallbacks:
        DATA8
        DS 30
        REQUIRE `?<Initializer for AT_ZCL_ONOFF_SWITCH_GEN_CmdC`
        REQUIRE __INIT_XDATA_I
//   50 { 
//   51   AT_ZCL_ONOFF_SWITCH_BasicResetCB,                 // Basic Cluster Reset command
//   52   AT_ZCL_ONOFF_SWITCH_IdentifyCB,                   // Identify command   
//   53   NULL,                                             // Identify Query Response command
//   54   AT_ZCL_ONOFF_SWITCH_OnOffCB,                      // On/Off cluster command
//   55   NULL,                                     // Level Control Move to Level command
//   56   NULL,                                     // Level Control Move command
//   57   NULL,                                     // Level Control Step command
//   58   NULL,                                     // Group Response commands
//   59   NULL,                                     // Scene Store Request command
//   60   NULL,                                     // Scene Recall Request command
//   61   NULL,                                     // Scene Response command
//   62   NULL,                                     // Alarm (Response) command
//   63   NULL,                                     // RSSI Location commands
//   64   NULL,                                     // RSSI Location Response commands
//   65 };
//   66 
//   67 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   68 void AT_ZCL_ONOFF_SWITCH_Init( byte task_id )
AT_ZCL_ONOFF_SWITCH_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function AT_ZCL_ONOFF_SWITCH_Init
        CODE
//   69 {
        FUNCALL AT_ZCL_ONOFF_SWITCH_Init, zclHA_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_ZCL_ONOFF_SWITCH_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_ZCL_ONOFF_SWITCH_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_ZCL_ONOFF_SWITCH_Init, AT_ZCL_EP_ENABLE_Register
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_ZCL_ONOFF_SWITCH_Init, switch_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_ZCL_ONOFF_SWITCH_Init, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_ZCL_ONOFF_SWITCH_Init, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
//   70   AT_ZCL_ONOFF_SWITCH_TaskID = task_id;
        MOV     DPTR,#AT_ZCL_ONOFF_SWITCH_TaskID
        MOVX    @DPTR,A
//   71 
//   72   // This app is part of the Home Automation Profile
//   73   zclHA_Init( &AT_ZCL_ONOFF_SWITCH_SimpleDesc );
        ; Setup parameters for call to function zclHA_Init
        MOV     R2,#AT_ZCL_ONOFF_SWITCH_SimpleDesc & 0xff
        MOV     R3,#(AT_ZCL_ONOFF_SWITCH_SimpleDesc >> 8) & 0xff
        LCALL   ??zclHA_Init?relay
//   74 
//   75   // Register the ZCL General Cluster Library callback functions
//   76   zclGeneral_RegisterCmdCallbacks( AT_ZCL_ONOFF_SWITCH_ENDPOINT, &AT_ZCL_ONOFF_SWITCH_GEN_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV     R2,#AT_ZCL_ONOFF_SWITCH_GEN_CmdCallbacks & 0xff
        MOV     R3,#(AT_ZCL_ONOFF_SWITCH_GEN_CmdCallbacks >> 8) & 0xff
        MOV     R1,#0x7
        LCALL   ??zclGeneral_RegisterCmdCallbacks?relay
//   77   
//   78   // Register the application's attribute list
//   79   zcl_registerAttrList( AT_ZCL_ONOFF_SWITCH_ENDPOINT, AT_ZCL_ONOFF_SWITCH_MAX_ATTRIBUTES, AT_ZCL_ONOFF_SWITCH_Attrs );
        ; Setup parameters for call to function zcl_registerAttrList
        MOV     R4,#AT_ZCL_ONOFF_SWITCH_Attrs & 0xff
        MOV     R5,#(AT_ZCL_ONOFF_SWITCH_Attrs >> 8) & 0xff
        MOV     R2,#0xc
        MOV     R1,#0x7
        LCALL   ??zcl_registerAttrList?relay
//   80   
//   81   //register for AT command system enable/disable call back function
//   82   AT_ZCL_EP_ENABLE_Register(  AT_ZCL_ONOFF_SWITCH_ENDPOINT,AT_ZCL_ONOFF_SWITCH_EP_ENABLE);
        ; Setup parameters for call to function AT_ZCL_EP_ENABLE_Register
        MOV     R2,#??AT_ZCL_ONOFF_SWITCH_EP_ENABLE?relay & 0xff
        MOV     R3,#(??AT_ZCL_ONOFF_SWITCH_EP_ENABLE?relay >> 8) & 0xff
        MOV     R1,#0x7
        LCALL   ??AT_ZCL_EP_ENABLE_Register?relay
//   83   
//   84   //initialize the switch device
//   85   switch_init();
        ; Setup parameters for call to function switch_init
        LCALL   ??switch_init?relay
//   86   
//   87   //ninglvfeihong for light sensor: record the setting of light endpoint
//   88   //uint8 osal_nv_read( uint16 id, uint16 ndx, uint16 len, void *buf )
//   89   osal_nv_item_init( AT_S_NV_OFFSET+AT_S_BUTTON_FUN_ID, 1, NULL );
        ; Setup parameters for call to function osal_nv_item_init
        CLR     A
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#0x64
        MOV     R3,#0x4
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//   90   osal_nv_read(AT_S_NV_OFFSET+AT_S_BUTTON_FUN_ID, 0, 1, &light_setting_reverse);
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0 + 0,#light_setting_reverse & 0xff
        MOV     ?V0 + 1,#(light_setting_reverse >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x64
        MOV     R3,#0x4
        LCALL   ??osal_nv_read?relay
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock0
//   91 }
//   92 //ninglvfeihong modified for light sensor

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   93 void AT_ZCL_ONOFF_SWITCH_setting(uint8 reverse){
AT_ZCL_ONOFF_SWITCH_setting:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function AT_ZCL_ONOFF_SWITCH_setting
        CODE
        FUNCALL AT_ZCL_ONOFF_SWITCH_setting, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_ZCL_ONOFF_SWITCH_setting, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//   94   if(AT_ZCL_ONOFF_SWITCH_setting_Reverse==reverse)
        MOV     A,#0x2
        XRL     A,R6
        JNZ     ??AT_ZCL_ONOFF_SWITCH_setting_0
//   95     light_setting_reverse = !light_setting_reverse;
        MOV     DPTR,#light_setting_reverse
        MOVX    A,@DPTR
        JNZ     ??AT_ZCL_ONOFF_SWITCH_setting_1
        MOV     A,#0x1
        SJMP    ??AT_ZCL_ONOFF_SWITCH_setting_2
??AT_ZCL_ONOFF_SWITCH_setting_1:
        CLR     A
        SJMP    ??AT_ZCL_ONOFF_SWITCH_setting_2
//   96   else
//   97     light_setting_reverse=reverse;
??AT_ZCL_ONOFF_SWITCH_setting_0:
        MOV     A,R6
        MOV     DPTR,#light_setting_reverse
??AT_ZCL_ONOFF_SWITCH_setting_2:
        MOVX    @DPTR,A
//   98   osal_nv_item_init( AT_S_NV_OFFSET+AT_S_BUTTON_FUN_ID, 1, NULL );
        ; Setup parameters for call to function osal_nv_item_init
        CLR     A
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#0x64
        MOV     R3,#0x4
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//   99   osal_nv_write( AT_S_NV_OFFSET+AT_S_BUTTON_FUN_ID, 0,1, &light_setting_reverse );
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0 + 0,#light_setting_reverse & 0xff
        MOV     ?V0 + 1,#(light_setting_reverse >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x64
        MOV     R3,#0x4
        LCALL   ??osal_nv_write?relay
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock1
//  100   
//  101 }
//  102 
//  103 /*********************************************************************
//  104  * @fn          zclSample_event_loop
//  105  *
//  106  * @brief       Event Loop Processor for zclGeneral.
//  107  *
//  108  * @param       none
//  109  *
//  110  * @return      none
//  111  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  112 uint16 AT_ZCL_ONOFF_SWITCH_event_loop( uint8 task_id, uint16 events )
AT_ZCL_ONOFF_SWITCH_event_loop:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function AT_ZCL_ONOFF_SWITCH_event_loop
        CODE
//  113 {
        FUNCALL AT_ZCL_ONOFF_SWITCH_event_loop, AT_ZCL_ONOFF_SWITCH_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_ZCL_ONOFF_SWITCH_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_ZCL_ONOFF_SWITCH_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_ZCL_ONOFF_SWITCH_event_loop, AT_ZCL_ONOFF_SWITCH_update
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_ZCL_ONOFF_SWITCH_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  114   afIncomingMSGPacket_t *MSGpkt;
//  115   
//  116   (void)task_id;  // Intentionally unreferenced parameter
//  117 
//  118   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     ??AT_ZCL_ONOFF_SWITCH_event_loop_0
//  119   {
//  120     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( AT_ZCL_ONOFF_SWITCH_TaskID )) )
//  121     {
//  122       switch ( MSGpkt->hdr.event )
//  123       { 
//  124          default:
//  125           break;
//  126       }
//  127       // Release the memory
//  128       osal_msg_deallocate( (uint8 *)MSGpkt );
//  129     }
//  130 
//  131     // return unprocessed events
//  132     return (events ^ SYS_EVENT_MSG);
//  133   }
//  134 
//  135   if ( events & AT_ZCL_ONOFF_SWITCH_IDENTIFY_TIMEOUT_EVT )
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??AT_ZCL_ONOFF_SWITCH_event_loop_1
//  136   {
//  137     if (AT_ZCL_ONOFF_SWITCH_IdentifyTime > 0 )
        MOV     DPTR,#AT_ZCL_ONOFF_SWITCH_IdentifyTime
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??AT_ZCL_ONOFF_SWITCH_event_loop_2
//  138       AT_ZCL_ONOFF_SWITCH_IdentifyTime--;
        MOV     DPTR,#AT_ZCL_ONOFF_SWITCH_IdentifyTime
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOVX    @DPTR,A
//  139     AT_ZCL_ONOFF_SWITCH_ProcessIdentifyTimeChange();
??AT_ZCL_ONOFF_SWITCH_event_loop_2:
        ; Setup parameters for call to function AT_ZCL_ONOFF_SWITCH_ProcessIdentifyTimeChange
        LCALL   ??AT_ZCL_ONOFF_SWITCH_ProcessIdentifyTimeChange
//  140 
//  141     return ( events ^ AT_ZCL_ONOFF_SWITCH_IDENTIFY_TIMEOUT_EVT );
        MOV     A,R6
        XRL     A,#0x1
        MOV     R2,A
        MOV     A,R7
??AT_ZCL_ONOFF_SWITCH_event_loop_3:
        MOV     R3,A
        SJMP    ??AT_ZCL_ONOFF_SWITCH_event_loop_4
//  142   }
??AT_ZCL_ONOFF_SWITCH_event_loop_5:
        ; Setup parameters for call to function osal_msg_deallocate
        LCALL   ??osal_msg_deallocate?relay
??AT_ZCL_ONOFF_SWITCH_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#AT_ZCL_ONOFF_SWITCH_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     A,R2
        ORL     A,R3
        JNZ     ??AT_ZCL_ONOFF_SWITCH_event_loop_5
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        SJMP    ??AT_ZCL_ONOFF_SWITCH_event_loop_3
//  143   
//  144   //updata the switch status
//  145   if ( events & AT_ZCL_ONOFF_SWITCH_UPDATE_EVT )
??AT_ZCL_ONOFF_SWITCH_event_loop_1:
        ANL     A,#0x2
        JZ      ??AT_ZCL_ONOFF_SWITCH_event_loop_6
//  146   {
//  147     AT_ZCL_ONOFF_SWITCH_update();
        ; Setup parameters for call to function AT_ZCL_ONOFF_SWITCH_update
        LCALL   ??AT_ZCL_ONOFF_SWITCH_update?relay
//  148     osal_start_timerEx( AT_ZCL_ONOFF_SWITCH_TaskID, AT_ZCL_ONOFF_SWITCH_UPDATE_EVT, 500 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0xc
        MOV     R5,#0x1
        LCALL   ?Subroutine3 & 0xFFFF
//  149     return ( events ^ AT_ZCL_ONOFF_SWITCH_UPDATE_EVT );
??CrossCallReturnLabel_0:
        MOV     A,R6
        XRL     A,#0x2
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        SJMP    ??AT_ZCL_ONOFF_SWITCH_event_loop_4
//  150   }
//  151   
//  152   // Discard unknown events
//  153   return 0;
??AT_ZCL_ONOFF_SWITCH_event_loop_6:
        MOV     R2,#0x0
        MOV     R3,#0x0
??AT_ZCL_ONOFF_SWITCH_event_loop_4:
        LJMP    ??Subroutine6_0 & 0xFFFF
        CFI EndBlock cfiBlock2
//  154 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        MOV     R2,#0x2
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5
        REQUIRE ??Subroutine4_0
        ; // Fall through to label ??Subroutine4_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine4_0:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_0
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        MOV     R3,#0x0
        MOV     DPTR,#AT_ZCL_ONOFF_SWITCH_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9
//  155 
//  156 
//  157 
//  158 
//  159 /*********************************************************************
//  160  * @fn      AT_ZCL_ONOFF_SWITCH_update
//  161  *
//  162  * @brief   updata the Device Temperature Configuration Cluster every second
//  163  *
//  164  * @param   none
//  165  *
//  166  * @return  none
//  167  *
//  168 ************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  169 static void AT_ZCL_ONOFF_SWITCH_update(void){
AT_ZCL_ONOFF_SWITCH_update:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function AT_ZCL_ONOFF_SWITCH_update
        CODE
        FUNCALL AT_ZCL_ONOFF_SWITCH_update, switch_status
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_ZCL_ONOFF_SWITCH_update, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_ZCL_ONOFF_SWITCH_update, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_ZCL_ONOFF_SWITCH_update, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_ZCL_ONOFF_SWITCH_update, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//  170   uint8 sw = switch_status();
        ; Setup parameters for call to function switch_status
        LCALL   ??switch_status?relay
//  171   if(light_setting_reverse){
        MOV     DPTR,#light_setting_reverse
        MOVX    A,@DPTR
        JZ      ??AT_ZCL_ONOFF_SWITCH_update_0
//  172     if(AT_ZCL_ONOFF_SWITCH_action != !sw){
        MOV     A,R1
        JNZ     ??AT_ZCL_ONOFF_SWITCH_update_1
        SETB    B.0
        SJMP    ??AT_ZCL_ONOFF_SWITCH_update_2
??AT_ZCL_ONOFF_SWITCH_update_1:
        CLR     B.0
??AT_ZCL_ONOFF_SWITCH_update_2:
        MOV     DPTR,#AT_ZCL_ONOFF_SWITCH_action
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     C,B.0
        CLR     A
        RLC     A
        XRL     A,R0
        JNZ     $+5
        LJMP    ??AT_ZCL_ONOFF_SWITCH_update_3 & 0xFFFF
//  173       AT_ZCL_ONOFF_SWITCH_action= !sw;
        MOV     A,R1
        JNZ     ??AT_ZCL_ONOFF_SWITCH_update_4
        MOV     A,#0x1
        SJMP    ??AT_ZCL_ONOFF_SWITCH_update_5
??AT_ZCL_ONOFF_SWITCH_update_4:
        CLR     A
??AT_ZCL_ONOFF_SWITCH_update_5:
        MOVX    @DPTR,A
//  174       
//  175       afAddrType_t dstAddr;
//  176       dstAddr.addrMode = afAddrNotPresent;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  177       if(AT_ZCL_ONOFF_SWITCH_action==ON_OFF_SWITCH_ACTIONS_0 ){
        MOV     DPTR,#AT_ZCL_ONOFF_SWITCH_action
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        CLR     A
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        JC      ??AT_ZCL_ONOFF_SWITCH_update_6
//  178         zclGeneral_SendOnOff_CmdOff(AT_ZCL_ONOFF_SWITCH_ENDPOINT,&dstAddr,1,1);
        ; Setup parameters for call to function zcl_SendCommand
??AT_ZCL_ONOFF_SWITCH_update_7:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 27)
        CLR     A
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     ?V0 + 0,#0x0
        SJMP    ??AT_ZCL_ONOFF_SWITCH_update_8
        CFI CFA_XSP16 add(XSP16, 22)
//  179       }else{
//  180         zclGeneral_SendOnOff_CmdOn(AT_ZCL_ONOFF_SWITCH_ENDPOINT,&dstAddr,1,1);
//  181       }
//  182     }
//  183       
//  184   }
//  185   else{
//  186     if(AT_ZCL_ONOFF_SWITCH_action != sw){
??AT_ZCL_ONOFF_SWITCH_update_0:
        MOV     DPTR,#AT_ZCL_ONOFF_SWITCH_action
        MOVX    A,@DPTR
        XRL     A,R1
        JZ      ??AT_ZCL_ONOFF_SWITCH_update_3
//  187         AT_ZCL_ONOFF_SWITCH_action= sw;
        MOV     A,R1
        MOVX    @DPTR,A
//  188       
//  189       afAddrType_t dstAddr;
//  190       dstAddr.addrMode = afAddrNotPresent;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  191       if(AT_ZCL_ONOFF_SWITCH_action==ON_OFF_SWITCH_ACTIONS_0 ){
        MOV     DPTR,#AT_ZCL_ONOFF_SWITCH_action
        MOVX    A,@DPTR
        JNZ     ??AT_ZCL_ONOFF_SWITCH_update_9
//  192         zclGeneral_SendOnOff_CmdOff(AT_ZCL_ONOFF_SWITCH_ENDPOINT,&dstAddr,1,1);
        ; Setup parameters for call to function zcl_SendCommand
        CLR     A
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        SJMP    ??AT_ZCL_ONOFF_SWITCH_update_7
//  193       }else{
//  194         zclGeneral_SendOnOff_CmdOn(AT_ZCL_ONOFF_SWITCH_ENDPOINT,&dstAddr,1,1);
??AT_ZCL_ONOFF_SWITCH_update_9:
        ; Setup parameters for call to function zcl_SendCommand
        CLR     A
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
??AT_ZCL_ONOFF_SWITCH_update_6:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 27)
        CLR     A
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 32)
??AT_ZCL_ONOFF_SWITCH_update_8:
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x7
        LCALL   ??zcl_SendCommand?relay
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//  195       }
//  196     }
//  197   }
//  198 
//  199 }
??AT_ZCL_ONOFF_SWITCH_update_3:
        MOV     A,#0xc
        SJMP    ??Subroutine5_0
        CFI EndBlock cfiBlock10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x4
        CFI EndBlock cfiBlock11
        REQUIRE ??Subroutine5_0
        ; // Fall through to label ??Subroutine5_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine5_0:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock12
        REQUIRE ??Subroutine6_0
        ; // Fall through to label ??Subroutine6_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine6_0:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock13
//  200 
//  201 
//  202 
//  203 
//  204 /*********************************************************************
//  205  * @fn      AT_ZCL_ONOFF_SWITCH_BasicResetCB
//  206  *
//  207  * @brief   Callback from the ZCL General Cluster Library
//  208  *          to set all the Basic Cluster attributes to default values.
//  209  *
//  210  * @param   none
//  211  *
//  212  * @return  none
//  213  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  214 static void AT_ZCL_ONOFF_SWITCH_BasicResetCB( void )
AT_ZCL_ONOFF_SWITCH_BasicResetCB:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function AT_ZCL_ONOFF_SWITCH_BasicResetCB
        CODE
//  215 {
        FUNCALL AT_ZCL_ONOFF_SWITCH_BasicResetCB, AT_ZCL_ONOFF_SWITCH_OnOffCB
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 4, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_ZCL_ONOFF_SWITCH_BasicResetCB, AT_ZCL_ONOFF_SWITCH_IdentifyCB
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 4, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 4)
//  216   // Reset all attributes to default values
//  217   AT_ZCL_ONOFF_SWITCH_OnOffCB(COMMAND_OFF);
        ; Setup parameters for call to function AT_ZCL_ONOFF_SWITCH_OnOffCB
        MOV     R1,#0x0
        LCALL   ??AT_ZCL_ONOFF_SWITCH_OnOffCB?relay
//  218   
//  219   zclIdentify_t identifyCmd={NULL,0};
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {(afAddrType_t *)0, 0}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {(afAddrType_t *)0, 0}>` & 0xff
        MOV     A,#0x4
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  220   AT_ZCL_ONOFF_SWITCH_IdentifyCB( &identifyCmd );
        ; Setup parameters for call to function AT_ZCL_ONOFF_SWITCH_IdentifyCB
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AT_ZCL_ONOFF_SWITCH_IdentifyCB?relay
//  221 }
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock14
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock15
//  222 
//  223 
//  224 /*********************************************************************
//  225  * @fn      AT_ZCL_ONOFF_SWITCH_IdentifyCB
//  226  *
//  227  * @brief   Callback from the ZCL General Cluster Library when
//  228  *          it received an Identity Command for this application.
//  229  *
//  230  * @param   srcAddr - source address and endpoint of the response message
//  231  * @param   identifyTime - the number of seconds to identify yourself
//  232  *
//  233  * @return  none
//  234  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  235 static void AT_ZCL_ONOFF_SWITCH_IdentifyCB( zclIdentify_t *pCmd )
AT_ZCL_ONOFF_SWITCH_IdentifyCB:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function AT_ZCL_ONOFF_SWITCH_IdentifyCB
        CODE
//  236 {
        FUNCALL AT_ZCL_ONOFF_SWITCH_IdentifyCB, AT_ZCL_ONOFF_SWITCH_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  237   AT_ZCL_ONOFF_SWITCH_IdentifyTime = pCmd->identifyTime;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#AT_ZCL_ONOFF_SWITCH_IdentifyTime
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  238   AT_ZCL_ONOFF_SWITCH_ProcessIdentifyTimeChange();
        ; Setup parameters for call to function AT_ZCL_ONOFF_SWITCH_ProcessIdentifyTimeChange
        LCALL   ??AT_ZCL_ONOFF_SWITCH_ProcessIdentifyTimeChange
//  239 }
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock16
//  240 
//  241 
//  242 
//  243 /*********************************************************************
//  244  * @fn      AT_ZCL_ONOFF_SWITCH_OnOffCB
//  245  *
//  246  * @brief   Callback from the ZCL General Cluster Library when
//  247  *          it received an On/Off Command for this application.
//  248  *
//  249  * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
//  250  *
//  251  * @return  none
//  252  */
//  253 //ninglvfeihong Modified

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  254 void AT_ZCL_ONOFF_SWITCH_OnOffCB( uint8 cmd )
AT_ZCL_ONOFF_SWITCH_OnOffCB:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function AT_ZCL_ONOFF_SWITCH_OnOffCB
        CODE
//  255 {
        FUNCALL AT_ZCL_ONOFF_SWITCH_OnOffCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_ZCL_ONOFF_SWITCH_OnOffCB, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_ZCL_ONOFF_SWITCH_OnOffCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_ZCL_ONOFF_SWITCH_OnOffCB, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  256   // Turn on the light
//  257   if ( cmd == COMMAND_ON )
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??AT_ZCL_ONOFF_SWITCH_OnOffCB_0
//  258     AT_ZCL_ONOFF_SWITCH_OnOff = AT_ZCL_GEN_ON;
??AT_ZCL_ONOFF_SWITCH_OnOffCB_1:
        MOV     DPTR,#AT_ZCL_ONOFF_SWITCH_OnOff
        MOV     A,#0x1
        MOVX    @DPTR,A
//  259 
//  260   // Turn off the light
//  261   else if ( cmd == COMMAND_OFF )
//  262     AT_ZCL_ONOFF_SWITCH_OnOff = AT_ZCL_GEN_OFF;
//  263 
//  264   // Toggle the light
//  265   else
//  266   {
//  267     if ( AT_ZCL_ONOFF_SWITCH_OnOff == AT_ZCL_GEN_OFF )
//  268       AT_ZCL_ONOFF_SWITCH_OnOff = AT_ZCL_GEN_ON;
//  269     else
//  270       AT_ZCL_ONOFF_SWITCH_OnOff = AT_ZCL_GEN_OFF;
//  271   }
//  272 
//  273   // In this sample app, we use LED2 to simulate
//  274   if ( AT_ZCL_ONOFF_SWITCH_OnOff == AT_ZCL_GEN_ON ){
//  275     HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,A
        MOV     R1,A
        LCALL   ??HalLedSet?relay
//  276     osal_start_timerEx( AT_ZCL_ONOFF_SWITCH_TaskID, AT_ZCL_ONOFF_SWITCH_UPDATE_EVT, 10 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0xa
        MOV     R5,#0x0
        LCALL   ?Subroutine3 & 0xFFFF
//  277   }
//  278   else{
//  279     HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
//  280     osal_stop_timerEx( AT_ZCL_ONOFF_SWITCH_TaskID, AT_ZCL_ONOFF_SWITCH_UPDATE_EVT );
//  281     AT_ZCL_ONOFF_SWITCH_action=0xFF;   //0xFF indicates that the value is invalid.
//  282   }
//  283 }
??CrossCallReturnLabel_1:
        SJMP    ?Subroutine2
??AT_ZCL_ONOFF_SWITCH_OnOffCB_0:
        MOV     A,R6
        JNZ     ??AT_ZCL_ONOFF_SWITCH_OnOffCB_2
??AT_ZCL_ONOFF_SWITCH_OnOffCB_3:
        MOV     DPTR,#AT_ZCL_ONOFF_SWITCH_OnOff
        CLR     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalLedSet
        MOV     R2,A
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#AT_ZCL_ONOFF_SWITCH_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
        MOV     DPTR,#AT_ZCL_ONOFF_SWITCH_action
        MOV     A,#-0x1
        MOVX    @DPTR,A
        SJMP    ??CrossCallReturnLabel_1
??AT_ZCL_ONOFF_SWITCH_OnOffCB_2:
        MOV     DPTR,#AT_ZCL_ONOFF_SWITCH_OnOff
        MOVX    A,@DPTR
        JNZ     ??AT_ZCL_ONOFF_SWITCH_OnOffCB_3
        SJMP    ??AT_ZCL_ONOFF_SWITCH_OnOffCB_1
        CFI EndBlock cfiBlock17
//  284 
//  285 
//  286 /*********************************************************************
//  287  * @fn      AT_ZCL_ONOFF_SWITCH_ProcessIdentifyTimeChange
//  288  *
//  289  * @brief   Called to process any change to the IdentifyTime attribute.
//  290  *
//  291  * @param   none
//  292  *
//  293  * @return  none
//  294  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  295 static void AT_ZCL_ONOFF_SWITCH_ProcessIdentifyTimeChange( void )
AT_ZCL_ONOFF_SWITCH_ProcessIdentifyTimeChange:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI Function AT_ZCL_ONOFF_SWITCH_ProcessIdentifyTimeChange
        CODE
//  296 {
        FUNCALL AT_ZCL_ONOFF_SWITCH_ProcessIdentifyTimeChange, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_ZCL_ONOFF_SWITCH_ProcessIdentifyTimeChange, HalLedBlink
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_ZCL_ONOFF_SWITCH_ProcessIdentifyTimeChange, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  297   if ( AT_ZCL_ONOFF_SWITCH_IdentifyTime > 0 )
        MOV     DPTR,#AT_ZCL_ONOFF_SWITCH_IdentifyTime
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??AT_ZCL_ONOFF_SWITCH_ProcessIdentifyTimeChange_1
//  298   {
//  299     osal_start_timerEx( AT_ZCL_ONOFF_SWITCH_TaskID, AT_ZCL_ONOFF_SWITCH_IDENTIFY_TIMEOUT_EVT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x1
        LCALL   ??Subroutine4_0 & 0xFFFF
//  300     HalLedBlink ( HAL_LED_2, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
??CrossCallReturnLabel_2:
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R3,#0x5
        MOV     R2,#-0x1
        MOV     R1,#0x2
        LCALL   ??HalLedBlink?relay
        SJMP    ??AT_ZCL_ONOFF_SWITCH_ProcessIdentifyTimeChange_2
//  301   }
//  302   else
//  303   {
//  304     osal_stop_timerEx( AT_ZCL_ONOFF_SWITCH_TaskID, AT_ZCL_ONOFF_SWITCH_IDENTIFY_TIMEOUT_EVT );
??AT_ZCL_ONOFF_SWITCH_ProcessIdentifyTimeChange_1:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#AT_ZCL_ONOFF_SWITCH_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
//  305    }
//  306 }
??AT_ZCL_ONOFF_SWITCH_ProcessIdentifyTimeChange_2:
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock18
//  307 
//  308 /******************************************************
//  309  * @fn      AT_ZCL_ONOFF_SWITCH_EP_ENABLE
//  310  *
//  311  * @brief   Process  Measurement and Sensing profile call Callback function
//  312 ********************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  313 static void AT_ZCL_ONOFF_SWITCH_EP_ENABLE( bool isEnable){
AT_ZCL_ONOFF_SWITCH_EP_ENABLE:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function AT_ZCL_ONOFF_SWITCH_EP_ENABLE
        CODE
        FUNCALL AT_ZCL_ONOFF_SWITCH_EP_ENABLE, AT_ZCL_ONOFF_SWITCH_OnOffCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_ZCL_ONOFF_SWITCH_EP_ENABLE, AT_ZCL_ONOFF_SWITCH_BasicResetCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  314   if(isEnable) {
        JZ      ??AT_ZCL_ONOFF_SWITCH_EP_ENABLE_0
//  315     AT_ZCL_ONOFF_SWITCH_OnOffCB(COMMAND_ON);
        ; Setup parameters for call to function AT_ZCL_ONOFF_SWITCH_OnOffCB
        MOV     R1,#0x1
        LCALL   ??AT_ZCL_ONOFF_SWITCH_OnOffCB?relay
        SJMP    ??AT_ZCL_ONOFF_SWITCH_EP_ENABLE_1
//  316   }
//  317   else AT_ZCL_ONOFF_SWITCH_BasicResetCB();
??AT_ZCL_ONOFF_SWITCH_EP_ENABLE_0:
        ; Setup parameters for call to function AT_ZCL_ONOFF_SWITCH_BasicResetCB
        LCALL   ??AT_ZCL_ONOFF_SWITCH_BasicResetCB?relay
        CFI EndBlock cfiBlock19
//  318 }
??AT_ZCL_ONOFF_SWITCH_EP_ENABLE_1:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock20

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for AT_ZCL_ONOFF_SWITCH_GEN_CmdC`:
        DATA16
        DW ??AT_ZCL_ONOFF_SWITCH_BasicResetCB?relay
        DW ??AT_ZCL_ONOFF_SWITCH_IdentifyCB?relay
        DW 0H
        DW ??AT_ZCL_ONOFF_SWITCH_OnOffCB?relay
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DB 0, 0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AT_ZCL_ONOFF_SWITCH_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    AT_ZCL_ONOFF_SWITCH_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AT_ZCL_ONOFF_SWITCH_setting?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    AT_ZCL_ONOFF_SWITCH_setting

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AT_ZCL_ONOFF_SWITCH_event_loop?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    AT_ZCL_ONOFF_SWITCH_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AT_ZCL_ONOFF_SWITCH_update?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    AT_ZCL_ONOFF_SWITCH_update

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AT_ZCL_ONOFF_SWITCH_BasicResetCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    AT_ZCL_ONOFF_SWITCH_BasicResetCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AT_ZCL_ONOFF_SWITCH_IdentifyCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    AT_ZCL_ONOFF_SWITCH_IdentifyCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AT_ZCL_ONOFF_SWITCH_OnOffCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    AT_ZCL_ONOFF_SWITCH_OnOffCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AT_ZCL_ONOFF_SWITCH_ProcessIdentifyTimeChange:
        LCALL   ?BDISPATCH
        DATA
        DC24    AT_ZCL_ONOFF_SWITCH_ProcessIdentifyTimeChange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AT_ZCL_ONOFF_SWITCH_EP_ENABLE?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    AT_ZCL_ONOFF_SWITCH_EP_ENABLE

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant {(afAddrType_t *)0, 0}>`:
        DATA16
        DW 0H
        DW 0

        END
// 
// 815 bytes in segment BANKED_CODE
//  54 bytes in segment BANK_RELAYS
//  30 bytes in segment XDATA_I
//  30 bytes in segment XDATA_ID
//   4 bytes in segment XDATA_ROM_C
//   2 bytes in segment XDATA_Z
// 
// 899 bytes of CODE  memory
//   4 bytes of CONST memory
//  32 bytes of XDATA memory
//
//Errors: none
//Warnings: none
