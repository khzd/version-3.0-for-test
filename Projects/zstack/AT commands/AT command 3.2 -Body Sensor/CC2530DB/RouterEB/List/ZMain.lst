###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         14/Jul/2015  13:20:29 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  S:\zigbee\Myzigbe\version 3.0 for new              #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\ZMain\TI2530D #
#                          B\ZMain.c                                          #
#    Command line       =  -f "S:\zigbee\Myzigbe\version 3.0 for new          #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\AT            #
#                          commands\AT command 3.2 -                          #
#                          temp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cf #
#                          g" (-DCPU32MHZ -DROOT=__near_func                  #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                   #
#                          "S:\zigbee\Myzigbe\version 3.0 for new             #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\AT            #
#                          commands\AT command 3.2 -                          #
#                          temp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cf #
#                          g" (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0   #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0x2015                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "S:\zigbee\Myzigbe\version  #
#                          3.0 for new ZStack-CC2530-2.5.1a\Projects\zstack\Z #
#                          Main\TI2530DB\ZMain.c" -D ZIGBEEPRO -D             #
#                          NWK_AUTO_POLL -D HAL_UART=TRUE -D HOLD_AUTO_START  #
#                          -D NV_RESTORE -D REFLECTOR -D                      #
#                          xHAL_UART_ISR_TX_MAX=200 -D xPOWER_SAVING -D       #
#                          ZCL_READ -D ZCL_WRITE -D ZCL_IDENTIFY -D           #
#                          ZCL_ON_OFF -D ZCL_DISCOVER -D HAL_UART_ISR=1 -D    #
#                          HAL_UART_DMA=0 -D xZTOOL_P1 -D xMT_TASK -D         #
#                          xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                    #
#                          xLCD_SUPPORTED=DEBUG -D xMT_UART_DEFAULT_OVERFLOW= #
#                          FALSE -lC "S:\zigbee\Myzigbe\version 3.0 for new   #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\AT            #
#                          commands\AT command 3.2 -                          #
#                          temp\CC2530DB\RouterEB\List\" -lA                  #
#                          "S:\zigbee\Myzigbe\version 3.0 for new             #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\AT            #
#                          commands\AT command 3.2 -                          #
#                          temp\CC2530DB\RouterEB\List\" --diag_suppress      #
#                          Pe001,Pa010 -o "S:\zigbee\Myzigbe\version 3.0 for  #
#                          new ZStack-CC2530-2.5.1a\Projects\zstack\AT        #
#                          commands\AT command 3.2 -                          #
#                          temp\CC2530DB\RouterEB\Obj\" -e --no_code_motion   #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "S:\zigbee\Myzigbe\version 3.0 for new          #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\AT            #
#                          commands\AT command 3.2 - temp\CC2530DB\" -I       #
#                          "S:\zigbee\Myzigbe\version 3.0 for new             #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\AT            #
#                          commands\AT command 3.2 -                          #
#                          temp\CC2530DB\..\Source\" -I                       #
#                          "S:\zigbee\Myzigbe\version 3.0 for new             #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\AT            #
#                          commands\AT command 3.2 -                          #
#                          temp\CC2530DB\..\Source\hal\" -I                   #
#                          "S:\zigbee\Myzigbe\version 3.0 for new             #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\AT            #
#                          commands\AT command 3.2 -                          #
#                          temp\CC2530DB\..\Source\Modified\" -I              #
#                          "S:\zigbee\Myzigbe\version 3.0 for new             #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\AT            #
#                          commands\AT command 3.2 -                          #
#                          temp\CC2530DB\..\..\..\ZMain\TI2530DB\" -I         #
#                          "S:\zigbee\Myzigbe\version 3.0 for new             #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\AT            #
#                          commands\AT command 3.2 -                          #
#                          temp\CC2530DB\..\..\..\..\..\Components\hal\includ #
#                          e\" -I "S:\zigbee\Myzigbe\version 3.0 for new      #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\AT            #
#                          commands\AT command 3.2 -                          #
#                          temp\CC2530DB\..\..\..\..\..\Components\hal\target #
#                          \CC2530EB\" -I "S:\zigbee\Myzigbe\version 3.0 for  #
#                          new ZStack-CC2530-2.5.1a\Projects\zstack\AT        #
#                          commands\AT command 3.2 -                          #
#                          temp\CC2530DB\..\..\..\..\..\Components\mac\includ #
#                          e\" -I "S:\zigbee\Myzigbe\version 3.0 for new      #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\AT            #
#                          commands\AT command 3.2 -                          #
#                          temp\CC2530DB\..\..\..\..\..\Components\mac\high_l #
#                          evel\" -I "S:\zigbee\Myzigbe\version 3.0 for new   #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\AT            #
#                          commands\AT command 3.2 -                          #
#                          temp\CC2530DB\..\..\..\..\..\Components\mac\low_le #
#                          vel\srf04\" -I "S:\zigbee\Myzigbe\version 3.0 for  #
#                          new ZStack-CC2530-2.5.1a\Projects\zstack\AT        #
#                          commands\AT command 3.2 -                          #
#                          temp\CC2530DB\..\..\..\..\..\Components\mac\low_le #
#                          vel\srf04\single_chip\" -I                         #
#                          "S:\zigbee\Myzigbe\version 3.0 for new             #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\AT            #
#                          commands\AT command 3.2 -                          #
#                          temp\CC2530DB\..\..\..\..\..\Components\mt\" -I    #
#                          "S:\zigbee\Myzigbe\version 3.0 for new             #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\AT            #
#                          commands\AT command 3.2 -                          #
#                          temp\CC2530DB\..\..\..\..\..\Components\osal\inclu #
#                          de\" -I "S:\zigbee\Myzigbe\version 3.0 for new     #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\AT            #
#                          commands\AT command 3.2 -                          #
#                          temp\CC2530DB\..\..\..\..\..\Components\services\s #
#                          addr\" -I "S:\zigbee\Myzigbe\version 3.0 for new   #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\AT            #
#                          commands\AT command 3.2 -                          #
#                          temp\CC2530DB\..\..\..\..\..\Components\services\s #
#                          data\" -I "S:\zigbee\Myzigbe\version 3.0 for new   #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\AT            #
#                          commands\AT command 3.2 -                          #
#                          temp\CC2530DB\..\..\..\..\..\Components\stack\af\" #
#                           -I "S:\zigbee\Myzigbe\version 3.0 for new         #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\AT            #
#                          commands\AT command 3.2 -                          #
#                          temp\CC2530DB\..\..\..\..\..\Components\stack\nwk\ #
#                          " -I "S:\zigbee\Myzigbe\version 3.0 for new        #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\AT            #
#                          commands\AT command 3.2 -                          #
#                          temp\CC2530DB\..\..\..\..\..\Components\stack\sapi #
#                          \" -I "S:\zigbee\Myzigbe\version 3.0 for new       #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\AT            #
#                          commands\AT command 3.2 -                          #
#                          temp\CC2530DB\..\..\..\..\..\Components\stack\sec\ #
#                          " -I "S:\zigbee\Myzigbe\version 3.0 for new        #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\AT            #
#                          commands\AT command 3.2 -                          #
#                          temp\CC2530DB\..\..\..\..\..\Components\stack\sys\ #
#                          " -I "S:\zigbee\Myzigbe\version 3.0 for new        #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\AT            #
#                          commands\AT command 3.2 -                          #
#                          temp\CC2530DB\..\..\..\..\..\Components\stack\zdo\ #
#                          " -I "S:\zigbee\Myzigbe\version 3.0 for new        #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\AT            #
#                          commands\AT command 3.2 -                          #
#                          temp\CC2530DB\..\..\..\..\..\Components\stack\zcl\ #
#                          " -I "S:\zigbee\Myzigbe\version 3.0 for new        #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\AT            #
#                          commands\AT command 3.2 -                          #
#                          temp\CC2530DB\..\..\..\..\..\Components\zmac\" -I  #
#                          "S:\zigbee\Myzigbe\version 3.0 for new             #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\AT            #
#                          commands\AT command 3.2 -                          #
#                          temp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\" #
#                           -Ohz --require_prototypes                         #
#    List file          =  S:\zigbee\Myzigbe\version 3.0 for new              #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\AT            #
#                          commands\AT command 3.2 -                          #
#                          temp\CC2530DB\RouterEB\List\ZMain.lst              #
#    Object file        =  S:\zigbee\Myzigbe\version 3.0 for new              #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\AT            #
#                          commands\AT command 3.2 -                          #
#                          temp\CC2530DB\RouterEB\Obj\ZMain.r51               #
#                                                                             #
#                                                                             #
###############################################################################

S:\zigbee\Myzigbe\version 3.0 for new ZStack-CC2530-2.5.1a\Projects\zstack\ZMain\TI2530DB\ZMain.c
      1          
      2          /*********************************************************************
      3           * INCLUDES
      4           */
      5          
      6          #ifndef NONWK
      7          #include "AF.h"
      8          #endif
      9          #include "hal_adc.h"

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     10          #include "hal_flash.h"
     11          #include "hal_lcd.h"
     12          #include "hal_led.h"
     13          #include "hal_drivers.h"
     14          #include "OnBoard.h"
     15          #include "OSAL.h"
     16          #include "OSAL_Nv.h"
     17          #include "ZComDef.h"
     18          #include "ZMAC.h"
     19          
     20          /*********************************************************************
     21           * LOCAL FUNCTIONS
     22           */
     23          
     24          static void zmain_ext_addr( void );
     25          #if defined ZCL_KEY_ESTABLISH
     26          static void zmain_cert_init( void );
     27          #endif
     28          static void zmain_dev_info( void );
     29          static void zmain_vdd_check( void );
     30          
     31          #ifdef LCD_SUPPORTED
     32          static void zmain_lcd_init( void );
     33          #endif
     34          
     35          /*********************************************************************
     36           * @fn      main
     37           * @brief   First function called after startup.
     38           * @return  don't care
     39           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     40          int main( void )
   \                     main:
     41          {
   \   000000                ; Auto size: 0
     42            // Turn off interrupts
     43            osal_int_disable( INTS_ALL );
   \   000000                ; Setup parameters for call to function osal_int_disable
   \   000000   79FF         MOV     R1,#-0x1
   \   000002   12....       LCALL   ??osal_int_disable?relay
     44          
     45            // Initialization for board related stuff such as LEDs
     46            HAL_BOARD_INIT();
   \   000005   53BEFB       ANL     0xbe,#0xfb
   \                     ??main_0:
   \   000008   E59D         MOV     A,0x9d
   \   00000A   A2E6         MOV     C,0xE0 /* A   */.6
   \   00000C   50FA         JNC     ??main_0
   \   00000E   00           NOP
   \   00000F   78F8         MOV     R0,#-0x8
   \   000011   7901         MOV     R1,#0x1
   \                     ??main_1:
   \   000013   00           NOP
   \   000014   E8           MOV     A,R0
   \   000015   24FF         ADD     A,#-0x1
   \   000017   18           DEC     R0
   \   000018   E9           MOV     A,R1
   \   000019   34FF         ADDC    A,#-0x1
   \   00001B   F9           MOV     R1,A
   \   00001C   E8           MOV     A,R0
   \   00001D   49           ORL     A,R1
   \   00001E   70F3         JNZ     ??main_1
   \   000020   75C600       MOV     0xc6,#0x0
   \                     ??main_2:
   \   000023   E59E         MOV     A,0x9e
   \   000025   70FC         JNZ     ??main_2
   \   000027   43BE04       ORL     0xbe,#0x4
   \   00002A   906270       MOV     DPTR,#0x6270
   \   00002D   7408         MOV     A,#0x8
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   D297         SETB    0x90.7
   \   000032   43FE80       ORL     0xfe,#0x80
   \   000035   D290         SETB    0x90.0
   \   000037   43FE01       ORL     0xfe,#0x1
   \   00003A   D294         SETB    0x90.4
   \   00003C   43FE10       ORL     0xfe,#0x10
   \   00003F   438F08       ORL     0x8f,#0x8
     47          
     48            // Make sure supply voltage is high enough to run
     49            zmain_vdd_check();
   \   000042   7E10         MOV     R6,#0x10
   \                     ??main_3:
   \   000044                ; Setup parameters for call to function HalAdcCheckVdd
   \   000044   794A         MOV     R1,#0x4a
   \   000046   12....       LCALL   ??HalAdcCheckVdd?relay
   \   000049   E9           MOV     A,R1
   \   00004A   60F8         JZ      ??main_3
   \   00004C   1E           DEC     R6
   \   00004D   EE           MOV     A,R6
   \   00004E   70F4         JNZ     ??main_3
     50          
     51            // Initialize board I/O
     52            InitBoard( OB_COLD );
   \   000050                ; Setup parameters for call to function InitBoard
   \   000050   7900         MOV     R1,#0x0
   \   000052   12....       LCALL   ??InitBoard?relay
     53          
     54            // Initialze HAL drivers
     55            HalDriverInit();
   \   000055                ; Setup parameters for call to function HalDriverInit
   \   000055   12....       LCALL   ??HalDriverInit?relay
     56          
     57            // Initialize NV System
     58            osal_nv_init( NULL );
   \   000058                ; Setup parameters for call to function osal_nv_init
   \   000058   7A00         MOV     R2,#0x0
   \   00005A   7B00         MOV     R3,#0x0
   \   00005C   12....       LCALL   ??osal_nv_init?relay
     59          
     60            // Initialize the MAC
     61            ZMacInit();
   \   00005F                ; Setup parameters for call to function ZMacInit
   \   00005F   12....       LCALL   ??ZMacInit?relay
     62          
     63            // Determine the extended address
     64            zmain_ext_addr();
   \   000062                ; Setup parameters for call to function zmain_ext_addr
   \   000062   12....       LCALL   ??zmain_ext_addr?relay
     65          
     66          #if defined ZCL_KEY_ESTABLISH
     67            // Initialize the Certicom certificate information.
     68            zmain_cert_init();
     69          #endif
     70          
     71            // Initialize basic NV items
     72            zgInit();
   \   000065                ; Setup parameters for call to function zgInit
   \   000065   12....       LCALL   ??zgInit?relay
     73          
     74          #ifndef NONWK
     75            // Since the AF isn't a task, call it's initialization routine
     76            afInit();
     77          #endif
     78          
     79            // Initialize the operating system
     80            osal_init_system();
   \   000068                ; Setup parameters for call to function osal_init_system
   \   000068   12....       LCALL   ??osal_init_system?relay
     81          
     82            // Allow interrupts
     83            osal_int_enable( INTS_ALL );
   \   00006B                ; Setup parameters for call to function osal_int_enable
   \   00006B   79FF         MOV     R1,#-0x1
   \   00006D   12....       LCALL   ??osal_int_enable?relay
     84          
     85            // Final board initialization
     86            InitBoard( OB_READY );
   \   000070                ; Setup parameters for call to function InitBoard
   \   000070   7902         MOV     R1,#0x2
   \   000072   12....       LCALL   ??InitBoard?relay
     87          
     88            // Display information about this device
     89            zmain_dev_info();
     90          
     91            /* Display the device info on the LCD */
     92          #ifdef LCD_SUPPORTED
     93            zmain_lcd_init();
     94          #endif
     95          
     96          #ifdef WDT_IN_PM1
     97            /* If WDT is used, this is a good place to enable it. */
     98            WatchDogEnable( WDTIMX );
     99          #endif
    100          
    101            osal_start_system(); // No Return from here
   \   000075                ; Setup parameters for call to function osal_start_system
   \   000075   12....       LCALL   ??osal_start_system?relay
    102          
    103            return 0;  // Shouldn't get here.
   \   000078   7A00         MOV     R2,#0x0
   \   00007A   7B00         MOV     R3,#0x0
   \   00007C   02....       LJMP    ?BRET
   \   00007F                REQUIRE SLEEPCMD
   \   00007F                REQUIRE SLEEPSTA
   \   00007F                REQUIRE CLKCONCMD
   \   00007F                REQUIRE CLKCONSTA
   \   00007F                REQUIRE _A_P1
   \   00007F                REQUIRE P1DIR
   \   00007F                REQUIRE P0INP
    104          } // main()
    105          
    106          /*********************************************************************
    107           * @fn      zmain_vdd_check
    108           * @brief   Check if the Vdd is OK to run the processor.
    109           * @return  Return if Vdd is ok; otherwise, flash LED, then reset
    110           *********************************************************************/
    111          static void zmain_vdd_check( void )
    112          {
    113            uint8 cnt = 16;
    114            
    115            do {
    116              while (!HalAdcCheckVdd(VDD_MIN_RUN));
    117            } while (--cnt);
    118          }
    119          
    120          /**************************************************************************************************
    121           * @fn          zmain_ext_addr
    122           *
    123           * @brief       Execute a prioritized search for a valid extended address and write the results
    124           *              into the OSAL NV system for use by the system. Temporary address not saved to NV.
    125           *
    126           * input parameters
    127           *
    128           * None.
    129           *
    130           * output parameters
    131           *
    132           * None.
    133           *
    134           * @return      None.
    135           **************************************************************************************************
    136           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    137          static void zmain_ext_addr(void)
   \                     zmain_ext_addr:
    138          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    139            uint8 nullAddr[Z_EXTADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant {255, 255, 255, 255, 255, 255, 255,` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant {255, 255, 255, 255, 255, 255, 255,` & 0xff
   \   00001A   7408         MOV     A,#0x8
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    140            uint8 writeNV = TRUE;
    141          
    142            // First check whether a non-erased extended address exists in the OSAL NV.
    143            if ((SUCCESS != osal_nv_item_init(ZCD_NV_EXTADDR, Z_EXTADDR_LEN, NULL))  ||
    144                (SUCCESS != osal_nv_read(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress)) ||
    145                (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN)))
   \   00001F                ; Setup parameters for call to function osal_nv_item_init
   \   00001F   F5..         MOV     ?V0 + 0,A
   \   000021   F5..         MOV     ?V0 + 1,A
   \   000023   78..         MOV     R0,#?V0 + 0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   7C08         MOV     R4,#0x8
   \   00002A   7D00         MOV     R5,#0x0
   \   00002C   7A01         MOV     R2,#0x1
   \   00002E   7B00         MOV     R3,#0x0
   \   000030   12....       LCALL   ??osal_nv_item_init?relay
   \   000033   7402         MOV     A,#0x2
   \   000035   12....       LCALL   ?DEALLOC_XSTACK8
   \   000038   E9           MOV     A,R1
   \   000039   7057         JNZ     ??zmain_ext_addr_0
   \   00003B                ; Setup parameters for call to function osal_nv_read
   \   00003B   75....       MOV     ?V0 + 0,#aExtendedAddress & 0xff
   \   00003E   75....       MOV     ?V0 + 1,#(aExtendedAddress >> 8) & 0xff
   \   000041   78..         MOV     R0,#?V0 + 0
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   75..08       MOV     ?V0 + 0,#0x8
   \   000049   75..00       MOV     ?V0 + 1,#0x0
   \   00004C   78..         MOV     R0,#?V0 + 0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000051   7C00         MOV     R4,#0x0
   \   000053   7D00         MOV     R5,#0x0
   \   000055   7A01         MOV     R2,#0x1
   \   000057   7B00         MOV     R3,#0x0
   \   000059   12....       LCALL   ??osal_nv_read?relay
   \   00005C   7404         MOV     A,#0x4
   \   00005E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000061   E9           MOV     A,R1
   \   000062   702E         JNZ     ??zmain_ext_addr_0
   \   000064                ; Setup parameters for call to function osal_memcmp
   \   000064   85..82       MOV     DPL,?XSP + 0
   \   000067   85..83       MOV     DPH,?XSP + 1
   \   00006A   A982         MOV     R1,DPL
   \   00006C   AA83         MOV     R2,DPH
   \   00006E   89..         MOV     ?V0 + 0,R1
   \   000070   8A..         MOV     ?V0 + 1,R2
   \   000072   75..00       MOV     ?V0 + 2,#0x0
   \   000075   78..         MOV     R0,#?V0 + 0
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00007A   7C08         MOV     R4,#0x8
   \   00007C   7D00         MOV     R5,#0x0
   \   00007E   79..         MOV     R1,#aExtendedAddress & 0xff
   \   000080   7A..         MOV     R2,#(aExtendedAddress >> 8) & 0xff
   \   000082   7B00         MOV     R3,#0x0
   \   000084   12....       LCALL   ??osal_memcmp?relay
   \   000087   7403         MOV     A,#0x3
   \   000089   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008C   E9           MOV     A,R1
   \   00008D   7003         JNZ     $+5
   \   00008F   02....       LJMP    ??zmain_ext_addr_1 & 0xFFFF
    146            {
    147              // Attempt to read the extended address from the location on the lock bits page
    148              // where the programming tools know to reserve it.
    149              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IEEE_OSET, aExtendedAddress, Z_EXTADDR_LEN);
   \                     ??zmain_ext_addr_0:
   \   000092                ; Setup parameters for call to function HalFlashRead
   \   000092   75..08       MOV     ?V0 + 0,#0x8
   \   000095   75..00       MOV     ?V0 + 1,#0x0
   \   000098   78..         MOV     R0,#?V0 + 0
   \   00009A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009D   7C..         MOV     R4,#aExtendedAddress & 0xff
   \   00009F   7D..         MOV     R5,#(aExtendedAddress >> 8) & 0xff
   \   0000A1   7AE8         MOV     R2,#-0x18
   \   0000A3   7B07         MOV     R3,#0x7
   \   0000A5   797F         MOV     R1,#0x7f
   \   0000A7   12....       LCALL   ??HalFlashRead?relay
   \   0000AA   7402         MOV     A,#0x2
   \   0000AC   12....       LCALL   ?DEALLOC_XSTACK8
    150          
    151              if (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN))
   \   0000AF                ; Setup parameters for call to function osal_memcmp
   \   0000AF   85..82       MOV     DPL,?XSP + 0
   \   0000B2   85..83       MOV     DPH,?XSP + 1
   \   0000B5   A982         MOV     R1,DPL
   \   0000B7   AA83         MOV     R2,DPH
   \   0000B9   89..         MOV     ?V0 + 0,R1
   \   0000BB   8A..         MOV     ?V0 + 1,R2
   \   0000BD   75..00       MOV     ?V0 + 2,#0x0
   \   0000C0   78..         MOV     R0,#?V0 + 0
   \   0000C2   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C5   7C08         MOV     R4,#0x8
   \   0000C7   7D00         MOV     R5,#0x0
   \   0000C9   79..         MOV     R1,#aExtendedAddress & 0xff
   \   0000CB   7A..         MOV     R2,#(aExtendedAddress >> 8) & 0xff
   \   0000CD   7B00         MOV     R3,#0x0
   \   0000CF   12....       LCALL   ??osal_memcmp?relay
   \   0000D2   7403         MOV     A,#0x3
   \   0000D4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D7   E9           MOV     A,R1
   \   0000D8   606A         JZ      ??zmain_ext_addr_2
    152              {
    153                // Attempt to read the extended address from the designated location in the Info Page.
    154                if (!osal_memcmp((uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), nullAddr, Z_EXTADDR_LEN))
   \   0000DA                ; Setup parameters for call to function osal_memcmp
   \   0000DA   78..         MOV     R0,#?V0 + 0
   \   0000DC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000DF   7C08         MOV     R4,#0x8
   \   0000E1   7D00         MOV     R5,#0x0
   \   0000E3   790C         MOV     R1,#0xc
   \   0000E5   7A78         MOV     R2,#0x78
   \   0000E7   7B00         MOV     R3,#0x0
   \   0000E9   12....       LCALL   ??osal_memcmp?relay
   \   0000EC   7403         MOV     A,#0x3
   \   0000EE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F1   E9           MOV     A,R1
   \   0000F2   701D         JNZ     ??zmain_ext_addr_3
    155                {
    156                  osal_memcpy(aExtendedAddress, (uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), Z_EXTADDR_LEN);
   \   0000F4                ; Setup parameters for call to function osal_memcpy
   \   0000F4   75..0C       MOV     ?V0 + 0,#0xc
   \   0000F7   75..78       MOV     ?V0 + 1,#0x78
   \   0000FA   78..         MOV     R0,#?V0 + 0
   \   0000FC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000FF   7C08         MOV     R4,#0x8
   \   000101   7D00         MOV     R5,#0x0
   \   000103   7A..         MOV     R2,#aExtendedAddress & 0xff
   \   000105   7B..         MOV     R3,#(aExtendedAddress >> 8) & 0xff
   \   000107   12....       LCALL   ??osal_memcpy?relay
   \   00010A   7403         MOV     A,#0x3
   \   00010C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010F   8033         SJMP    ??zmain_ext_addr_2
    157                }
    158                else  // No valid extended address was found.
    159                {
    160                  uint8 idx;
    161                  
    162          #if !defined ( NV_RESTORE )
    163                  writeNV = FALSE;  // Make this a temporary IEEE address
    164          #endif
    165          
    166                  /* Attempt to create a sufficiently random extended address for expediency.
    167                   * Note: this is only valid/legal in a test environment and
    168                   *       must never be used for a commercial product.
    169                   */
    170                  for (idx = 0; idx < (Z_EXTADDR_LEN - 2);)
   \                     ??zmain_ext_addr_3:
   \   000111   7E00         MOV     R6,#0x0
    171                  {
    172                    uint16 randy = osal_rand();
   \                     ??zmain_ext_addr_4:
   \   000113                ; Setup parameters for call to function osal_rand
   \   000113   12....       LCALL   ??osal_rand?relay
   \   000116   8A..         MOV     ?V0 + 0,R2
   \   000118   A8..         MOV     R0,?V0 + 0
    173                    aExtendedAddress[idx++] = LO_UINT16(randy);
   \   00011A   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00011D   E8           MOV     A,R0
   \   00011E   F0           MOVX    @DPTR,A
   \   00011F   0E           INC     R6
    174                    aExtendedAddress[idx++] = HI_UINT16(randy);
   \   000120   12....       LCALL   ?Subroutine0 & 0xFFFF
    175                  }
   \                     ??CrossCallReturnLabel_1:
   \   000123   EB           MOV     A,R3
   \   000124   F0           MOVX    @DPTR,A
   \   000125   0E           INC     R6
   \   000126   EE           MOV     A,R6
   \   000127   C3           CLR     C
   \   000128   9406         SUBB    A,#0x6
   \   00012A   40E7         JC      ??zmain_ext_addr_4
    176                  // Next-to-MSB identifies ZigBee devicetype.
    177          #if ZG_BUILD_COORDINATOR_TYPE && !ZG_BUILD_JOINING_TYPE
    178                  aExtendedAddress[idx++] = 0x10;
    179          #elif ZG_BUILD_RTRONLY_TYPE
    180                  aExtendedAddress[idx++] = 0x20;
   \   00012C   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00012F   7420         MOV     A,#0x20
   \   000131   F0           MOVX    @DPTR,A
    181          #else
    182                  aExtendedAddress[idx++] = 0x30;
    183          #endif
    184                  // MSB has historical signficance.
    185                  aExtendedAddress[idx] = 0xF8;
   \   000132   7401         MOV     A,#0x1
   \   000134   2E           ADD     A,R6
   \   000135   F8           MOV     R0,A
   \   000136   74..         MOV     A,#aExtendedAddress & 0xff
   \   000138   28           ADD     A,R0
   \   000139   F582         MOV     DPL,A
   \   00013B   74..         MOV     A,#(aExtendedAddress >> 8) & 0xff
   \   00013D   3400         ADDC    A,#0x0
   \   00013F   F583         MOV     DPH,A
   \   000141   74F8         MOV     A,#-0x8
   \   000143   F0           MOVX    @DPTR,A
    186                }
    187              }
    188          
    189              if (writeNV)
    190              {
    191                (void)osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress);
   \                     ??zmain_ext_addr_2:
   \   000144                ; Setup parameters for call to function osal_nv_write
   \   000144   75....       MOV     ?V0 + 0,#aExtendedAddress & 0xff
   \   000147   75....       MOV     ?V0 + 1,#(aExtendedAddress >> 8) & 0xff
   \   00014A   78..         MOV     R0,#?V0 + 0
   \   00014C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014F   75..08       MOV     ?V0 + 0,#0x8
   \   000152   75..00       MOV     ?V0 + 1,#0x0
   \   000155   78..         MOV     R0,#?V0 + 0
   \   000157   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015A   7C00         MOV     R4,#0x0
   \   00015C   7D00         MOV     R5,#0x0
   \   00015E   7A01         MOV     R2,#0x1
   \   000160   7B00         MOV     R3,#0x0
   \   000162   12....       LCALL   ??osal_nv_write?relay
   \   000165   7404         MOV     A,#0x4
   \   000167   12....       LCALL   ?DEALLOC_XSTACK8
    192              }
    193            }
    194          
    195            // Set the MAC PIB extended address according to results from above.
    196            (void)ZMacSetReq(MAC_EXTENDED_ADDRESS, aExtendedAddress);
   \                     ??zmain_ext_addr_1:
   \   00016A                ; Setup parameters for call to function ZMacSetReq
   \   00016A   7A..         MOV     R2,#aExtendedAddress & 0xff
   \   00016C   7B..         MOV     R3,#(aExtendedAddress >> 8) & 0xff
   \   00016E   79E2         MOV     R1,#-0x1e
   \   000170   12....       LCALL   ??ZMacSetReq?relay
    197          }
   \   000173   7408         MOV     A,#0x8
   \   000175   12....       LCALL   ?DEALLOC_XSTACK8
   \   000178   7F03         MOV     R7,#0x3
   \   00017A   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   8E..         MOV     ?V0 + 0,R6
   \   000002   74..         MOV     A,#aExtendedAddress & 0xff
   \   000004   25..         ADD     A,?V0 + 0
   \   000006   F582         MOV     DPL,A
   \   000008   74..         MOV     A,#(aExtendedAddress >> 8) & 0xff
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   F583         MOV     DPH,A
   \   00000E   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??main?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    main

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zmain_ext_addr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_ext_addr

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
    198          
    199          #if defined ZCL_KEY_ESTABLISH
    200          /**************************************************************************************************
    201           * @fn          zmain_cert_init
    202           *
    203           * @brief       Initialize the Certicom certificate information.
    204           *
    205           * input parameters
    206           *
    207           * None.
    208           *
    209           * output parameters
    210           *
    211           * None.
    212           *
    213           * @return      None.
    214           **************************************************************************************************
    215           */
    216          static void zmain_cert_init(void)
    217          {
    218            uint8 certData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN];
    219            uint8 nullData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN] = {
    220              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    221              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    222              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    223              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    224              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    225              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
    226            };
    227          
    228            (void)osal_nv_item_init(ZCD_NV_IMPLICIT_CERTIFICATE, ZCL_KE_IMPLICIT_CERTIFICATE_LEN, NULL);
    229            (void)osal_nv_item_init(ZCD_NV_DEVICE_PRIVATE_KEY, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, NULL);
    230          
    231            // First check whether non-null certificate data exists in the OSAL NV. To save on code space,
    232            // just use the ZCD_NV_CA_PUBLIC_KEY as the bellwether for all three.
    233            if ((SUCCESS != osal_nv_item_init(ZCD_NV_CA_PUBLIC_KEY, ZCL_KE_CA_PUBLIC_KEY_LEN, NULL))    ||
    234                (SUCCESS != osal_nv_read(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData))  ||
    235                (osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN)))
    236            {
    237              // Attempt to read the certificate data from its corresponding location on the lock bits page.
    238              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_CA_PUBLIC_KEY_OSET, certData,
    239                                                   ZCL_KE_CA_PUBLIC_KEY_LEN);
    240              // If the certificate data is not NULL, use it to update the corresponding NV items.
    241              if (!osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN))
    242              {
    243                (void)osal_nv_write(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData);
    244                HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IMPLICIT_CERT_OSET, certData,
    245                                                     ZCL_KE_IMPLICIT_CERTIFICATE_LEN);
    246                (void)osal_nv_write(ZCD_NV_IMPLICIT_CERTIFICATE, 0,
    247                                    ZCL_KE_IMPLICIT_CERTIFICATE_LEN, certData);
    248                HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_DEV_PRIVATE_KEY_OSET, certData,
    249                                                  ZCL_KE_DEVICE_PRIVATE_KEY_LEN);
    250                (void)osal_nv_write(ZCD_NV_DEVICE_PRIVATE_KEY, 0, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, certData);
    251              }
    252            }
    253          }
    254          #endif
    255          
    256          /**************************************************************************************************
    257           * @fn          zmain_dev_info
    258           *
    259           * @brief       This displays the IEEE (MSB to LSB) on the LCD.
    260           *
    261           * input parameters
    262           *
    263           * None.
    264           *
    265           * output parameters
    266           *
    267           * None.
    268           *
    269           * @return      None.
    270           **************************************************************************************************
    271           */
    272          static void zmain_dev_info(void)
    273          {
    274          #ifdef LCD_SUPPORTED
    275            uint8 i;
    276            uint8 *xad;
    277            uint8 lcd_buf[Z_EXTADDR_LEN*2+1];
    278          
    279            // Display the extended address.
    280            xad = aExtendedAddress + Z_EXTADDR_LEN - 1;
    281          
    282            for (i = 0; i < Z_EXTADDR_LEN*2; xad--)
    283            {
    284              uint8 ch;
    285              ch = (*xad >> 4) & 0x0F;
    286              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
    287              ch = *xad & 0x0F;
    288              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
    289            }
    290            lcd_buf[Z_EXTADDR_LEN*2] = '\0';
    291            HalLcdWriteString( "IEEE: ", HAL_LCD_LINE_1 );
    292            HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_2 );
    293          #endif
    294          }
    295          
    296          #ifdef LCD_SUPPORTED
    297          /*********************************************************************
    298           * @fn      zmain_lcd_init
    299           * @brief   Initialize LCD at start up.
    300           * @return  none
    301           *********************************************************************/
    302          static void zmain_lcd_init ( void )
    303          {
    304          #ifdef SERIAL_DEBUG_SUPPORTED
    305            {
    306              HalLcdWriteString( "TexasInstruments", HAL_LCD_LINE_1 );
    307          
    308          #if defined( MT_MAC_FUNC )
    309          #if defined( ZDO_COORDINATOR )
    310                HalLcdWriteString( "MAC-MT Coord", HAL_LCD_LINE_2 );
    311          #else
    312                HalLcdWriteString( "MAC-MT Device", HAL_LCD_LINE_2 );
    313          #endif // ZDO
    314          #elif defined( MT_NWK_FUNC )
    315          #if defined( ZDO_COORDINATOR )
    316                HalLcdWriteString( "NWK Coordinator", HAL_LCD_LINE_2 );
    317          #else
    318                HalLcdWriteString( "NWK Device", HAL_LCD_LINE_2 );
    319          #endif // ZDO
    320          #endif // MT_FUNC
    321            }
    322          #endif // SERIAL_DEBUG_SUPPORTED
    323          }
    324          #endif
    325          
    326          /*********************************************************************
    327          *********************************************************************/

   Maximum stack usage in bytes:

     Function               ISTACK PSTACK XSTACK
     --------               ------ ------ ------
     main                       0      0      0
       -> osal_int_disable      0      0      0
       -> HalAdcCheckVdd        0      0      0
       -> InitBoard             0      0      0
       -> HalDriverInit         0      0      0
       -> osal_nv_init          0      0      0
       -> ZMacInit              0      0      0
       -> zmain_ext_addr        0      0      0
       -> zgInit                0      0      0
       -> osal_init_system      0      0      0
       -> osal_int_enable       0      0      0
       -> InitBoard             0      0      0
       -> osal_start_system     0      0      0
     zmain_ext_addr             2      0     23
       -> osal_nv_item_init     0      0     42
       -> osal_nv_read          0      0     46
       -> osal_memcmp           0      0     44
       -> HalFlashRead          0      0     42
       -> osal_memcmp           0      0     44
       -> osal_memcmp           0      0     44
       -> osal_memcpy           0      0     44
       -> osal_rand             0      0     38
       -> osal_nv_write         0      0     46
       -> ZMacSetReq            0      0     38


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     P0INP                                             1
     _A_P1                                             1
     SLEEPSTA                                          1
     CLKCONSTA                                         1
     SLEEPCMD                                          1
     CLKCONCMD                                         1
     P1DIR                                             1
     main                                            127
     zmain_ext_addr                                  381
     ?Subroutine0                                     15
     ??main?relay                                      6
     ??zmain_ext_addr?relay                            6
     ?<Constant {255, 255, 255, 255, 255, 255, 255,    8

 
 523 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
   7 bytes in segment SFR_AN
   8 bytes in segment XDATA_ROM_C
 
 535 bytes of CODE  memory
   8 bytes of CONST memory
   0 bytes of DATA  memory (+ 7 bytes shared)

Errors: none
Warnings: none
