###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         26/Aug/2015  19:20:58 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  S:\zigbee\Myzigbe\version 3.0 for                  #
#                          test\Projects\zstack\AT commands\AT command 3.2    #
#                          -Body Sensor\Source\hal\hal_led.c                  #
#    Command line       =  -f "S:\zigbee\Myzigbe\version 3.0 for              #
#                          test\Projects\zstack\AT commands\AT command 3.2    #
#                          -Body Sensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wE #
#                          ndev.cfg" (-DCPU32MHZ -DROOT=__near_func           #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f "S:\zigbee\Myzigbe\version  #
#                          3.0 for test\Projects\zstack\AT commands\AT        #
#                          command 3.2 -Body Sensor\CC2530DB\..\..\..\Tools\C #
#                          C2530DB\f8wConfig.cfg" (-DZIGBEEPRO -DSECURE=0     #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "S:\zigbee\Myzigbe\version  #
#                          3.0 for test\Projects\zstack\AT commands\AT        #
#                          command 3.2 -Body Sensor\Source\hal\hal_led.c" -D  #
#                          ZIGBEEPRO -D NWK_AUTO_POLL -D HAL_UART=TRUE -D     #
#                          HOLD_AUTO_START -D NV_RESTORE -D REFLECTOR -D      #
#                          HAL_UART_ISR=1 -D HAL_UART_DMA=0 -D                #
#                          xHAL_UART_ISR_TX_MAX=200 -D xPOWER_SAVING -D       #
#                          ZCL_READ -D ZCL_WRITE -D ZCL_IDENTIFY -D           #
#                          ZCL_ON_OFF -D ZCL_DISCOVER -D xZTOOL_P1 -D         #
#                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D        #
#                          xLCD_SUPPORTED=DEBUG -D xMT_UART_DEFAULT_OVERFLOW= #
#                          FALSE -lC "S:\zigbee\Myzigbe\version 3.0 for       #
#                          test\Projects\zstack\AT commands\AT command 3.2    #
#                          -Body Sensor\CC2530DB\EndDeviceEB\List\" -lA       #
#                          "S:\zigbee\Myzigbe\version 3.0 for                 #
#                          test\Projects\zstack\AT commands\AT command 3.2    #
#                          -Body Sensor\CC2530DB\EndDeviceEB\List\"           #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "S:\zigbee\Myzigbe\version 3.0 for                 #
#                          test\Projects\zstack\AT commands\AT command 3.2    #
#                          -Body Sensor\CC2530DB\EndDeviceEB\Obj\" -e         #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "S:\zigbee\Myzigbe\version 3.0 for              #
#                          test\Projects\zstack\AT commands\AT command 3.2    #
#                          -Body Sensor\CC2530DB\" -I                         #
#                          "S:\zigbee\Myzigbe\version 3.0 for                 #
#                          test\Projects\zstack\AT commands\AT command 3.2    #
#                          -Body Sensor\CC2530DB\..\Source\" -I               #
#                          "S:\zigbee\Myzigbe\version 3.0 for                 #
#                          test\Projects\zstack\AT commands\AT command 3.2    #
#                          -Body Sensor\CC2530DB\..\Source\hal\" -I           #
#                          "S:\zigbee\Myzigbe\version 3.0 for                 #
#                          test\Projects\zstack\AT commands\AT command 3.2    #
#                          -Body Sensor\CC2530DB\..\Source\Modified\" -I      #
#                          "S:\zigbee\Myzigbe\version 3.0 for                 #
#                          test\Projects\zstack\AT commands\AT command 3.2    #
#                          -Body Sensor\CC2530DB\..\..\..\ZMain\TI2530DB\"    #
#                          -I "S:\zigbee\Myzigbe\version 3.0 for              #
#                          test\Projects\zstack\AT commands\AT command 3.2    #
#                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\ha #
#                          l\include\" -I "S:\zigbee\Myzigbe\version 3.0 for  #
#                          test\Projects\zstack\AT commands\AT command 3.2    #
#                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\ha #
#                          l\target\CC2530EB\" -I "S:\zigbee\Myzigbe\version  #
#                          3.0 for test\Projects\zstack\AT commands\AT        #
#                          command 3.2 -Body Sensor\CC2530DB\..\..\..\..\..\C #
#                          omponents\mac\include\" -I                         #
#                          "S:\zigbee\Myzigbe\version 3.0 for                 #
#                          test\Projects\zstack\AT commands\AT command 3.2    #
#                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\ma #
#                          c\high_level\" -I "S:\zigbee\Myzigbe\version 3.0   #
#                          for test\Projects\zstack\AT commands\AT command    #
#                          3.2 -Body Sensor\CC2530DB\..\..\..\..\..\Component #
#                          s\mac\low_level\srf04\" -I                         #
#                          "S:\zigbee\Myzigbe\version 3.0 for                 #
#                          test\Projects\zstack\AT commands\AT command 3.2    #
#                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\ma #
#                          c\low_level\srf04\single_chip\" -I                 #
#                          "S:\zigbee\Myzigbe\version 3.0 for                 #
#                          test\Projects\zstack\AT commands\AT command 3.2    #
#                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\mt #
#                          \" -I "S:\zigbee\Myzigbe\version 3.0 for           #
#                          test\Projects\zstack\AT commands\AT command 3.2    #
#                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\os #
#                          al\include\" -I "S:\zigbee\Myzigbe\version 3.0     #
#                          for test\Projects\zstack\AT commands\AT command    #
#                          3.2 -Body Sensor\CC2530DB\..\..\..\..\..\Component #
#                          s\services\saddr\" -I "S:\zigbee\Myzigbe\version   #
#                          3.0 for test\Projects\zstack\AT commands\AT        #
#                          command 3.2 -Body Sensor\CC2530DB\..\..\..\..\..\C #
#                          omponents\services\sdata\" -I                      #
#                          "S:\zigbee\Myzigbe\version 3.0 for                 #
#                          test\Projects\zstack\AT commands\AT command 3.2    #
#                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\st #
#                          ack\af\" -I "S:\zigbee\Myzigbe\version 3.0 for     #
#                          test\Projects\zstack\AT commands\AT command 3.2    #
#                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\st #
#                          ack\nwk\" -I "S:\zigbee\Myzigbe\version 3.0 for    #
#                          test\Projects\zstack\AT commands\AT command 3.2    #
#                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\st #
#                          ack\sapi\" -I "S:\zigbee\Myzigbe\version 3.0 for   #
#                          test\Projects\zstack\AT commands\AT command 3.2    #
#                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\st #
#                          ack\sec\" -I "S:\zigbee\Myzigbe\version 3.0 for    #
#                          test\Projects\zstack\AT commands\AT command 3.2    #
#                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\st #
#                          ack\sys\" -I "S:\zigbee\Myzigbe\version 3.0 for    #
#                          test\Projects\zstack\AT commands\AT command 3.2    #
#                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\st #
#                          ack\zdo\" -I "S:\zigbee\Myzigbe\version 3.0 for    #
#                          test\Projects\zstack\AT commands\AT command 3.2    #
#                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\st #
#                          ack\zcl\" -I "S:\zigbee\Myzigbe\version 3.0 for    #
#                          test\Projects\zstack\AT commands\AT command 3.2    #
#                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\zm #
#                          ac\" -I "S:\zigbee\Myzigbe\version 3.0 for         #
#                          test\Projects\zstack\AT commands\AT command 3.2    #
#                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\zm #
#                          ac\f8w\" -Ohz --require_prototypes                 #
#    List file          =  S:\zigbee\Myzigbe\version 3.0 for                  #
#                          test\Projects\zstack\AT commands\AT command 3.2    #
#                          -Body Sensor\CC2530DB\EndDeviceEB\List\hal_led.lst #
#    Object file        =  S:\zigbee\Myzigbe\version 3.0 for                  #
#                          test\Projects\zstack\AT commands\AT command 3.2    #
#                          -Body Sensor\CC2530DB\EndDeviceEB\Obj\hal_led.r51  #
#                                                                             #
#                                                                             #
###############################################################################

S:\zigbee\Myzigbe\version 3.0 for test\Projects\zstack\AT commands\AT command 3.2 -Body Sensor\Source\hal\hal_led.c
      1          
      2          /***************************************************************************************************
      3           *                                             INCLUDES
      4           ***************************************************************************************************/
      5          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1
      6          #include "hal_defs.h"
      7          #include "hal_types.h"
      8          #include "hal_drivers.h"
      9          #include "hal_led.h"
     10          #include "osal.h"
     11          #include "hal_board.h"
     12          
     13          /***************************************************************************************************
     14           *                                             CONSTANTS
     15           ***************************************************************************************************/
     16          
     17          /***************************************************************************************************
     18           *                                              MACROS
     19           ***************************************************************************************************/
     20          
     21          /***************************************************************************************************
     22           *                                              TYPEDEFS
     23           ***************************************************************************************************/
     24          /* LED control structure */
     25          typedef struct {
     26            uint8 mode;       /* Operation mode */
     27            uint8 todo;       /* Blink cycles left */
     28            uint8 onPct;      /* On cycle percentage */
     29            uint16 time;      /* On/off cycle time (msec) */
     30            uint32 next;      /* Time for next change */
     31          } HalLedControl_t;
     32          
     33          typedef struct
     34          {
     35            HalLedControl_t HalLedControlTable[HAL_LED_DEFAULT_MAX_LEDS];
     36            uint8           sleepActive;
     37          } HalLedStatus_t;
     38          
     39          
     40          /***************************************************************************************************
     41           *                                           GLOBAL VARIABLES
     42           ***************************************************************************************************/
     43          
     44          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     45          static uint8 HalLedState;              // LED state at last set/clr/blink update
   \                     HalLedState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     46          
     47          #if HAL_LED == TRUE

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     48          static uint8 HalSleepLedState;         // LED state at last set/clr/blink update
   \                     HalSleepLedState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     49          static uint8 preBlinkState;            // Original State before going to blink mode
   \                     preBlinkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     50                                                 // bit 0, 1, 2, 3 represent led 0, 1, 2, 3
     51          #endif
     52          
     53          #ifdef BLINK_LEDS

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     54            static HalLedStatus_t HalLedStatusControl;
   \                     HalLedStatusControl:
   \   000000                DS 37
   \   000025                REQUIRE __INIT_XDATA_Z
     55          #endif
     56          
     57          /***************************************************************************************************
     58           *                                            LOCAL FUNCTION
     59           ***************************************************************************************************/
     60          #if (HAL_LED == TRUE)
     61          void HalLedUpdate (void);
     62          void HalLedOnOff (uint8 leds, uint8 mode);
     63          #endif /* HAL_LED */
     64          
     65          /***************************************************************************************************
     66           *                                            FUNCTIONS - API
     67           ***************************************************************************************************/
     68          
     69          /***************************************************************************************************
     70           * @fn      HalLedInit
     71           *
     72           * @brief   Initialize LED Service
     73           *
     74           * @param   init - pointer to void that contains the initialized value
     75           *
     76           * @return  None
     77           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     78          void HalLedInit (void)
   \                     HalLedInit:
     79          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     80          #if (HAL_LED == TRUE)
     81            /* Initialize all LEDs to OFF */
     82            HalLedSet (HAL_LED_ALL, HAL_LED_MODE_OFF);
   \   000004                ; Setup parameters for call to function HalLedSet
   \   000004   7A00         MOV     R2,#0x0
   \   000006   790F         MOV     R1,#0xf
   \   000008   12....       LCALL   ??HalLedSet?relay
     83          #endif /* HAL_LED */
     84          #ifdef BLINK_LEDS
     85            /* Initialize sleepActive to FALSE */
     86            HalLedStatusControl.sleepActive = FALSE;
   \   00000B   02....       LJMP    ?Subroutine0 & 0xFFFF
     87          #endif
     88          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   90....       MOV     DPTR,#HalLedStatusControl + 36
   \   000003   E4           CLR     A
   \   000004                REQUIRE ??Subroutine2_0
   \   000004                ; // Fall through to label ??Subroutine2_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine2_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine3_0
   \   000001                ; // Fall through to label ??Subroutine3_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine3_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
     89          
     90          /***************************************************************************************************
     91           * @fn      HalLedSet
     92           *
     93           * @brief   Tun ON/OFF/TOGGLE given LEDs
     94           *
     95           * @param   led - bit mask value of leds to be turned ON/OFF/TOGGLE
     96           *          mode - BLINK, FLASH, TOGGLE, ON, OFF
     97           * @return  None
     98           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     99          uint8 HalLedSet (uint8 leds, uint8 mode)
   \                     HalLedSet:
    100          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   \   000007   8A..         MOV     ?V0 + 2,R2
    101          
    102          #if (defined (BLINK_LEDS)) && (HAL_LED == TRUE)
    103            uint8 led;
    104            HalLedControl_t *sts;
    105          
    106            switch (mode)
   \   000009   EA           MOV     A,R2
   \   00000A   602F         JZ      ??HalLedSet_0
   \   00000C   14           DEC     A
   \   00000D   602C         JZ      ??HalLedSet_0
   \   00000F   14           DEC     A
   \   000010   600A         JZ      ??HalLedSet_1
   \   000012   24FE         ADD     A,#-0x2
   \   000014   601B         JZ      ??HalLedSet_2
   \   000016   24FC         ADD     A,#-0x4
   \   000018   6021         JZ      ??HalLedSet_0
   \   00001A   800B         SJMP    ??HalLedSet_3
    107            {
    108              case HAL_LED_MODE_BLINK:
    109                /* Default blink, 1 time, D% duty cycle */
    110                HalLedBlink (leds, 1, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME);
   \                     ??HalLedSet_1:
   \   00001C                ; Setup parameters for call to function HalLedBlink
   \   00001C   7CE8         MOV     R4,#-0x18
   \   00001E   7D03         MOV     R5,#0x3
   \   000020   7B05         MOV     R3,#0x5
   \   000022   7A01         MOV     R2,#0x1
   \                     ??HalLedSet_4:
   \   000024   12....       LCALL   ??HalLedBlink?relay
    111                break;
    112          
    113              case HAL_LED_MODE_FLASH:
    114                /* Default flash, N times, D% duty cycle */
    115                HalLedBlink (leds, HAL_LED_DEFAULT_FLASH_COUNT, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME);
    116                break;
    117          
    118              case HAL_LED_MODE_ON:
    119              case HAL_LED_MODE_OFF:
    120              case HAL_LED_MODE_TOGGLE:
    121          
    122                led = HAL_LED_1;
    123                leds &= HAL_LED_ALL;
    124                sts = HalLedStatusControl.HalLedControlTable;
    125          
    126                while (leds)
    127                {
    128                  if (leds & led)
    129                  {
    130                    if (mode != HAL_LED_MODE_TOGGLE)
    131                    {
    132                      sts->mode = mode;  /* ON or OFF */
    133                    }
    134                    else
    135                    {
    136                      sts->mode ^= HAL_LED_MODE_ON;  /* Toggle */
    137                    }
    138                    HalLedOnOff (led, sts->mode);
    139                    leds ^= led;
    140                  }
    141                  led <<= 1;
    142                  sts++;
    143                }
    144                break;
    145          
    146              default:
    147                break;
    148            }
    149          
    150          #elif (HAL_LED == TRUE)
    151            LedOnOff(leds, mode);
    152          #else
    153            // HAL LED is disabled, suppress unused argument warnings
    154            (void) leds;
    155            (void) mode;
    156          #endif /* BLINK_LEDS && HAL_LED   */
    157          
    158            return ( HalLedState );
   \                     ??HalLedSet_3:
   \   000027   90....       MOV     DPTR,#HalLedState
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F9           MOV     R1,A
   \   00002C   7F03         MOV     R7,#0x3
   \   00002E   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??HalLedSet_2:
   \   000031                ; Setup parameters for call to function HalLedBlink
   \   000031   7CE8         MOV     R4,#-0x18
   \   000033   7D03         MOV     R5,#0x3
   \   000035   7B05         MOV     R3,#0x5
   \   000037   7A32         MOV     R2,#0x32
   \   000039   80E9         SJMP    ??HalLedSet_4
   \                     ??HalLedSet_0:
   \   00003B   75..01       MOV     ?V0 + 1,#0x1
   \   00003E   53..0F       ANL     ?V0 + 0,#0xf
   \   000041   7E..         MOV     R6,#HalLedStatusControl & 0xff
   \   000043   7F..         MOV     R7,#(HalLedStatusControl >> 8) & 0xff
   \   000045   801D         SJMP    ??HalLedSet_5
   \                     ??HalLedSet_6:
   \   000047   E0           MOVX    A,@DPTR
   \   000048   6401         XRL     A,#0x1
   \                     ??HalLedSet_7:
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B                ; Setup parameters for call to function HalLedOnOff
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   FA           MOV     R2,A
   \   00004D   A9..         MOV     R1,?V0 + 1
   \   00004F   12....       LCALL   ??HalLedOnOff?relay
   \   000052   E5..         MOV     A,?V0 + 1
   \   000054   62..         XRL     ?V0 + 0,A
   \                     ??HalLedSet_8:
   \   000056   E5..         MOV     A,?V0 + 1
   \   000058   C3           CLR     C
   \   000059   33           RLC     A
   \   00005A   F5..         MOV     ?V0 + 1,A
   \   00005C   EE           MOV     A,R6
   \   00005D   2409         ADD     A,#0x9
   \   00005F   FE           MOV     R6,A
   \   000060   EF           MOV     A,R7
   \   000061   3400         ADDC    A,#0x0
   \   000063   FF           MOV     R7,A
   \                     ??HalLedSet_5:
   \   000064   E5..         MOV     A,?V0 + 0
   \   000066   60BF         JZ      ??HalLedSet_3
   \   000068   55..         ANL     A,?V0 + 1
   \   00006A   60EA         JZ      ??HalLedSet_8
   \   00006C   7408         MOV     A,#0x8
   \   00006E   65..         XRL     A,?V0 + 2
   \   000070   8E82         MOV     DPL,R6
   \   000072   8F83         MOV     DPH,R7
   \   000074   60D1         JZ      ??HalLedSet_6
   \   000076   E5..         MOV     A,?V0 + 2
   \   000078   80D0         SJMP    ??HalLedSet_7
    159          
    160          }
    161          
    162          /***************************************************************************************************
    163           * @fn      HalLedBlink
    164           *
    165           * @brief   Blink the leds
    166           *
    167           * @param   leds       - bit mask value of leds to be blinked
    168           *          numBlinks  - number of blinks
    169           *          percent    - the percentage in each period where the led
    170           *                       will be on
    171           *          period     - length of each cycle in milliseconds
    172           *
    173           * @return  None
    174           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    175          void HalLedBlink (uint8 leds, uint8 numBlinks, uint8 percent, uint16 period)
   \                     HalLedBlink:
    176          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   8A..         MOV     ?V0 + 3,R2
   \   000009   8B..         MOV     ?V0 + 4,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
    177          #if (defined (BLINK_LEDS)) && (HAL_LED == TRUE)
    178            uint8 led;
    179            HalLedControl_t *sts;
    180          
    181            if (leds && percent && period)
   \   00000F   E9           MOV     A,R1
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??HalLedBlink_0 & 0xFFFF
   \   000015   EB           MOV     A,R3
   \   000016   7003         JNZ     $+5
   \   000018   02....       LJMP    ??HalLedBlink_0 & 0xFFFF
   \   00001B   EE           MOV     A,R6
   \   00001C   4F           ORL     A,R7
   \   00001D   7003         JNZ     $+5
   \   00001F   02....       LJMP    ??HalLedBlink_0 & 0xFFFF
    182            {
    183              if (percent < 100)
   \   000022   EB           MOV     A,R3
   \   000023   C3           CLR     C
   \   000024   9464         SUBB    A,#0x64
   \   000026   4003         JC      $+5
   \   000028   02....       LJMP    ??HalLedBlink_1 & 0xFFFF
    184              {
    185                led = HAL_LED_1;
   \   00002B   75..01       MOV     ?V0 + 5,#0x1
    186                leds &= HAL_LED_ALL;
   \   00002E   53..0F       ANL     ?V0 + 2,#0xf
    187                sts = HalLedStatusControl.HalLedControlTable;
   \   000031   75....       MOV     ?V0 + 0,#HalLedStatusControl & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(HalLedStatusControl >> 8) & 0xff
   \   000037   8076         SJMP    ??HalLedBlink_2
    188          
    189                while (leds)
    190                {
    191                  if (leds & led)
   \                     ??HalLedBlink_3:
   \   000039   55..         ANL     A,?V0 + 5
   \   00003B   605E         JZ      ??HalLedBlink_4
    192                  {
    193                    /* Store the current state of the led before going to blinking if not already blinking */
    194                    if(sts->mode < HAL_LED_MODE_BLINK )
   \   00003D   85..82       MOV     DPL,?V0 + 0
   \   000040   85..83       MOV     DPH,?V0 + 1
   \   000043   E0           MOVX    A,@DPTR
   \   000044   C3           CLR     C
   \   000045   9402         SUBB    A,#0x2
   \   000047   500D         JNC     ??HalLedBlink_5
    195                    	preBlinkState |= (led & HalLedState);
   \   000049   90....       MOV     DPTR,#HalLedState
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   55..         ANL     A,?V0 + 5
   \   00004F   F8           MOV     R0,A
   \   000050   90....       MOV     DPTR,#preBlinkState
   \   000053   E0           MOVX    A,@DPTR
   \   000054   48           ORL     A,R0
   \   000055   F0           MOVX    @DPTR,A
    196          
    197                    sts->mode  = HAL_LED_MODE_OFF;                    /* Stop previous blink */
   \                     ??HalLedBlink_5:
   \   000056   85..82       MOV     DPL,?V0 + 0
   \   000059   85..83       MOV     DPH,?V0 + 1
   \   00005C   E4           CLR     A
   \   00005D   F0           MOVX    @DPTR,A
    198                    sts->time  = period;                              /* Time for one on/off cycle */
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   EE           MOV     A,R6
   \   000062   F0           MOVX    @DPTR,A
   \   000063   A3           INC     DPTR
   \   000064   EF           MOV     A,R7
   \   000065   12....       LCALL   ?Subroutine1 & 0xFFFF
    199                    sts->onPct = percent;                             /* % of cycle LED is on */
   \                     ??CrossCallReturnLabel_0:
   \   000068   A3           INC     DPTR
   \   000069   E5..         MOV     A,?V0 + 4
   \   00006B   12....       LCALL   ?Subroutine1 & 0xFFFF
    200                    sts->todo  = numBlinks;                           /* Number of blink cycles */
   \                     ??CrossCallReturnLabel_1:
   \   00006E   E5..         MOV     A,?V0 + 3
   \   000070   F0           MOVX    @DPTR,A
    201                    if (!numBlinks) sts->mode |= HAL_LED_MODE_FLASH;  /* Continuous */
   \   000071   7009         JNZ     ??HalLedBlink_6
   \   000073   85..82       MOV     DPL,?V0 + 0
   \   000076   85..83       MOV     DPH,?V0 + 1
   \   000079   7404         MOV     A,#0x4
   \   00007B   F0           MOVX    @DPTR,A
    202                    sts->next = osal_GetSystemClock();                /* Start now */
   \                     ??HalLedBlink_6:
   \   00007C                ; Setup parameters for call to function osal_GetSystemClock
   \   00007C   12....       LCALL   ??osal_GetSystemClock?relay
   \   00007F   85..82       MOV     DPL,?V0 + 0
   \   000082   85..83       MOV     DPH,?V0 + 1
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   12....       LCALL   ?XSTORE_R2345
    203                    sts->mode |= HAL_LED_MODE_BLINK;                  /* Enable blinking */
   \   00008D   85..82       MOV     DPL,?V0 + 0
   \   000090   85..83       MOV     DPH,?V0 + 1
   \   000093   E0           MOVX    A,@DPTR
   \   000094   D2E1         SETB    0xE0 /* A   */.1
   \   000096   F0           MOVX    @DPTR,A
    204                    leds ^= led;
   \   000097   E5..         MOV     A,?V0 + 5
   \   000099   62..         XRL     ?V0 + 2,A
    205                  }
    206                  led <<= 1;
   \                     ??HalLedBlink_4:
   \   00009B   E5..         MOV     A,?V0 + 5
   \   00009D   C3           CLR     C
   \   00009E   33           RLC     A
   \   00009F   F5..         MOV     ?V0 + 5,A
    207                  sts++;
   \   0000A1   E5..         MOV     A,?V0 + 0
   \   0000A3   2409         ADD     A,#0x9
   \   0000A5   F8           MOV     R0,A
   \   0000A6   E5..         MOV     A,?V0 + 1
   \   0000A8   3400         ADDC    A,#0x0
   \   0000AA   F9           MOV     R1,A
   \   0000AB   88..         MOV     ?V0 + 0,R0
   \   0000AD   89..         MOV     ?V0 + 1,R1
    208                }
   \                     ??HalLedBlink_2:
   \   0000AF   E5..         MOV     A,?V0 + 2
   \   0000B1   7086         JNZ     ??HalLedBlink_3
    209                // Cancel any overlapping timer for blink events
    210                osal_stop_timerEx(Hal_TaskID, HAL_LED_BLINK_EVENT);
   \   0000B3                ; Setup parameters for call to function osal_stop_timerEx
   \   0000B3   7A02         MOV     R2,#0x2
   \   0000B5   7B00         MOV     R3,#0x0
   \   0000B7   90....       MOV     DPTR,#Hal_TaskID
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   F9           MOV     R1,A
   \   0000BC   12....       LCALL   ??osal_stop_timerEx?relay
    211                osal_set_event (Hal_TaskID, HAL_LED_BLINK_EVENT);
   \   0000BF                ; Setup parameters for call to function osal_set_event
   \   0000BF   7A02         MOV     R2,#0x2
   \   0000C1   7B00         MOV     R3,#0x0
   \   0000C3   90....       MOV     DPTR,#Hal_TaskID
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   F9           MOV     R1,A
   \   0000C8   12....       LCALL   ??osal_set_event?relay
   \   0000CB   8009         SJMP    ??HalLedBlink_7
    212              }
    213              else
    214              {
    215                HalLedSet (leds, HAL_LED_MODE_ON);                    /* >= 100%, turn on */
   \                     ??HalLedBlink_1:
   \   0000CD                ; Setup parameters for call to function HalLedSet
   \   0000CD   7A01         MOV     R2,#0x1
   \   0000CF   8002         SJMP    ??HalLedBlink_8
    216              }
    217            }
    218            else
    219            {
    220              HalLedSet (leds, HAL_LED_MODE_OFF);                     /* No on time, turn off */
   \                     ??HalLedBlink_0:
   \   0000D1                ; Setup parameters for call to function HalLedSet
   \   0000D1   7A00         MOV     R2,#0x0
   \                     ??HalLedBlink_8:
   \   0000D3   12....       LCALL   ??HalLedSet?relay
    221            }
    222          #elif (HAL_LED == TRUE)
    223            percent = (leds & HalLedState) ? HAL_LED_MODE_OFF : HAL_LED_MODE_ON;
    224            HalLedOnOff (leds, percent);                              /* Toggle */
    225          #else
    226            // HAL LED is disabled, suppress unused argument warnings
    227            (void) leds;
    228            (void) numBlinks;
    229            (void) percent;
    230            (void) period;
    231          #endif /* BLINK_LEDS && HAL_LED */
    232          }
   \                     ??HalLedBlink_7:
   \   0000D6   7F06         MOV     R7,#0x6
   \   0000D8   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 0
   \   000004   85..83       MOV     DPH,?V0 + 1
   \   000007   A3           INC     DPTR
   \   000008   22           RET
    233          
    234          #if (HAL_LED == TRUE)
    235          /***************************************************************************************************
    236           * @fn      HalLedUpdate
    237           *
    238           * @brief   Update leds to work with blink
    239           *
    240           * @param   none
    241           *
    242           * @return  none
    243           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    244          void HalLedUpdate (void)
   \                     HalLedUpdate:
    245          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    246            uint8 led;
    247            uint8 pct;
    248            uint8 leds;
    249            HalLedControl_t *sts;
    250            uint32 time;
    251            uint16 next;
    252            uint16 wait;
    253          
    254            next = 0;
   \   00000A   75..00       MOV     ?V0 + 12,#0x0
   \   00000D   75..00       MOV     ?V0 + 13,#0x0
    255            led  = HAL_LED_1;
   \   000010   75..01       MOV     ?V0 + 14,#0x1
    256            leds = HAL_LED_ALL;
   \   000013   75..0F       MOV     ?V0 + 15,#0xf
    257            sts = HalLedStatusControl.HalLedControlTable;
   \   000016   7E..         MOV     R6,#HalLedStatusControl & 0xff
   \   000018   7F..         MOV     R7,#(HalLedStatusControl >> 8) & 0xff
    258          
    259            /* Check if sleep is active or not */
    260            if (!HalLedStatusControl.sleepActive)
   \   00001A   90....       MOV     DPTR,#HalLedStatusControl + 36
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   6003         JZ      $+5
   \   000020   02....       LJMP    ??HalLedUpdate_0 & 0xFFFF
    261            {
    262              while (leds)
    263              {
    264                if (leds & led)
   \                     ??HalLedUpdate_1:
   \   000023   E5..         MOV     A,?V0 + 15
   \   000025   55..         ANL     A,?V0 + 14
   \   000027   7003         JNZ     $+5
   \   000029   02....       LJMP    ??HalLedUpdate_2 & 0xFFFF
    265                {
    266                  if (sts->mode & HAL_LED_MODE_BLINK)
   \   00002C   8E82         MOV     DPL,R6
   \   00002E   8F83         MOV     DPH,R7
   \   000030   E0           MOVX    A,@DPTR
   \   000031   A2E1         MOV     C,0xE0 /* A   */.1
   \   000033   4003         JC      $+5
   \   000035   02....       LJMP    ??HalLedUpdate_3 & 0xFFFF
    267                  {
    268                    time = osal_GetSystemClock();
   \   000038                ; Setup parameters for call to function osal_GetSystemClock
   \   000038   12....       LCALL   ??osal_GetSystemClock?relay
   \   00003B   8A..         MOV     ?V0 + 4,R2
   \   00003D   8B..         MOV     ?V0 + 5,R3
   \   00003F   8C..         MOV     ?V0 + 6,R4
   \   000041   8D..         MOV     ?V0 + 7,R5
    269                    if (time >= sts->next)
   \   000043   8E82         MOV     DPL,R6
   \   000045   8F83         MOV     DPH,R7
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   78..         MOV     R0,#?V0 + 4
   \   00004E   12....       LCALL   ?UL_GE_X
   \   000051   8E82         MOV     DPL,R6
   \   000053   8F83         MOV     DPH,R7
   \   000055   4003         JC      $+5
   \   000057   02....       LJMP    ??HalLedUpdate_4 & 0xFFFF
    270                    {
    271                      if (sts->mode & HAL_LED_MODE_ON)
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00005D   A3           INC     DPTR
   \   00005E   502C         JNC     ??HalLedUpdate_5
    272                      {
    273                        pct = 100 - sts->onPct;               /* Percentage of cycle for off */
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F8           MOV     R0,A
   \   000063   7464         MOV     A,#0x64
   \   000065   C3           CLR     C
   \   000066   98           SUBB    A,R0
   \   000067   85..82       MOV     DPL,?XSP + 0
   \   00006A   85..83       MOV     DPH,?XSP + 1
   \   00006D   F0           MOVX    @DPTR,A
    274                        sts->mode &= ~HAL_LED_MODE_ON;        /* Say it's not on */
   \   00006E   8E82         MOV     DPL,R6
   \   000070   8F83         MOV     DPH,R7
   \   000072   E0           MOVX    A,@DPTR
   \   000073   C2E0         CLR     0xE0 /* A   */.0
   \   000075   F0           MOVX    @DPTR,A
    275                        HalLedOnOff (led, HAL_LED_MODE_OFF);  /* Turn it off */
   \   000076                ; Setup parameters for call to function HalLedOnOff
   \   000076   7A00         MOV     R2,#0x0
   \   000078   A9..         MOV     R1,?V0 + 14
   \   00007A   12....       LCALL   ??HalLedOnOff?relay
    276          
    277                        if (!(sts->mode & HAL_LED_MODE_FLASH))
   \   00007D   8E82         MOV     DPL,R6
   \   00007F   8F83         MOV     DPH,R7
   \   000081   E0           MOVX    A,@DPTR
   \   000082   A2E2         MOV     C,0xE0 /* A   */.2
   \   000084   4033         JC      ??HalLedUpdate_6
    278                        {
    279                          sts->todo--;                        /* Not continuous, reduce count */
   \   000086   A3           INC     DPTR
   \   000087   E0           MOVX    A,@DPTR
   \   000088   14           DEC     A
   \                     ??HalLedUpdate_7:
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   802D         SJMP    ??HalLedUpdate_6
    280                        }
    281                      }            
    282                      else if ( (!sts->todo) && !(sts->mode & HAL_LED_MODE_FLASH) )
   \                     ??HalLedUpdate_5:
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   700D         JNZ     ??HalLedUpdate_8
   \   00008F   8E82         MOV     DPL,R6
   \   000091   8F83         MOV     DPH,R7
   \   000093   E0           MOVX    A,@DPTR
   \   000094   A2E2         MOV     C,0xE0 /* A   */.2
   \   000096   4004         JC      ??HalLedUpdate_8
    283                      {
    284                        sts->mode ^= HAL_LED_MODE_BLINK;      /* No more blinks */  
   \   000098   6402         XRL     A,#0x2
   \   00009A   80ED         SJMP    ??HalLedUpdate_7
    285                      }            
    286                      else
    287                      {
    288                        pct = sts->onPct;                     /* Percentage of cycle for on */
   \                     ??HalLedUpdate_8:
   \   00009C   8E82         MOV     DPL,R6
   \   00009E   8F83         MOV     DPH,R7
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   85..82       MOV     DPL,?XSP + 0
   \   0000A6   85..83       MOV     DPH,?XSP + 1
   \   0000A9   F0           MOVX    @DPTR,A
    289                        sts->mode |= HAL_LED_MODE_ON;         /* Say it's on */
   \   0000AA   8E82         MOV     DPL,R6
   \   0000AC   8F83         MOV     DPH,R7
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   D2E0         SETB    0xE0 /* A   */.0
   \   0000B1   F0           MOVX    @DPTR,A
    290                        HalLedOnOff (led, HAL_LED_MODE_ON);   /* Turn it on */
   \   0000B2                ; Setup parameters for call to function HalLedOnOff
   \   0000B2   7A01         MOV     R2,#0x1
   \   0000B4   A9..         MOV     R1,?V0 + 14
   \   0000B6   12....       LCALL   ??HalLedOnOff?relay
    291                      }
    292                      if (sts->mode & HAL_LED_MODE_BLINK)
   \                     ??HalLedUpdate_6:
   \   0000B9   8E82         MOV     DPL,R6
   \   0000BB   8F83         MOV     DPH,R7
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   A2E1         MOV     C,0xE0 /* A   */.1
   \   0000C0   5065         JNC     ??HalLedUpdate_9
    293                      {
    294                        wait = (((uint32)pct * (uint32)sts->time) / 100);
   \   0000C2   85..82       MOV     DPL,?XSP + 0
   \   0000C5   85..83       MOV     DPH,?XSP + 1
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   F5..         MOV     ?V0 + 0,A
   \   0000CB   E4           CLR     A
   \   0000CC   F5..         MOV     ?V0 + 1,A
   \   0000CE   F5..         MOV     ?V0 + 2,A
   \   0000D0   F5..         MOV     ?V0 + 3,A
   \   0000D2   8E82         MOV     DPL,R6
   \   0000D4   8F83         MOV     DPH,R7
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   F5..         MOV     ?V0 + 8,A
   \   0000DC   A3           INC     DPTR
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   F5..         MOV     ?V0 + 9,A
   \   0000E0   E4           CLR     A
   \   0000E1   F5..         MOV     ?V0 + 10,A
   \   0000E3   F5..         MOV     ?V0 + 11,A
   \   0000E5   78..         MOV     R0,#?V0 + 0
   \   0000E7   79..         MOV     R1,#?V0 + 8
   \   0000E9   12....       LCALL   ?L_MUL
   \   0000EC   90....       MOV     DPTR,#__Constant_64
   \   0000EF   78..         MOV     R0,#?V0 + 8
   \   0000F1   12....       LCALL   ?L_MOV_X
   \   0000F4   78..         MOV     R0,#?V0 + 0
   \   0000F6   79..         MOV     R1,#?V0 + 8
   \   0000F8   12....       LCALL   ?UL_DIV_MOD
    295                        sts->next = time + wait;
   \   0000FB   85....       MOV     ?V0 + 8,?V0 + 0
   \   0000FE   85....       MOV     ?V0 + 9,?V0 + 1
   \   000101   E4           CLR     A
   \   000102   F5..         MOV     ?V0 + 10,A
   \   000104   F5..         MOV     ?V0 + 11,A
   \   000106   78..         MOV     R0,#?V0 + 4
   \   000108   79..         MOV     R1,#?V0 + 8
   \   00010A   12....       LCALL   ?L_ADD
   \   00010D   8E82         MOV     DPL,R6
   \   00010F   8F83         MOV     DPH,R7
   \   000111   A3           INC     DPTR
   \   000112   A3           INC     DPTR
   \   000113   A3           INC     DPTR
   \   000114   A3           INC     DPTR
   \   000115   A3           INC     DPTR
   \   000116   E5..         MOV     A,?V0 + 4
   \   000118   F0           MOVX    @DPTR,A
   \   000119   A3           INC     DPTR
   \   00011A   E5..         MOV     A,?V0 + 5
   \   00011C   F0           MOVX    @DPTR,A
   \   00011D   A3           INC     DPTR
   \   00011E   E5..         MOV     A,?V0 + 6
   \   000120   F0           MOVX    @DPTR,A
   \   000121   A3           INC     DPTR
   \   000122   E5..         MOV     A,?V0 + 7
   \                     ??HalLedUpdate_10:
   \   000124   F0           MOVX    @DPTR,A
   \   000125   803C         SJMP    ??HalLedUpdate_11
    296                      }
    297                      else
    298                      {
    299                        /* no more blink, no more wait */
    300                        wait = 0;
   \                     ??HalLedUpdate_9:
   \   000127   75..00       MOV     ?V0 + 0,#0x0
   \   00012A   75..00       MOV     ?V0 + 1,#0x0
    301                        /* After blinking, set the LED back to the state before it blinks */
    302                        HalLedSet (led, ((preBlinkState & led)!=0)?HAL_LED_MODE_ON:HAL_LED_MODE_OFF);
   \   00012D   90....       MOV     DPTR,#preBlinkState
   \   000130   E0           MOVX    A,@DPTR
   \   000131   55..         ANL     A,?V0 + 14
   \   000133   6004         JZ      ??HalLedUpdate_12
   \   000135   7A01         MOV     R2,#0x1
   \   000137   8002         SJMP    ??HalLedUpdate_13
   \                     ??HalLedUpdate_12:
   \   000139   7A00         MOV     R2,#0x0
   \                     ??HalLedUpdate_13:
   \   00013B                ; Setup parameters for call to function HalLedSet
   \   00013B   A9..         MOV     R1,?V0 + 14
   \   00013D   12....       LCALL   ??HalLedSet?relay
    303                        /* Clear the saved bit */
    304                        preBlinkState &= (led ^ 0xFF);
   \   000140   74FF         MOV     A,#-0x1
   \   000142   65..         XRL     A,?V0 + 14
   \   000144   F8           MOV     R0,A
   \   000145   90....       MOV     DPTR,#preBlinkState
   \   000148   E0           MOVX    A,@DPTR
   \   000149   58           ANL     A,R0
   \   00014A   80D8         SJMP    ??HalLedUpdate_10
    305                      }
    306                    }
    307                    else
    308                    {
    309                      wait = sts->next - time;  /* Time left */
   \                     ??HalLedUpdate_4:
   \   00014C   A3           INC     DPTR
   \   00014D   A3           INC     DPTR
   \   00014E   A3           INC     DPTR
   \   00014F   A3           INC     DPTR
   \   000150   A3           INC     DPTR
   \   000151   78..         MOV     R0,#?V0 + 0
   \   000153   12....       LCALL   ?L_MOV_X
   \   000156   E5..         MOV     A,?V0 + 0
   \   000158   C3           CLR     C
   \   000159   95..         SUBB    A,?V0 + 4
   \   00015B   F5..         MOV     ?V0 + 0,A
   \   00015D   E5..         MOV     A,?V0 + 1
   \   00015F   95..         SUBB    A,?V0 + 5
   \   000161   F5..         MOV     ?V0 + 1,A
    310                    }
    311          
    312                    if (!next || ( wait && (wait < next) ))
   \                     ??HalLedUpdate_11:
   \   000163   E5..         MOV     A,?V0 + 12
   \   000165   45..         ORL     A,?V0 + 13
   \   000167   6011         JZ      ??HalLedUpdate_14
   \   000169   E5..         MOV     A,?V0 + 0
   \   00016B   45..         ORL     A,?V0 + 1
   \   00016D   6011         JZ      ??HalLedUpdate_3
   \   00016F   C3           CLR     C
   \   000170   E5..         MOV     A,?V0 + 0
   \   000172   95..         SUBB    A,?V0 + 12
   \   000174   E5..         MOV     A,?V0 + 1
   \   000176   95..         SUBB    A,?V0 + 13
   \   000178   5006         JNC     ??HalLedUpdate_3
    313                    {
    314                      next = wait;
   \                     ??HalLedUpdate_14:
   \   00017A   85....       MOV     ?V0 + 12,?V0 + 0
   \   00017D   85....       MOV     ?V0 + 13,?V0 + 1
    315                    }
    316                  }
    317                  leds ^= led;
   \                     ??HalLedUpdate_3:
   \   000180   E5..         MOV     A,?V0 + 14
   \   000182   62..         XRL     ?V0 + 15,A
    318                }
    319                led <<= 1;
   \                     ??HalLedUpdate_2:
   \   000184   E5..         MOV     A,?V0 + 14
   \   000186   C3           CLR     C
   \   000187   33           RLC     A
   \   000188   F5..         MOV     ?V0 + 14,A
    320                sts++;
   \   00018A   EE           MOV     A,R6
   \   00018B   2409         ADD     A,#0x9
   \   00018D   FE           MOV     R6,A
   \   00018E   EF           MOV     A,R7
   \   00018F   3400         ADDC    A,#0x0
   \   000191   FF           MOV     R7,A
    321              }
   \   000192   E5..         MOV     A,?V0 + 15
   \   000194   6003         JZ      $+5
   \   000196   02....       LJMP    ??HalLedUpdate_1 & 0xFFFF
    322          
    323              if (next)
   \   000199   E5..         MOV     A,?V0 + 12
   \   00019B   45..         ORL     A,?V0 + 13
   \   00019D   6010         JZ      ??HalLedUpdate_0
    324              {
    325                osal_start_timerEx(Hal_TaskID, HAL_LED_BLINK_EVENT, next);   /* Schedule event */
   \   00019F                ; Setup parameters for call to function osal_start_timerEx
   \   00019F   AC..         MOV     R4,?V0 + 12
   \   0001A1   AD..         MOV     R5,?V0 + 13
   \   0001A3   7A02         MOV     R2,#0x2
   \   0001A5   7B00         MOV     R3,#0x0
   \   0001A7   90....       MOV     DPTR,#Hal_TaskID
   \   0001AA   E0           MOVX    A,@DPTR
   \   0001AB   F9           MOV     R1,A
   \   0001AC   12....       LCALL   ??osal_start_timerEx?relay
    326              }
    327            }
    328          }
   \                     ??HalLedUpdate_0:
   \   0001AF   7401         MOV     A,#0x1
   \   0001B1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001B4   7F10         MOV     R7,#0x10
   \   0001B6   02....       LJMP    ?BANKED_LEAVE_XDATA
    329          
    330          /***************************************************************************************************
    331           * @fn      HalLedOnOff
    332           *
    333           * @brief   Turns specified LED ON or OFF
    334           *
    335           * @param   leds - LED bit mask
    336           *          mode - LED_ON,LED_OFF,
    337           *
    338           * @return  none
    339           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    340          void HalLedOnOff (uint8 leds, uint8 mode)
   \                     HalLedOnOff:
    341          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    342            if (leds & HAL_LED_1)
   \   000004   E9           MOV     A,R1
   \   000005   A2E0         MOV     C,0xE0 /* A   */.0
   \   000007   500B         JNC     ??HalLedOnOff_0
    343            {
    344              if (mode == HAL_LED_MODE_ON)
   \   000009   7401         MOV     A,#0x1
   \   00000B   6A           XRL     A,R2
   \   00000C   7004         JNZ     ??HalLedOnOff_1
    345              {
    346                HAL_TURN_ON_LED1();
   \   00000E   C296         CLR     0x90.6
   \   000010   8002         SJMP    ??HalLedOnOff_0
    347              }
    348              else
    349              {
    350                HAL_TURN_OFF_LED1();
   \                     ??HalLedOnOff_1:
   \   000012   D296         SETB    0x90.6
    351              }
    352            }
    353          
    354            if (leds & HAL_LED_2)
   \                     ??HalLedOnOff_0:
   \   000014   E9           MOV     A,R1
   \   000015   A2E1         MOV     C,0xE0 /* A   */.1
   \   000017   500B         JNC     ??HalLedOnOff_2
    355            {
    356              if (mode == HAL_LED_MODE_ON)
   \   000019   7401         MOV     A,#0x1
   \   00001B   6A           XRL     A,R2
   \   00001C   7004         JNZ     ??HalLedOnOff_3
    357              {
    358                HAL_TURN_ON_LED2();
   \   00001E   C295         CLR     0x90.5
   \   000020   8002         SJMP    ??HalLedOnOff_2
    359              }
    360              else
    361              {
    362                HAL_TURN_OFF_LED2();
   \                     ??HalLedOnOff_3:
   \   000022   D295         SETB    0x90.5
    363              }
    364            }
    365          
    366            if (leds & HAL_LED_3)
   \                     ??HalLedOnOff_2:
   \   000024   E9           MOV     A,R1
   \   000025   A2E2         MOV     C,0xE0 /* A   */.2
   \   000027   500B         JNC     ??HalLedOnOff_4
    367            {
    368              if (mode == HAL_LED_MODE_ON)
   \   000029   7401         MOV     A,#0x1
   \   00002B   6A           XRL     A,R2
   \   00002C   7004         JNZ     ??HalLedOnOff_5
    369              {
    370                HAL_TURN_ON_LED3();
   \   00002E   C294         CLR     0x90.4
   \   000030   8002         SJMP    ??HalLedOnOff_4
    371              }
    372              else
    373              {
    374                HAL_TURN_OFF_LED3();
   \                     ??HalLedOnOff_5:
   \   000032   D294         SETB    0x90.4
    375              }
    376            }
    377          
    378            if (leds & HAL_LED_4)
   \                     ??HalLedOnOff_4:
   \   000034   E9           MOV     A,R1
   \   000035   A2E3         MOV     C,0xE0 /* A   */.3
   \   000037   500B         JNC     ??HalLedOnOff_6
    379            {
    380              if (mode == HAL_LED_MODE_ON)
   \   000039   7401         MOV     A,#0x1
   \   00003B   6A           XRL     A,R2
   \   00003C   7004         JNZ     ??HalLedOnOff_7
    381              {
    382                HAL_TURN_ON_LED4();
   \   00003E   C296         CLR     0x90.6
   \   000040   8005         SJMP    ??HalLedOnOff_8
    383              }
    384              else
    385              {
    386                HAL_TURN_OFF_LED4();
   \                     ??HalLedOnOff_7:
   \   000042   D296         SETB    0x90.6
    387              }
    388            }
    389          
    390            /* Remember current state */
    391            if (mode)
   \                     ??HalLedOnOff_6:
   \   000044   EA           MOV     A,R2
   \   000045   6007         JZ      ??HalLedOnOff_9
    392            {
    393              HalLedState |= leds;
   \                     ??HalLedOnOff_8:
   \   000047   90....       MOV     DPTR,#HalLedState
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   49           ORL     A,R1
   \   00004C   8009         SJMP    ??HalLedOnOff_10
    394            }
    395            else
    396            {
    397              HalLedState &= (leds ^ 0xFF);
   \                     ??HalLedOnOff_9:
   \   00004E   74FF         MOV     A,#-0x1
   \   000050   69           XRL     A,R1
   \   000051   F8           MOV     R0,A
   \   000052   90....       MOV     DPTR,#HalLedState
   \   000055   E0           MOVX    A,@DPTR
   \   000056   58           ANL     A,R0
    398            }
   \                     ??HalLedOnOff_10:
   \   000057   80..         SJMP    ??Subroutine2_0
   \   000059                REQUIRE _A_P1
    399          }
    400          #endif /* HAL_LED */
    401          
    402          /***************************************************************************************************
    403           * @fn      HalGetLedState
    404           *
    405           * @brief   Dim LED2 - Dim (set level) of LED2
    406           *
    407           * @param   none
    408           *
    409           * @return  led state
    410           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    411          uint8 HalLedGetState ()
   \                     HalLedGetState:
    412          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    413          #if (HAL_LED == TRUE)
    414            return HalLedState;
   \   000004   90....       MOV     DPTR,#HalLedState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   80..         SJMP    ??Subroutine3_0
    415          #else
    416            return 0;
    417          #endif
    418          }
    419          
    420          /***************************************************************************************************
    421           * @fn      HalLedEnterSleep
    422           *
    423           * @brief   Store current LEDs state before sleep
    424           *
    425           * @param   none
    426           *
    427           * @return  none
    428           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    429          void HalLedEnterSleep( void )
   \                     HalLedEnterSleep:
    430          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    431          #ifdef BLINK_LEDS
    432            /* Sleep ON */
    433            HalLedStatusControl.sleepActive = TRUE;
   \   000004   90....       MOV     DPTR,#HalLedStatusControl + 36
   \   000007   7401         MOV     A,#0x1
   \   000009   F0           MOVX    @DPTR,A
    434          #endif /* BLINK_LEDS */
    435          
    436          #if (HAL_LED == TRUE)
    437            /* Save the state of each led */
    438            HalSleepLedState = 0;
    439            HalSleepLedState |= HAL_STATE_LED1();
   \   00000A   E590         MOV     A,0x90
   \   00000C   FB           MOV     R3,A
    440            HalSleepLedState |= HAL_STATE_LED2() << 1;
   \   00000D   E590         MOV     A,0x90
   \   00000F   F8           MOV     R0,A
    441            HalSleepLedState |= HAL_STATE_LED3() << 2;
   \   000010   E590         MOV     A,0x90
   \   000012   F9           MOV     R1,A
    442            HalSleepLedState |= HAL_STATE_LED4() << 3;
   \   000013   A296         MOV     C,0x90.6
   \   000015   E4           CLR     A
   \   000016   33           RLC     A
   \   000017   33           RLC     A
   \   000018   33           RLC     A
   \   000019   33           RLC     A
   \   00001A   6408         XRL     A,#0x8
   \   00001C   FA           MOV     R2,A
   \   00001D   E9           MOV     A,R1
   \   00001E   A2E4         MOV     C,0xE0 /* A   */.4
   \   000020   E4           CLR     A
   \   000021   33           RLC     A
   \   000022   33           RLC     A
   \   000023   33           RLC     A
   \   000024   6404         XRL     A,#0x4
   \   000026   F9           MOV     R1,A
   \   000027   E8           MOV     A,R0
   \   000028   A2E5         MOV     C,0xE0 /* A   */.5
   \   00002A   E4           CLR     A
   \   00002B   33           RLC     A
   \   00002C   33           RLC     A
   \   00002D   6402         XRL     A,#0x2
   \   00002F   F8           MOV     R0,A
   \   000030   D2F0         SETB    B.0
   \   000032   EB           MOV     A,R3
   \   000033   A2E6         MOV     C,0xE0 /* A   */.6
   \   000035   30F001       JNB     B.0,??HalLedEnterSleep_0
   \   000038   B3           CPL     C
   \                     ??HalLedEnterSleep_0:
   \   000039   E4           CLR     A
   \   00003A   33           RLC     A
   \   00003B   48           ORL     A,R0
   \   00003C   49           ORL     A,R1
   \   00003D   4A           ORL     A,R2
   \   00003E   90....       MOV     DPTR,#HalSleepLedState
   \   000041   F0           MOVX    @DPTR,A
    443          
    444            /* TURN OFF all LEDs to save power */
    445            HalLedOnOff (HAL_LED_ALL, HAL_LED_MODE_OFF);
   \   000042                ; Setup parameters for call to function HalLedOnOff
   \   000042   7A00         MOV     R2,#0x0
   \   000044   790F         MOV     R1,#0xf
   \   000046   12....       LCALL   ??HalLedOnOff?relay
    446          #endif /* HAL_LED */
    447          
    448          }
   \   000049   80..         SJMP    ??Subroutine3_0
   \   00004B                REQUIRE _A_P1
    449          
    450          /***************************************************************************************************
    451           * @fn      HalLedExitSleep
    452           *
    453           * @brief   Restore current LEDs state after sleep
    454           *
    455           * @param   none
    456           *
    457           * @return  none
    458           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    459          void HalLedExitSleep( void )
   \                     HalLedExitSleep:
    460          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    461          #if (HAL_LED == TRUE)
    462            /* Load back the saved state */
    463            HalLedOnOff(HalSleepLedState, HAL_LED_MODE_ON);
   \   000004                ; Setup parameters for call to function HalLedOnOff
   \   000004   7A01         MOV     R2,#0x1
   \   000006   90....       MOV     DPTR,#HalSleepLedState
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F9           MOV     R1,A
   \   00000B   12....       LCALL   ??HalLedOnOff?relay
    464          
    465            /* Restart - This takes care BLINKING LEDS */
    466            HalLedUpdate();
   \   00000E                ; Setup parameters for call to function HalLedUpdate
   \   00000E   12....       LCALL   ??HalLedUpdate?relay
    467          #endif /* HAL_LED */
    468          
    469          #ifdef BLINK_LEDS
    470            /* Sleep OFF */
    471            HalLedStatusControl.sleepActive = FALSE;
   \   000011   80..         SJMP    ?Subroutine0
    472          #endif /* BLINK_LEDS */
    473          }

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedBlink?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedBlink

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedOnOff?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedOnOff

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedGetState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedGetState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedEnterSleep?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedEnterSleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedExitSleep?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedExitSleep
    474          
    475          /***************************************************************************************************
    476          ***************************************************************************************************/
    477          
    478          
    479          
    480          

   Maximum stack usage in bytes:

     Function                 ISTACK PSTACK XSTACK
     --------                 ------ ------ ------
     HalLedBlink                  1      0     25
       -> osal_GetSystemClock     0      0     28
       -> osal_stop_timerEx       0      0     28
       -> osal_set_event          0      0     28
       -> HalLedSet               0      0     28
       -> HalLedSet               0      0     28
     HalLedEnterSleep             2      0      0
       -> HalLedOnOff             4      0      0
     HalLedExitSleep              2      0      0
       -> HalLedOnOff             4      0      0
       -> HalLedUpdate            4      0      0
     HalLedGetState               2      0      0
     HalLedInit                   2      0      0
       -> HalLedSet               4      0      0
     HalLedOnOff                  2      0     25
     HalLedSet                    1      0     36
       -> HalLedBlink             0      0     22
       -> HalLedBlink             0      0     22
       -> HalLedOnOff             0      0     22
     HalLedUpdate                 1      0     25
       -> osal_GetSystemClock     0      0     50
       -> HalLedOnOff             0      0     50
       -> HalLedOnOff             0      0     50
       -> HalLedSet               0      0     50
       -> osal_start_timerEx      0      0     50


   Segment part sizes:

     Function/Label           Bytes
     --------------           -----
     _A_P1                       1
     HalLedState                 1
     HalSleepLedState            1
     preBlinkState               1
     HalLedStatusControl        37
     HalLedInit                 14
     ?Subroutine0                4
     ??Subroutine2_0             1
     ??Subroutine3_0             7
     HalLedSet                 122
     HalLedBlink               219
     ?Subroutine1                9
     HalLedUpdate              441
     HalLedOnOff                89
     HalLedGetState             11
     HalLedEnterSleep           75
     HalLedExitSleep            19
     __Constant_64               4
     ??HalLedInit?relay          6
     ??HalLedSet?relay           6
     ??HalLedBlink?relay         6
     ??HalLedUpdate?relay        6
     ??HalLedOnOff?relay         6
     ??HalLedGetState?relay      6
     ??HalLedEnterSleep?relay    6
     ??HalLedExitSleep?relay     6

 
 1 011 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
     4 bytes in segment XDATA_ROM_C
    40 bytes in segment XDATA_Z
 
 1 059 bytes of CODE  memory
     0 bytes of CONST memory (+ 4 bytes shared)
     0 bytes of DATA  memory (+ 1 byte  shared)
    40 bytes of XDATA memory

Errors: none
Warnings: none
