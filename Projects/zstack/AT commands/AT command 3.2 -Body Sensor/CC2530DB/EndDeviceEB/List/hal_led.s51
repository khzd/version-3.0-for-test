///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        26/Aug/2015  19:20:58 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  S:\zigbee\Myzigbe\version 3.0 for                 /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\Source\hal\hal_led.c                 /
//    Command line       =  -f "S:\zigbee\Myzigbe\version 3.0 for             /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\..\..\..\Tools\CC2530DB\f8w /
//                          Endev.cfg" (-DCPU32MHZ -DROOT=__near_func         /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f "S:\zigbee\Myzigbe\version /
//                           3.0 for test\Projects\zstack\AT commands\AT      /
//                          command 3.2 -Body Sensor\CC2530DB\..\..\..\Tools\ /
//                          CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO -DSECURE=0   /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "S:\zigbee\Myzigbe\version /
//                           3.0 for test\Projects\zstack\AT commands\AT      /
//                          command 3.2 -Body Sensor\Source\hal\hal_led.c"    /
//                          -D ZIGBEEPRO -D NWK_AUTO_POLL -D HAL_UART=TRUE    /
//                          -D HOLD_AUTO_START -D NV_RESTORE -D REFLECTOR -D  /
//                          HAL_UART_ISR=1 -D HAL_UART_DMA=0 -D               /
//                          xHAL_UART_ISR_TX_MAX=200 -D xPOWER_SAVING -D      /
//                          ZCL_READ -D ZCL_WRITE -D ZCL_IDENTIFY -D          /
//                          ZCL_ON_OFF -D ZCL_DISCOVER -D xZTOOL_P1 -D        /
//                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D       /
//                          xLCD_SUPPORTED=DEBUG -D                           /
//                          xMT_UART_DEFAULT_OVERFLOW=FALSE -lC               /
//                          "S:\zigbee\Myzigbe\version 3.0 for                /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\EndDeviceEB\List\" -lA      /
//                          "S:\zigbee\Myzigbe\version 3.0 for                /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\EndDeviceEB\List\"          /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          "S:\zigbee\Myzigbe\version 3.0 for                /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\EndDeviceEB\Obj\" -e        /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "S:\zigbee\Myzigbe\version 3.0 for                /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\" -I                        /
//                          "S:\zigbee\Myzigbe\version 3.0 for                /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\..\Source\" -I              /
//                          "S:\zigbee\Myzigbe\version 3.0 for                /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\..\Source\hal\" -I          /
//                          "S:\zigbee\Myzigbe\version 3.0 for                /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\..\Source\Modified\" -I     /
//                          "S:\zigbee\Myzigbe\version 3.0 for                /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\..\..\..\ZMain\TI2530DB\"   /
//                          -I "S:\zigbee\Myzigbe\version 3.0 for             /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\h /
//                          al\include\" -I "S:\zigbee\Myzigbe\version 3.0    /
//                          for test\Projects\zstack\AT commands\AT command   /
//                          3.2 -Body Sensor\CC2530DB\..\..\..\..\..\Componen /
//                          ts\hal\target\CC2530EB\" -I                       /
//                          "S:\zigbee\Myzigbe\version 3.0 for                /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\m /
//                          ac\include\" -I "S:\zigbee\Myzigbe\version 3.0    /
//                          for test\Projects\zstack\AT commands\AT command   /
//                          3.2 -Body Sensor\CC2530DB\..\..\..\..\..\Componen /
//                          ts\mac\high_level\" -I "S:\zigbee\Myzigbe\version /
//                           3.0 for test\Projects\zstack\AT commands\AT      /
//                          command 3.2 -Body Sensor\CC2530DB\..\..\..\..\..\ /
//                          Components\mac\low_level\srf04\" -I               /
//                          "S:\zigbee\Myzigbe\version 3.0 for                /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\m /
//                          ac\low_level\srf04\single_chip\" -I               /
//                          "S:\zigbee\Myzigbe\version 3.0 for                /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\m /
//                          t\" -I "S:\zigbee\Myzigbe\version 3.0 for         /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\o /
//                          sal\include\" -I "S:\zigbee\Myzigbe\version 3.0   /
//                          for test\Projects\zstack\AT commands\AT command   /
//                          3.2 -Body Sensor\CC2530DB\..\..\..\..\..\Componen /
//                          ts\services\saddr\" -I "S:\zigbee\Myzigbe\version /
//                           3.0 for test\Projects\zstack\AT commands\AT      /
//                          command 3.2 -Body Sensor\CC2530DB\..\..\..\..\..\ /
//                          Components\services\sdata\" -I                    /
//                          "S:\zigbee\Myzigbe\version 3.0 for                /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\s /
//                          tack\af\" -I "S:\zigbee\Myzigbe\version 3.0 for   /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\s /
//                          tack\nwk\" -I "S:\zigbee\Myzigbe\version 3.0 for  /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\s /
//                          tack\sapi\" -I "S:\zigbee\Myzigbe\version 3.0     /
//                          for test\Projects\zstack\AT commands\AT command   /
//                          3.2 -Body Sensor\CC2530DB\..\..\..\..\..\Componen /
//                          ts\stack\sec\" -I "S:\zigbee\Myzigbe\version 3.0  /
//                          for test\Projects\zstack\AT commands\AT command   /
//                          3.2 -Body Sensor\CC2530DB\..\..\..\..\..\Componen /
//                          ts\stack\sys\" -I "S:\zigbee\Myzigbe\version 3.0  /
//                          for test\Projects\zstack\AT commands\AT command   /
//                          3.2 -Body Sensor\CC2530DB\..\..\..\..\..\Componen /
//                          ts\stack\zdo\" -I "S:\zigbee\Myzigbe\version 3.0  /
//                          for test\Projects\zstack\AT commands\AT command   /
//                          3.2 -Body Sensor\CC2530DB\..\..\..\..\..\Componen /
//                          ts\stack\zcl\" -I "S:\zigbee\Myzigbe\version 3.0  /
//                          for test\Projects\zstack\AT commands\AT command   /
//                          3.2 -Body Sensor\CC2530DB\..\..\..\..\..\Componen /
//                          ts\zmac\" -I "S:\zigbee\Myzigbe\version 3.0 for   /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\z /
//                          mac\f8w\" -Ohz --require_prototypes               /
//    List file          =  S:\zigbee\Myzigbe\version 3.0 for                 /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\EndDeviceEB\List\hal_led.s5 /
//                          1                                                 /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_led

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD
        EXTERN ?L_MOV_X
        EXTERN ?L_MUL
        EXTERN ?UL_DIV_MOD
        EXTERN ?UL_GE_X
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTORE_R2345
        EXTERN __INIT_XDATA_Z

        PUBLIC ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,0203H
        PUBLIC ??HalLedEnterSleep?relay
        FUNCTION ??HalLedEnterSleep?relay,0203H
        PUBLIC ??HalLedExitSleep?relay
        FUNCTION ??HalLedExitSleep?relay,0203H
        PUBLIC ??HalLedGetState?relay
        FUNCTION ??HalLedGetState?relay,0203H
        PUBLIC ??HalLedInit?relay
        FUNCTION ??HalLedInit?relay,0203H
        PUBLIC ??HalLedOnOff?relay
        FUNCTION ??HalLedOnOff?relay,0203H
        PUBLIC ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,0203H
        PUBLIC ??HalLedUpdate?relay
        FUNCTION ??HalLedUpdate?relay,0203H
        PUBLIC HalLedBlink
        FUNCTION HalLedBlink,021203H
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC HalLedEnterSleep
        FUNCTION HalLedEnterSleep,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalLedExitSleep
        FUNCTION HalLedExitSleep,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalLedGetState
        FUNCTION HalLedGetState,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalLedInit
        FUNCTION HalLedInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalLedOnOff
        FUNCTION HalLedOnOff,0203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalLedSet
        FUNCTION HalLedSet,021203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC HalLedUpdate
        FUNCTION HalLedUpdate,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBWEAK _A_P1
        PUBWEAK __Constant_64
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_GetSystemClock SYMBOL "osal_GetSystemClock"
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
osal_set_event      SYMBOL "osal_set_event"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
??osal_GetSystemClock?relay SYMBOL "?relay", osal_GetSystemClock
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
HalLedBlink         SYMBOL "HalLedBlink"
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
HalLedEnterSleep    SYMBOL "HalLedEnterSleep"
??HalLedEnterSleep?relay SYMBOL "?relay", HalLedEnterSleep
HalLedExitSleep     SYMBOL "HalLedExitSleep"
??HalLedExitSleep?relay SYMBOL "?relay", HalLedExitSleep
HalLedGetState      SYMBOL "HalLedGetState"
??HalLedGetState?relay SYMBOL "?relay", HalLedGetState
HalLedInit          SYMBOL "HalLedInit"
??HalLedInit?relay  SYMBOL "?relay", HalLedInit
HalLedOnOff         SYMBOL "HalLedOnOff"
??HalLedOnOff?relay SYMBOL "?relay", HalLedOnOff
HalLedSet           SYMBOL "HalLedSet"
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
HalLedUpdate        SYMBOL "HalLedUpdate"
??HalLedUpdate?relay SYMBOL "?relay", HalLedUpdate

        EXTERN osal_GetSystemClock
        FUNCTION osal_GetSystemClock,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??osal_GetSystemClock?relay
        FUNCTION ??osal_GetSystemClock?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN Hal_TaskID

// S:\zigbee\Myzigbe\version 3.0 for test\Projects\zstack\AT commands\AT command 3.2 -Body Sensor\Source\hal\hal_led.c
//    1 
//    2 /***************************************************************************************************
//    3  *                                             INCLUDES
//    4  ***************************************************************************************************/
//    5 #include "hal_mcu.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1
//    6 #include "hal_defs.h"
//    7 #include "hal_types.h"
//    8 #include "hal_drivers.h"
//    9 #include "hal_led.h"
//   10 #include "osal.h"
//   11 #include "hal_board.h"
//   12 
//   13 /***************************************************************************************************
//   14  *                                             CONSTANTS
//   15  ***************************************************************************************************/
//   16 
//   17 /***************************************************************************************************
//   18  *                                              MACROS
//   19  ***************************************************************************************************/
//   20 
//   21 /***************************************************************************************************
//   22  *                                              TYPEDEFS
//   23  ***************************************************************************************************/
//   24 /* LED control structure */
//   25 typedef struct {
//   26   uint8 mode;       /* Operation mode */
//   27   uint8 todo;       /* Blink cycles left */
//   28   uint8 onPct;      /* On cycle percentage */
//   29   uint16 time;      /* On/off cycle time (msec) */
//   30   uint32 next;      /* Time for next change */
//   31 } HalLedControl_t;
//   32 
//   33 typedef struct
//   34 {
//   35   HalLedControl_t HalLedControlTable[HAL_LED_DEFAULT_MAX_LEDS];
//   36   uint8           sleepActive;
//   37 } HalLedStatus_t;
//   38 
//   39 
//   40 /***************************************************************************************************
//   41  *                                           GLOBAL VARIABLES
//   42  ***************************************************************************************************/
//   43 
//   44 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   45 static uint8 HalLedState;              // LED state at last set/clr/blink update
HalLedState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   46 
//   47 #if HAL_LED == TRUE

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   48 static uint8 HalSleepLedState;         // LED state at last set/clr/blink update
HalSleepLedState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   49 static uint8 preBlinkState;            // Original State before going to blink mode
preBlinkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   50                                        // bit 0, 1, 2, 3 represent led 0, 1, 2, 3
//   51 #endif
//   52 
//   53 #ifdef BLINK_LEDS

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   54   static HalLedStatus_t HalLedStatusControl;
HalLedStatusControl:
        DS 37
        REQUIRE __INIT_XDATA_Z
//   55 #endif
//   56 
//   57 /***************************************************************************************************
//   58  *                                            LOCAL FUNCTION
//   59  ***************************************************************************************************/
//   60 #if (HAL_LED == TRUE)
//   61 void HalLedUpdate (void);
//   62 void HalLedOnOff (uint8 leds, uint8 mode);
//   63 #endif /* HAL_LED */
//   64 
//   65 /***************************************************************************************************
//   66  *                                            FUNCTIONS - API
//   67  ***************************************************************************************************/
//   68 
//   69 /***************************************************************************************************
//   70  * @fn      HalLedInit
//   71  *
//   72  * @brief   Initialize LED Service
//   73  *
//   74  * @param   init - pointer to void that contains the initialized value
//   75  *
//   76  * @return  None
//   77  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   78 void HalLedInit (void)
HalLedInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function HalLedInit
        CODE
//   79 {
        FUNCALL HalLedInit, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   80 #if (HAL_LED == TRUE)
//   81   /* Initialize all LEDs to OFF */
//   82   HalLedSet (HAL_LED_ALL, HAL_LED_MODE_OFF);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0xf
        LCALL   ??HalLedSet?relay
//   83 #endif /* HAL_LED */
//   84 #ifdef BLINK_LEDS
//   85   /* Initialize sleepActive to FALSE */
//   86   HalLedStatusControl.sleepActive = FALSE;
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock0
//   87 #endif
//   88 }
//   89 
//   90 /***************************************************************************************************
//   91  * @fn      HalLedSet
//   92  *
//   93  * @brief   Tun ON/OFF/TOGGLE given LEDs
//   94  *
//   95  * @param   led - bit mask value of leds to be turned ON/OFF/TOGGLE
//   96  *          mode - BLINK, FLASH, TOGGLE, ON, OFF
//   97  * @return  None
//   98  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   99 uint8 HalLedSet (uint8 leds, uint8 mode)
HalLedSet:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function HalLedSet
        CODE
//  100 {
        FUNCALL HalLedSet, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLedSet, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLedSet, HalLedOnOff
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 2,R2
//  101 
//  102 #if (defined (BLINK_LEDS)) && (HAL_LED == TRUE)
//  103   uint8 led;
//  104   HalLedControl_t *sts;
//  105 
//  106   switch (mode)
        MOV     A,R2
        JZ      ??HalLedSet_0
        DEC     A
        JZ      ??HalLedSet_0
        DEC     A
        JZ      ??HalLedSet_1
        ADD     A,#-0x2
        JZ      ??HalLedSet_2
        ADD     A,#-0x4
        JZ      ??HalLedSet_0
        SJMP    ??HalLedSet_3
//  107   {
//  108     case HAL_LED_MODE_BLINK:
//  109       /* Default blink, 1 time, D% duty cycle */
//  110       HalLedBlink (leds, 1, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME);
??HalLedSet_1:
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R3,#0x5
        MOV     R2,#0x1
??HalLedSet_4:
        LCALL   ??HalLedBlink?relay
//  111       break;
//  112 
//  113     case HAL_LED_MODE_FLASH:
//  114       /* Default flash, N times, D% duty cycle */
//  115       HalLedBlink (leds, HAL_LED_DEFAULT_FLASH_COUNT, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME);
//  116       break;
//  117 
//  118     case HAL_LED_MODE_ON:
//  119     case HAL_LED_MODE_OFF:
//  120     case HAL_LED_MODE_TOGGLE:
//  121 
//  122       led = HAL_LED_1;
//  123       leds &= HAL_LED_ALL;
//  124       sts = HalLedStatusControl.HalLedControlTable;
//  125 
//  126       while (leds)
//  127       {
//  128         if (leds & led)
//  129         {
//  130           if (mode != HAL_LED_MODE_TOGGLE)
//  131           {
//  132             sts->mode = mode;  /* ON or OFF */
//  133           }
//  134           else
//  135           {
//  136             sts->mode ^= HAL_LED_MODE_ON;  /* Toggle */
//  137           }
//  138           HalLedOnOff (led, sts->mode);
//  139           leds ^= led;
//  140         }
//  141         led <<= 1;
//  142         sts++;
//  143       }
//  144       break;
//  145 
//  146     default:
//  147       break;
//  148   }
//  149 
//  150 #elif (HAL_LED == TRUE)
//  151   LedOnOff(leds, mode);
//  152 #else
//  153   // HAL LED is disabled, suppress unused argument warnings
//  154   (void) leds;
//  155   (void) mode;
//  156 #endif /* BLINK_LEDS && HAL_LED   */
//  157 
//  158   return ( HalLedState );
??HalLedSet_3:
        MOV     DPTR,#HalLedState
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
??HalLedSet_2:
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R3,#0x5
        MOV     R2,#0x32
        SJMP    ??HalLedSet_4
??HalLedSet_0:
        MOV     ?V0 + 1,#0x1
        ANL     ?V0 + 0,#0xf
        MOV     R6,#HalLedStatusControl & 0xff
        MOV     R7,#(HalLedStatusControl >> 8) & 0xff
        SJMP    ??HalLedSet_5
??HalLedSet_6:
        MOVX    A,@DPTR
        XRL     A,#0x1
??HalLedSet_7:
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalLedOnOff
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,?V0 + 1
        LCALL   ??HalLedOnOff?relay
        MOV     A,?V0 + 1
        XRL     ?V0 + 0,A
??HalLedSet_8:
        MOV     A,?V0 + 1
        CLR     C
        RLC     A
        MOV     ?V0 + 1,A
        MOV     A,R6
        ADD     A,#0x9
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
??HalLedSet_5:
        MOV     A,?V0 + 0
        JZ      ??HalLedSet_3
        ANL     A,?V0 + 1
        JZ      ??HalLedSet_8
        MOV     A,#0x8
        XRL     A,?V0 + 2
        MOV     DPL,R6
        MOV     DPH,R7
        JZ      ??HalLedSet_6
        MOV     A,?V0 + 2
        SJMP    ??HalLedSet_7
        CFI EndBlock cfiBlock1
//  159 
//  160 }
//  161 
//  162 /***************************************************************************************************
//  163  * @fn      HalLedBlink
//  164  *
//  165  * @brief   Blink the leds
//  166  *
//  167  * @param   leds       - bit mask value of leds to be blinked
//  168  *          numBlinks  - number of blinks
//  169  *          percent    - the percentage in each period where the led
//  170  *                       will be on
//  171  *          period     - length of each cycle in milliseconds
//  172  *
//  173  * @return  None
//  174  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  175 void HalLedBlink (uint8 leds, uint8 numBlinks, uint8 percent, uint16 period)
HalLedBlink:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function HalLedBlink
        CODE
//  176 {
        FUNCALL HalLedBlink, osal_GetSystemClock
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLedBlink, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLedBlink, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLedBlink, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLedBlink, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 2,R1
        MOV     ?V0 + 3,R2
        MOV     ?V0 + 4,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  177 #if (defined (BLINK_LEDS)) && (HAL_LED == TRUE)
//  178   uint8 led;
//  179   HalLedControl_t *sts;
//  180 
//  181   if (leds && percent && period)
        MOV     A,R1
        JNZ     $+5
        LJMP    ??HalLedBlink_0 & 0xFFFF
        MOV     A,R3
        JNZ     $+5
        LJMP    ??HalLedBlink_0 & 0xFFFF
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??HalLedBlink_0 & 0xFFFF
//  182   {
//  183     if (percent < 100)
        MOV     A,R3
        CLR     C
        SUBB    A,#0x64
        JC      $+5
        LJMP    ??HalLedBlink_1 & 0xFFFF
//  184     {
//  185       led = HAL_LED_1;
        MOV     ?V0 + 5,#0x1
//  186       leds &= HAL_LED_ALL;
        ANL     ?V0 + 2,#0xf
//  187       sts = HalLedStatusControl.HalLedControlTable;
        MOV     ?V0 + 0,#HalLedStatusControl & 0xff
        MOV     ?V0 + 1,#(HalLedStatusControl >> 8) & 0xff
        SJMP    ??HalLedBlink_2
//  188 
//  189       while (leds)
//  190       {
//  191         if (leds & led)
??HalLedBlink_3:
        ANL     A,?V0 + 5
        JZ      ??HalLedBlink_4
//  192         {
//  193           /* Store the current state of the led before going to blinking if not already blinking */
//  194           if(sts->mode < HAL_LED_MODE_BLINK )
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x2
        JNC     ??HalLedBlink_5
//  195           	preBlinkState |= (led & HalLedState);
        MOV     DPTR,#HalLedState
        MOVX    A,@DPTR
        ANL     A,?V0 + 5
        MOV     R0,A
        MOV     DPTR,#preBlinkState
        MOVX    A,@DPTR
        ORL     A,R0
        MOVX    @DPTR,A
//  196 
//  197           sts->mode  = HAL_LED_MODE_OFF;                    /* Stop previous blink */
??HalLedBlink_5:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        CLR     A
        MOVX    @DPTR,A
//  198           sts->time  = period;                              /* Time for one on/off cycle */
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ?Subroutine1 & 0xFFFF
//  199           sts->onPct = percent;                             /* % of cycle LED is on */
??CrossCallReturnLabel_0:
        INC     DPTR
        MOV     A,?V0 + 4
        LCALL   ?Subroutine1 & 0xFFFF
//  200           sts->todo  = numBlinks;                           /* Number of blink cycles */
??CrossCallReturnLabel_1:
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
//  201           if (!numBlinks) sts->mode |= HAL_LED_MODE_FLASH;  /* Continuous */
        JNZ     ??HalLedBlink_6
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOV     A,#0x4
        MOVX    @DPTR,A
//  202           sts->next = osal_GetSystemClock();                /* Start now */
??HalLedBlink_6:
        ; Setup parameters for call to function osal_GetSystemClock
        LCALL   ??osal_GetSystemClock?relay
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?XSTORE_R2345
//  203           sts->mode |= HAL_LED_MODE_BLINK;                  /* Enable blinking */
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.1
        MOVX    @DPTR,A
//  204           leds ^= led;
        MOV     A,?V0 + 5
        XRL     ?V0 + 2,A
//  205         }
//  206         led <<= 1;
??HalLedBlink_4:
        MOV     A,?V0 + 5
        CLR     C
        RLC     A
        MOV     ?V0 + 5,A
//  207         sts++;
        MOV     A,?V0 + 0
        ADD     A,#0x9
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
//  208       }
??HalLedBlink_2:
        MOV     A,?V0 + 2
        JNZ     ??HalLedBlink_3
//  209       // Cancel any overlapping timer for blink events
//  210       osal_stop_timerEx(Hal_TaskID, HAL_LED_BLINK_EVENT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#Hal_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
//  211       osal_set_event (Hal_TaskID, HAL_LED_BLINK_EVENT);
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#Hal_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
        SJMP    ??HalLedBlink_7
//  212     }
//  213     else
//  214     {
//  215       HalLedSet (leds, HAL_LED_MODE_ON);                    /* >= 100%, turn on */
??HalLedBlink_1:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        SJMP    ??HalLedBlink_8
//  216     }
//  217   }
//  218   else
//  219   {
//  220     HalLedSet (leds, HAL_LED_MODE_OFF);                     /* No on time, turn off */
??HalLedBlink_0:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
??HalLedBlink_8:
        LCALL   ??HalLedSet?relay
//  221   }
//  222 #elif (HAL_LED == TRUE)
//  223   percent = (leds & HalLedState) ? HAL_LED_MODE_OFF : HAL_LED_MODE_ON;
//  224   HalLedOnOff (leds, percent);                              /* Toggle */
//  225 #else
//  226   // HAL LED is disabled, suppress unused argument warnings
//  227   (void) leds;
//  228   (void) numBlinks;
//  229   (void) percent;
//  230   (void) period;
//  231 #endif /* BLINK_LEDS && HAL_LED */
//  232 }
??HalLedBlink_7:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5
//  233 
//  234 #if (HAL_LED == TRUE)
//  235 /***************************************************************************************************
//  236  * @fn      HalLedUpdate
//  237  *
//  238  * @brief   Update leds to work with blink
//  239  *
//  240  * @param   none
//  241  *
//  242  * @return  none
//  243  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  244 void HalLedUpdate (void)
HalLedUpdate:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function HalLedUpdate
        CODE
//  245 {
        FUNCALL HalLedUpdate, osal_GetSystemClock
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLedUpdate, HalLedOnOff
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLedUpdate, HalLedOnOff
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLedUpdate, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLedUpdate, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
//  246   uint8 led;
//  247   uint8 pct;
//  248   uint8 leds;
//  249   HalLedControl_t *sts;
//  250   uint32 time;
//  251   uint16 next;
//  252   uint16 wait;
//  253 
//  254   next = 0;
        MOV     ?V0 + 12,#0x0
        MOV     ?V0 + 13,#0x0
//  255   led  = HAL_LED_1;
        MOV     ?V0 + 14,#0x1
//  256   leds = HAL_LED_ALL;
        MOV     ?V0 + 15,#0xf
//  257   sts = HalLedStatusControl.HalLedControlTable;
        MOV     R6,#HalLedStatusControl & 0xff
        MOV     R7,#(HalLedStatusControl >> 8) & 0xff
//  258 
//  259   /* Check if sleep is active or not */
//  260   if (!HalLedStatusControl.sleepActive)
        MOV     DPTR,#HalLedStatusControl + 36
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??HalLedUpdate_0 & 0xFFFF
//  261   {
//  262     while (leds)
//  263     {
//  264       if (leds & led)
??HalLedUpdate_1:
        MOV     A,?V0 + 15
        ANL     A,?V0 + 14
        JNZ     $+5
        LJMP    ??HalLedUpdate_2 & 0xFFFF
//  265       {
//  266         if (sts->mode & HAL_LED_MODE_BLINK)
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JC      $+5
        LJMP    ??HalLedUpdate_3 & 0xFFFF
//  267         {
//  268           time = osal_GetSystemClock();
        ; Setup parameters for call to function osal_GetSystemClock
        LCALL   ??osal_GetSystemClock?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
//  269           if (time >= sts->next)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     R0,#?V0 + 4
        LCALL   ?UL_GE_X
        MOV     DPL,R6
        MOV     DPH,R7
        JC      $+5
        LJMP    ??HalLedUpdate_4 & 0xFFFF
//  270           {
//  271             if (sts->mode & HAL_LED_MODE_ON)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        INC     DPTR
        JNC     ??HalLedUpdate_5
//  272             {
//  273               pct = 100 - sts->onPct;               /* Percentage of cycle for off */
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x64
        CLR     C
        SUBB    A,R0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  274               sts->mode &= ~HAL_LED_MODE_ON;        /* Say it's not on */
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.0
        MOVX    @DPTR,A
//  275               HalLedOnOff (led, HAL_LED_MODE_OFF);  /* Turn it off */
        ; Setup parameters for call to function HalLedOnOff
        MOV     R2,#0x0
        MOV     R1,?V0 + 14
        LCALL   ??HalLedOnOff?relay
//  276 
//  277               if (!(sts->mode & HAL_LED_MODE_FLASH))
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.2
        JC      ??HalLedUpdate_6
//  278               {
//  279                 sts->todo--;                        /* Not continuous, reduce count */
        INC     DPTR
        MOVX    A,@DPTR
        DEC     A
??HalLedUpdate_7:
        MOVX    @DPTR,A
        SJMP    ??HalLedUpdate_6
//  280               }
//  281             }            
//  282             else if ( (!sts->todo) && !(sts->mode & HAL_LED_MODE_FLASH) )
??HalLedUpdate_5:
        MOVX    A,@DPTR
        JNZ     ??HalLedUpdate_8
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.2
        JC      ??HalLedUpdate_8
//  283             {
//  284               sts->mode ^= HAL_LED_MODE_BLINK;      /* No more blinks */  
        XRL     A,#0x2
        SJMP    ??HalLedUpdate_7
//  285             }            
//  286             else
//  287             {
//  288               pct = sts->onPct;                     /* Percentage of cycle for on */
??HalLedUpdate_8:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  289               sts->mode |= HAL_LED_MODE_ON;         /* Say it's on */
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.0
        MOVX    @DPTR,A
//  290               HalLedOnOff (led, HAL_LED_MODE_ON);   /* Turn it on */
        ; Setup parameters for call to function HalLedOnOff
        MOV     R2,#0x1
        MOV     R1,?V0 + 14
        LCALL   ??HalLedOnOff?relay
//  291             }
//  292             if (sts->mode & HAL_LED_MODE_BLINK)
??HalLedUpdate_6:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     ??HalLedUpdate_9
//  293             {
//  294               wait = (((uint32)pct * (uint32)sts->time) / 100);
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        CLR     A
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 9,A
        CLR     A
        MOV     ?V0 + 10,A
        MOV     ?V0 + 11,A
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?L_MUL
        MOV     DPTR,#__Constant_64
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?UL_DIV_MOD
//  295               sts->next = time + wait;
        MOV     ?V0 + 8,?V0 + 0
        MOV     ?V0 + 9,?V0 + 1
        CLR     A
        MOV     ?V0 + 10,A
        MOV     ?V0 + 11,A
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?L_ADD
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 5
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 7
??HalLedUpdate_10:
        MOVX    @DPTR,A
        SJMP    ??HalLedUpdate_11
//  296             }
//  297             else
//  298             {
//  299               /* no more blink, no more wait */
//  300               wait = 0;
??HalLedUpdate_9:
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
//  301               /* After blinking, set the LED back to the state before it blinks */
//  302               HalLedSet (led, ((preBlinkState & led)!=0)?HAL_LED_MODE_ON:HAL_LED_MODE_OFF);
        MOV     DPTR,#preBlinkState
        MOVX    A,@DPTR
        ANL     A,?V0 + 14
        JZ      ??HalLedUpdate_12
        MOV     R2,#0x1
        SJMP    ??HalLedUpdate_13
??HalLedUpdate_12:
        MOV     R2,#0x0
??HalLedUpdate_13:
        ; Setup parameters for call to function HalLedSet
        MOV     R1,?V0 + 14
        LCALL   ??HalLedSet?relay
//  303               /* Clear the saved bit */
//  304               preBlinkState &= (led ^ 0xFF);
        MOV     A,#-0x1
        XRL     A,?V0 + 14
        MOV     R0,A
        MOV     DPTR,#preBlinkState
        MOVX    A,@DPTR
        ANL     A,R0
        SJMP    ??HalLedUpdate_10
//  305             }
//  306           }
//  307           else
//  308           {
//  309             wait = sts->next - time;  /* Time left */
??HalLedUpdate_4:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,?V0 + 4
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        SUBB    A,?V0 + 5
        MOV     ?V0 + 1,A
//  310           }
//  311 
//  312           if (!next || ( wait && (wait < next) ))
??HalLedUpdate_11:
        MOV     A,?V0 + 12
        ORL     A,?V0 + 13
        JZ      ??HalLedUpdate_14
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??HalLedUpdate_3
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,?V0 + 12
        MOV     A,?V0 + 1
        SUBB    A,?V0 + 13
        JNC     ??HalLedUpdate_3
//  313           {
//  314             next = wait;
??HalLedUpdate_14:
        MOV     ?V0 + 12,?V0 + 0
        MOV     ?V0 + 13,?V0 + 1
//  315           }
//  316         }
//  317         leds ^= led;
??HalLedUpdate_3:
        MOV     A,?V0 + 14
        XRL     ?V0 + 15,A
//  318       }
//  319       led <<= 1;
??HalLedUpdate_2:
        MOV     A,?V0 + 14
        CLR     C
        RLC     A
        MOV     ?V0 + 14,A
//  320       sts++;
        MOV     A,R6
        ADD     A,#0x9
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  321     }
        MOV     A,?V0 + 15
        JZ      $+5
        LJMP    ??HalLedUpdate_1 & 0xFFFF
//  322 
//  323     if (next)
        MOV     A,?V0 + 12
        ORL     A,?V0 + 13
        JZ      ??HalLedUpdate_0
//  324     {
//  325       osal_start_timerEx(Hal_TaskID, HAL_LED_BLINK_EVENT, next);   /* Schedule event */
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,?V0 + 12
        MOV     R5,?V0 + 13
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#Hal_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  326     }
//  327   }
//  328 }
??HalLedUpdate_0:
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock6
//  329 
//  330 /***************************************************************************************************
//  331  * @fn      HalLedOnOff
//  332  *
//  333  * @brief   Turns specified LED ON or OFF
//  334  *
//  335  * @param   leds - LED bit mask
//  336  *          mode - LED_ON,LED_OFF,
//  337  *
//  338  * @return  none
//  339  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  340 void HalLedOnOff (uint8 leds, uint8 mode)
HalLedOnOff:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function HalLedOnOff
        CODE
//  341 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  342   if (leds & HAL_LED_1)
        MOV     A,R1
        MOV     C,0xE0 /* A   */.0
        JNC     ??HalLedOnOff_0
//  343   {
//  344     if (mode == HAL_LED_MODE_ON)
        MOV     A,#0x1
        XRL     A,R2
        JNZ     ??HalLedOnOff_1
//  345     {
//  346       HAL_TURN_ON_LED1();
        CLR     0x90.6
        SJMP    ??HalLedOnOff_0
//  347     }
//  348     else
//  349     {
//  350       HAL_TURN_OFF_LED1();
??HalLedOnOff_1:
        SETB    0x90.6
//  351     }
//  352   }
//  353 
//  354   if (leds & HAL_LED_2)
??HalLedOnOff_0:
        MOV     A,R1
        MOV     C,0xE0 /* A   */.1
        JNC     ??HalLedOnOff_2
//  355   {
//  356     if (mode == HAL_LED_MODE_ON)
        MOV     A,#0x1
        XRL     A,R2
        JNZ     ??HalLedOnOff_3
//  357     {
//  358       HAL_TURN_ON_LED2();
        CLR     0x90.5
        SJMP    ??HalLedOnOff_2
//  359     }
//  360     else
//  361     {
//  362       HAL_TURN_OFF_LED2();
??HalLedOnOff_3:
        SETB    0x90.5
//  363     }
//  364   }
//  365 
//  366   if (leds & HAL_LED_3)
??HalLedOnOff_2:
        MOV     A,R1
        MOV     C,0xE0 /* A   */.2
        JNC     ??HalLedOnOff_4
//  367   {
//  368     if (mode == HAL_LED_MODE_ON)
        MOV     A,#0x1
        XRL     A,R2
        JNZ     ??HalLedOnOff_5
//  369     {
//  370       HAL_TURN_ON_LED3();
        CLR     0x90.4
        SJMP    ??HalLedOnOff_4
//  371     }
//  372     else
//  373     {
//  374       HAL_TURN_OFF_LED3();
??HalLedOnOff_5:
        SETB    0x90.4
//  375     }
//  376   }
//  377 
//  378   if (leds & HAL_LED_4)
??HalLedOnOff_4:
        MOV     A,R1
        MOV     C,0xE0 /* A   */.3
        JNC     ??HalLedOnOff_6
//  379   {
//  380     if (mode == HAL_LED_MODE_ON)
        MOV     A,#0x1
        XRL     A,R2
        JNZ     ??HalLedOnOff_7
//  381     {
//  382       HAL_TURN_ON_LED4();
        CLR     0x90.6
        SJMP    ??HalLedOnOff_8
//  383     }
//  384     else
//  385     {
//  386       HAL_TURN_OFF_LED4();
??HalLedOnOff_7:
        SETB    0x90.6
//  387     }
//  388   }
//  389 
//  390   /* Remember current state */
//  391   if (mode)
??HalLedOnOff_6:
        MOV     A,R2
        JZ      ??HalLedOnOff_9
//  392   {
//  393     HalLedState |= leds;
??HalLedOnOff_8:
        MOV     DPTR,#HalLedState
        MOVX    A,@DPTR
        ORL     A,R1
        SJMP    ??HalLedOnOff_10
//  394   }
//  395   else
//  396   {
//  397     HalLedState &= (leds ^ 0xFF);
??HalLedOnOff_9:
        MOV     A,#-0x1
        XRL     A,R1
        MOV     R0,A
        MOV     DPTR,#HalLedState
        MOVX    A,@DPTR
        ANL     A,R0
//  398   }
??HalLedOnOff_10:
        SJMP    ??Subroutine2_0
        CFI EndBlock cfiBlock7
        REQUIRE _A_P1
//  399 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOV     DPTR,#HalLedStatusControl + 36
        CLR     A
        CFI EndBlock cfiBlock8
        REQUIRE ??Subroutine2_0
        ; // Fall through to label ??Subroutine2_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine2_0:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock9
        REQUIRE ??Subroutine3_0
        ; // Fall through to label ??Subroutine3_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine3_0:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock10
//  400 #endif /* HAL_LED */
//  401 
//  402 /***************************************************************************************************
//  403  * @fn      HalGetLedState
//  404  *
//  405  * @brief   Dim LED2 - Dim (set level) of LED2
//  406  *
//  407  * @param   none
//  408  *
//  409  * @return  led state
//  410  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  411 uint8 HalLedGetState ()
HalLedGetState:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function HalLedGetState
        CODE
//  412 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  413 #if (HAL_LED == TRUE)
//  414   return HalLedState;
        MOV     DPTR,#HalLedState
        MOVX    A,@DPTR
        MOV     R1,A
        SJMP    ??Subroutine3_0
        CFI EndBlock cfiBlock11
//  415 #else
//  416   return 0;
//  417 #endif
//  418 }
//  419 
//  420 /***************************************************************************************************
//  421  * @fn      HalLedEnterSleep
//  422  *
//  423  * @brief   Store current LEDs state before sleep
//  424  *
//  425  * @param   none
//  426  *
//  427  * @return  none
//  428  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  429 void HalLedEnterSleep( void )
HalLedEnterSleep:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function HalLedEnterSleep
        CODE
//  430 {
        FUNCALL HalLedEnterSleep, HalLedOnOff
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  431 #ifdef BLINK_LEDS
//  432   /* Sleep ON */
//  433   HalLedStatusControl.sleepActive = TRUE;
        MOV     DPTR,#HalLedStatusControl + 36
        MOV     A,#0x1
        MOVX    @DPTR,A
//  434 #endif /* BLINK_LEDS */
//  435 
//  436 #if (HAL_LED == TRUE)
//  437   /* Save the state of each led */
//  438   HalSleepLedState = 0;
//  439   HalSleepLedState |= HAL_STATE_LED1();
        MOV     A,0x90
        MOV     R3,A
//  440   HalSleepLedState |= HAL_STATE_LED2() << 1;
        MOV     A,0x90
        MOV     R0,A
//  441   HalSleepLedState |= HAL_STATE_LED3() << 2;
        MOV     A,0x90
        MOV     R1,A
//  442   HalSleepLedState |= HAL_STATE_LED4() << 3;
        MOV     C,0x90.6
        CLR     A
        RLC     A
        RLC     A
        RLC     A
        RLC     A
        XRL     A,#0x8
        MOV     R2,A
        MOV     A,R1
        MOV     C,0xE0 /* A   */.4
        CLR     A
        RLC     A
        RLC     A
        RLC     A
        XRL     A,#0x4
        MOV     R1,A
        MOV     A,R0
        MOV     C,0xE0 /* A   */.5
        CLR     A
        RLC     A
        RLC     A
        XRL     A,#0x2
        MOV     R0,A
        SETB    B.0
        MOV     A,R3
        MOV     C,0xE0 /* A   */.6
        JNB     B.0,??HalLedEnterSleep_0
        CPL     C
??HalLedEnterSleep_0:
        CLR     A
        RLC     A
        ORL     A,R0
        ORL     A,R1
        ORL     A,R2
        MOV     DPTR,#HalSleepLedState
        MOVX    @DPTR,A
//  443 
//  444   /* TURN OFF all LEDs to save power */
//  445   HalLedOnOff (HAL_LED_ALL, HAL_LED_MODE_OFF);
        ; Setup parameters for call to function HalLedOnOff
        MOV     R2,#0x0
        MOV     R1,#0xf
        LCALL   ??HalLedOnOff?relay
//  446 #endif /* HAL_LED */
//  447 
//  448 }
        SJMP    ??Subroutine3_0
        CFI EndBlock cfiBlock12
        REQUIRE _A_P1
//  449 
//  450 /***************************************************************************************************
//  451  * @fn      HalLedExitSleep
//  452  *
//  453  * @brief   Restore current LEDs state after sleep
//  454  *
//  455  * @param   none
//  456  *
//  457  * @return  none
//  458  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  459 void HalLedExitSleep( void )
HalLedExitSleep:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function HalLedExitSleep
        CODE
//  460 {
        FUNCALL HalLedExitSleep, HalLedOnOff
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLedExitSleep, HalLedUpdate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  461 #if (HAL_LED == TRUE)
//  462   /* Load back the saved state */
//  463   HalLedOnOff(HalSleepLedState, HAL_LED_MODE_ON);
        ; Setup parameters for call to function HalLedOnOff
        MOV     R2,#0x1
        MOV     DPTR,#HalSleepLedState
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??HalLedOnOff?relay
//  464 
//  465   /* Restart - This takes care BLINKING LEDS */
//  466   HalLedUpdate();
        ; Setup parameters for call to function HalLedUpdate
        LCALL   ??HalLedUpdate?relay
//  467 #endif /* HAL_LED */
//  468 
//  469 #ifdef BLINK_LEDS
//  470   /* Sleep OFF */
//  471   HalLedStatusControl.sleepActive = FALSE;
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock13
//  472 #endif /* BLINK_LEDS */
//  473 }

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_64:
        DD 100

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLedInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLedInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLedSet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLedSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLedBlink?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLedBlink

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLedUpdate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLedUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLedOnOff?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLedOnOff

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLedGetState?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLedGetState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLedEnterSleep?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLedEnterSleep

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLedExitSleep?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLedExitSleep

        END
//  474 
//  475 /***************************************************************************************************
//  476 ***************************************************************************************************/
//  477 
//  478 
//  479 
//  480 
// 
// 1 011 bytes in segment BANKED_CODE
//    48 bytes in segment BANK_RELAYS
//     1 byte  in segment SFR_AN
//     4 bytes in segment XDATA_ROM_C
//    40 bytes in segment XDATA_Z
// 
// 1 059 bytes of CODE  memory
//     0 bytes of CONST memory (+ 4 bytes shared)
//     0 bytes of DATA  memory (+ 1 byte  shared)
//    40 bytes of XDATA memory
//
//Errors: none
//Warnings: none
