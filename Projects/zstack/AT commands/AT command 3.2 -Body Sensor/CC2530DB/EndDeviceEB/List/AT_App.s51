///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        26/Aug/2015  19:20:28 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  S:\zigbee\Myzigbe\version 3.0 for                 /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\Source\AT_App.c                      /
//    Command line       =  -f "S:\zigbee\Myzigbe\version 3.0 for             /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\..\..\..\Tools\CC2530DB\f8w /
//                          Endev.cfg" (-DCPU32MHZ -DROOT=__near_func         /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f "S:\zigbee\Myzigbe\version /
//                           3.0 for test\Projects\zstack\AT commands\AT      /
//                          command 3.2 -Body Sensor\CC2530DB\..\..\..\Tools\ /
//                          CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO -DSECURE=0   /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "S:\zigbee\Myzigbe\version /
//                           3.0 for test\Projects\zstack\AT commands\AT      /
//                          command 3.2 -Body Sensor\Source\AT_App.c" -D      /
//                          ZIGBEEPRO -D NWK_AUTO_POLL -D HAL_UART=TRUE -D    /
//                          HOLD_AUTO_START -D NV_RESTORE -D REFLECTOR -D     /
//                          HAL_UART_ISR=1 -D HAL_UART_DMA=0 -D               /
//                          xHAL_UART_ISR_TX_MAX=200 -D xPOWER_SAVING -D      /
//                          ZCL_READ -D ZCL_WRITE -D ZCL_IDENTIFY -D          /
//                          ZCL_ON_OFF -D ZCL_DISCOVER -D xZTOOL_P1 -D        /
//                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D       /
//                          xLCD_SUPPORTED=DEBUG -D                           /
//                          xMT_UART_DEFAULT_OVERFLOW=FALSE -lC               /
//                          "S:\zigbee\Myzigbe\version 3.0 for                /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\EndDeviceEB\List\" -lA      /
//                          "S:\zigbee\Myzigbe\version 3.0 for                /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\EndDeviceEB\List\"          /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          "S:\zigbee\Myzigbe\version 3.0 for                /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\EndDeviceEB\Obj\" -e        /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "S:\zigbee\Myzigbe\version 3.0 for                /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\" -I                        /
//                          "S:\zigbee\Myzigbe\version 3.0 for                /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\..\Source\" -I              /
//                          "S:\zigbee\Myzigbe\version 3.0 for                /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\..\Source\hal\" -I          /
//                          "S:\zigbee\Myzigbe\version 3.0 for                /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\..\Source\Modified\" -I     /
//                          "S:\zigbee\Myzigbe\version 3.0 for                /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\..\..\..\ZMain\TI2530DB\"   /
//                          -I "S:\zigbee\Myzigbe\version 3.0 for             /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\h /
//                          al\include\" -I "S:\zigbee\Myzigbe\version 3.0    /
//                          for test\Projects\zstack\AT commands\AT command   /
//                          3.2 -Body Sensor\CC2530DB\..\..\..\..\..\Componen /
//                          ts\hal\target\CC2530EB\" -I                       /
//                          "S:\zigbee\Myzigbe\version 3.0 for                /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\m /
//                          ac\include\" -I "S:\zigbee\Myzigbe\version 3.0    /
//                          for test\Projects\zstack\AT commands\AT command   /
//                          3.2 -Body Sensor\CC2530DB\..\..\..\..\..\Componen /
//                          ts\mac\high_level\" -I "S:\zigbee\Myzigbe\version /
//                           3.0 for test\Projects\zstack\AT commands\AT      /
//                          command 3.2 -Body Sensor\CC2530DB\..\..\..\..\..\ /
//                          Components\mac\low_level\srf04\" -I               /
//                          "S:\zigbee\Myzigbe\version 3.0 for                /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\m /
//                          ac\low_level\srf04\single_chip\" -I               /
//                          "S:\zigbee\Myzigbe\version 3.0 for                /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\m /
//                          t\" -I "S:\zigbee\Myzigbe\version 3.0 for         /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\o /
//                          sal\include\" -I "S:\zigbee\Myzigbe\version 3.0   /
//                          for test\Projects\zstack\AT commands\AT command   /
//                          3.2 -Body Sensor\CC2530DB\..\..\..\..\..\Componen /
//                          ts\services\saddr\" -I "S:\zigbee\Myzigbe\version /
//                           3.0 for test\Projects\zstack\AT commands\AT      /
//                          command 3.2 -Body Sensor\CC2530DB\..\..\..\..\..\ /
//                          Components\services\sdata\" -I                    /
//                          "S:\zigbee\Myzigbe\version 3.0 for                /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\s /
//                          tack\af\" -I "S:\zigbee\Myzigbe\version 3.0 for   /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\s /
//                          tack\nwk\" -I "S:\zigbee\Myzigbe\version 3.0 for  /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\s /
//                          tack\sapi\" -I "S:\zigbee\Myzigbe\version 3.0     /
//                          for test\Projects\zstack\AT commands\AT command   /
//                          3.2 -Body Sensor\CC2530DB\..\..\..\..\..\Componen /
//                          ts\stack\sec\" -I "S:\zigbee\Myzigbe\version 3.0  /
//                          for test\Projects\zstack\AT commands\AT command   /
//                          3.2 -Body Sensor\CC2530DB\..\..\..\..\..\Componen /
//                          ts\stack\sys\" -I "S:\zigbee\Myzigbe\version 3.0  /
//                          for test\Projects\zstack\AT commands\AT command   /
//                          3.2 -Body Sensor\CC2530DB\..\..\..\..\..\Componen /
//                          ts\stack\zdo\" -I "S:\zigbee\Myzigbe\version 3.0  /
//                          for test\Projects\zstack\AT commands\AT command   /
//                          3.2 -Body Sensor\CC2530DB\..\..\..\..\..\Componen /
//                          ts\stack\zcl\" -I "S:\zigbee\Myzigbe\version 3.0  /
//                          for test\Projects\zstack\AT commands\AT command   /
//                          3.2 -Body Sensor\CC2530DB\..\..\..\..\..\Componen /
//                          ts\zmac\" -I "S:\zigbee\Myzigbe\version 3.0 for   /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\..\..\..\..\..\Components\z /
//                          mac\f8w\" -Ohz --require_prototypes               /
//    List file          =  S:\zigbee\Myzigbe\version 3.0 for                 /
//                          test\Projects\zstack\AT commands\AT command 3.2   /
//                          -Body Sensor\CC2530DB\EndDeviceEB\List\AT_App.s51 /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME AT_App

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??AT_App_HandleKeys?relay
        FUNCTION ??AT_App_HandleKeys?relay,0203H
        PUBLIC ??AT_App_Init?relay
        FUNCTION ??AT_App_Init?relay,0203H
        PUBLIC ??AT_App_Power_saving_exp?relay
        FUNCTION ??AT_App_Power_saving_exp?relay,0203H
        PUBLIC ??AT_App_Power_saving_exp_stop?relay
        FUNCTION ??AT_App_Power_saving_exp_stop?relay,0203H
        PUBLIC ??AT_App_ProcessEvent?relay
        FUNCTION ??AT_App_ProcessEvent?relay,0203H
        FUNCTION ??AT_App_process_Power_Saving_Exp_Evt?relay,0203H
        PUBLIC ??AT_af_ep_list?relay
        FUNCTION ??AT_af_ep_list?relay,0203H
        PUBLIC ??AT_af_ep_num?relay
        FUNCTION ??AT_af_ep_num?relay,0203H
        PUBLIC ??AT_af_get_ep?relay
        FUNCTION ??AT_af_get_ep?relay,0203H
        PUBLIC ??AT_af_register_ep?relay
        FUNCTION ??AT_af_register_ep?relay,0203H
        PUBLIC ??AT_af_remove_ep?relay
        FUNCTION ??AT_af_remove_ep?relay,0203H
        PUBLIC ??AT_handleEntryEvt?relay
        FUNCTION ??AT_handleEntryEvt?relay,0203H
        PUBLIC ??AT_handleZCL_EP?relay
        FUNCTION ??AT_handleZCL_EP?relay,0203H
        PUBLIC AT_App_Cmd_POWER_SAVING_EXP
        PUBLIC AT_App_HandleKeys
        FUNCTION AT_App_HandleKeys,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC AT_App_Init
        FUNCTION AT_App_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC AT_App_Power_saving_exp
        FUNCTION AT_App_Power_saving_exp,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC AT_App_Power_saving_exp_stop
        FUNCTION AT_App_Power_saving_exp_stop,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC AT_App_ProcessEvent
        FUNCTION AT_App_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC AT_App_TaskID
        FUNCTION AT_App_process_Power_Saving_Exp_Evt,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC AT_af_ep_list
        FUNCTION AT_af_ep_list,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC AT_af_ep_num
        FUNCTION AT_af_ep_num,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC AT_af_get_ep
        FUNCTION AT_af_get_ep,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC AT_af_register_ep
        FUNCTION AT_af_register_ep,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC AT_af_remove_ep
        FUNCTION AT_af_remove_ep,0203H
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC AT_handleEntryEvt
        FUNCTION AT_handleEntryEvt,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 15, STACK
        PUBLIC AT_handleZCL_EP
        FUNCTION AT_handleZCL_EP,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 4, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBWEAK WDCTL
        PUBWEAK _A_IEN0
        PUBLIC removedEPList
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
AT_ZDO_Register     SYMBOL "AT_ZDO_Register"
AT_ONOFF_OUTPUT_Register SYMBOL "AT_ONOFF_OUTPUT_Register"
AT_AF_Register      SYMBOL "AT_AF_Register"
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
AT_ZCL_Init         SYMBOL "AT_ZCL_Init"
AT_UartInit         SYMBOL "AT_UartInit"
ZDOInitDevice       SYMBOL "ZDOInitDevice"
HalKeyConfig        SYMBOL "HalKeyConfig"
RegisterForKeys     SYMBOL "RegisterForKeys"
NLME_PermitJoiningRequest SYMBOL "NLME_PermitJoiningRequest"
osal_set_event      SYMBOL "osal_set_event"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
AT_ONOFF_OUTPUT_MessageMSGCB SYMBOL "AT_ONOFF_OUTPUT_MessageMSGCB"
AT_AF_MessageMSGCB  SYMBOL "AT_AF_MessageMSGCB"
AT_ZCL_ProcessIncomingMsg SYMBOL "AT_ZCL_ProcessIncomingMsg"
HalLedSet           SYMBOL "HalLedSet"
AT_ZDO_ProcessMsgCBs SYMBOL "AT_ZDO_ProcessMsgCBs"
AT_NV_ZCL_readEPStatus SYMBOL "AT_NV_ZCL_readEPStatus"
AT_ZCL_EP_ENABLE    SYMBOL "AT_ZCL_EP_ENABLE"
AT_Cmd_EPENABLE     SYMBOL "AT_Cmd_EPENABLE"
osal_nv_read        SYMBOL "osal_nv_read"
osal_nv_write       SYMBOL "osal_nv_write"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
zcl_SendCommand     SYMBOL "zcl_SendCommand"
AT_ZCL_ONOFF_SWITCH_OnOffCB SYMBOL "AT_ZCL_ONOFF_SWITCH_OnOffCB"
AT_ZCL_ONOFF_SWITCH_setting SYMBOL "AT_ZCL_ONOFF_SWITCH_setting"
AT_Cmd_ANNCE        SYMBOL "AT_Cmd_ANNCE"
AF_DataRequest      SYMBOL "AF_DataRequest"
AT_Cmd_AT_F         SYMBOL "AT_Cmd_AT_F"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
AT_AF_Cmd_send_simple_ SYMBOL "AT_AF_Cmd_send_simple_"
AT_HalUARTWrite     SYMBOL "AT_HalUARTWrite"
printf              SYMBOL "printf"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??AT_AF_Cmd_send_simple_?relay SYMBOL "?relay", AT_AF_Cmd_send_simple_
??AT_AF_MessageMSGCB?relay SYMBOL "?relay", AT_AF_MessageMSGCB
??AT_AF_Register?relay SYMBOL "?relay", AT_AF_Register
??AT_Cmd_ANNCE?relay SYMBOL "?relay", AT_Cmd_ANNCE
??AT_Cmd_AT_F?relay SYMBOL "?relay", AT_Cmd_AT_F
??AT_Cmd_EPENABLE?relay SYMBOL "?relay", AT_Cmd_EPENABLE
??AT_HalUARTWrite?relay SYMBOL "?relay", AT_HalUARTWrite
??AT_NV_ZCL_readEPStatus?relay SYMBOL "?relay", AT_NV_ZCL_readEPStatus
??AT_ONOFF_OUTPUT_MessageMSGCB?relay SYMBOL "?relay", AT_ONOFF_OUTPUT_MessageMSGCB
??AT_ONOFF_OUTPUT_Register?relay SYMBOL "?relay", AT_ONOFF_OUTPUT_Register
??AT_UartInit?relay SYMBOL "?relay", AT_UartInit
??AT_ZCL_EP_ENABLE?relay SYMBOL "?relay", AT_ZCL_EP_ENABLE
??AT_ZCL_Init?relay SYMBOL "?relay", AT_ZCL_Init
??AT_ZCL_ONOFF_SWITCH_OnOffCB?relay SYMBOL "?relay", AT_ZCL_ONOFF_SWITCH_OnOffCB
??AT_ZCL_ONOFF_SWITCH_setting?relay SYMBOL "?relay", AT_ZCL_ONOFF_SWITCH_setting
??AT_ZCL_ProcessIncomingMsg?relay SYMBOL "?relay", AT_ZCL_ProcessIncomingMsg
??AT_ZDO_ProcessMsgCBs?relay SYMBOL "?relay", AT_ZDO_ProcessMsgCBs
??AT_ZDO_Register?relay SYMBOL "?relay", AT_ZDO_Register
??HalKeyConfig?relay SYMBOL "?relay", HalKeyConfig
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??NLME_PermitJoiningRequest?relay SYMBOL "?relay", NLME_PermitJoiningRequest
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??ZDOInitDevice?relay SYMBOL "?relay", ZDOInitDevice
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_nv_read?relay SYMBOL "?relay", osal_nv_read
??osal_nv_write?relay SYMBOL "?relay", osal_nv_write
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??printf?relay      SYMBOL "?relay", printf
??zcl_SendCommand?relay SYMBOL "?relay", zcl_SendCommand
??zcl_registerForMsg?relay SYMBOL "?relay", zcl_registerForMsg
AT_App_HandleKeys   SYMBOL "AT_App_HandleKeys"
??AT_App_HandleKeys?relay SYMBOL "?relay", AT_App_HandleKeys
AT_App_Init         SYMBOL "AT_App_Init"
??AT_App_Init?relay SYMBOL "?relay", AT_App_Init
AT_App_Power_saving_exp SYMBOL "AT_App_Power_saving_exp"
??AT_App_Power_saving_exp?relay SYMBOL "?relay", AT_App_Power_saving_exp
AT_App_Power_saving_exp_stop SYMBOL "AT_App_Power_saving_exp_stop"
??AT_App_Power_saving_exp_stop?relay SYMBOL "?relay", AT_App_Power_saving_exp_stop
AT_App_ProcessEvent SYMBOL "AT_App_ProcessEvent"
??AT_App_ProcessEvent?relay SYMBOL "?relay", AT_App_ProcessEvent
AT_af_ep_list       SYMBOL "AT_af_ep_list"
??AT_af_ep_list?relay SYMBOL "?relay", AT_af_ep_list
AT_af_ep_num        SYMBOL "AT_af_ep_num"
??AT_af_ep_num?relay SYMBOL "?relay", AT_af_ep_num
AT_af_get_ep        SYMBOL "AT_af_get_ep"
??AT_af_get_ep?relay SYMBOL "?relay", AT_af_get_ep
AT_af_register_ep   SYMBOL "AT_af_register_ep"
??AT_af_register_ep?relay SYMBOL "?relay", AT_af_register_ep
AT_af_remove_ep     SYMBOL "AT_af_remove_ep"
??AT_af_remove_ep?relay SYMBOL "?relay", AT_af_remove_ep
AT_handleEntryEvt   SYMBOL "AT_handleEntryEvt"
??AT_handleEntryEvt?relay SYMBOL "?relay", AT_handleEntryEvt
AT_handleZCL_EP     SYMBOL "AT_handleZCL_EP"
??AT_handleZCL_EP?relay SYMBOL "?relay", AT_handleZCL_EP

        EXTERN AT_ZDO_Register
        FUNCTION AT_ZDO_Register,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_ONOFF_OUTPUT_Register
        FUNCTION AT_ONOFF_OUTPUT_Register,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_AF_Register
        FUNCTION AT_AF_Register,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_ZCL_Init
        FUNCTION AT_ZCL_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_UartInit
        FUNCTION AT_UartInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDOInitDevice
        FUNCTION ZDOInitDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalKeyConfig
        FUNCTION HalKeyConfig,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_PermitJoiningRequest
        FUNCTION NLME_PermitJoiningRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_ONOFF_OUTPUT_MessageMSGCB
        FUNCTION AT_ONOFF_OUTPUT_MessageMSGCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_AF_MessageMSGCB
        FUNCTION AT_AF_MessageMSGCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_ZCL_ProcessIncomingMsg
        FUNCTION AT_ZCL_ProcessIncomingMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_ZDO_ProcessMsgCBs
        FUNCTION AT_ZDO_ProcessMsgCBs,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_NV_ZCL_readEPStatus
        FUNCTION AT_NV_ZCL_readEPStatus,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_ZCL_EP_ENABLE
        FUNCTION AT_ZCL_EP_ENABLE,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_Cmd_EPENABLE
        FUNCTION AT_Cmd_EPENABLE,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendCommand
        FUNCTION zcl_SendCommand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_ZCL_ONOFF_SWITCH_OnOffCB
        FUNCTION AT_ZCL_ONOFF_SWITCH_OnOffCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_ZCL_ONOFF_SWITCH_setting
        FUNCTION AT_ZCL_ONOFF_SWITCH_setting,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_Cmd_ANNCE
        FUNCTION AT_Cmd_ANNCE,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_Cmd_AT_F
        FUNCTION AT_Cmd_AT_F,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_AF_Cmd_send_simple_
        FUNCTION AT_AF_Cmd_send_simple_,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_HalUARTWrite
        FUNCTION AT_HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN printf
        FUNCTION printf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??AT_AF_Cmd_send_simple_?relay
        FUNCTION ??AT_AF_Cmd_send_simple_?relay,00H
        EXTERN ??AT_AF_MessageMSGCB?relay
        FUNCTION ??AT_AF_MessageMSGCB?relay,00H
        EXTERN ??AT_AF_Register?relay
        FUNCTION ??AT_AF_Register?relay,00H
        EXTERN ??AT_Cmd_ANNCE?relay
        FUNCTION ??AT_Cmd_ANNCE?relay,00H
        EXTERN ??AT_Cmd_AT_F?relay
        FUNCTION ??AT_Cmd_AT_F?relay,00H
        EXTERN ??AT_Cmd_EPENABLE?relay
        FUNCTION ??AT_Cmd_EPENABLE?relay,00H
        EXTERN ??AT_HalUARTWrite?relay
        FUNCTION ??AT_HalUARTWrite?relay,00H
        EXTERN ??AT_NV_ZCL_readEPStatus?relay
        FUNCTION ??AT_NV_ZCL_readEPStatus?relay,00H
        EXTERN ??AT_ONOFF_OUTPUT_MessageMSGCB?relay
        FUNCTION ??AT_ONOFF_OUTPUT_MessageMSGCB?relay,00H
        EXTERN ??AT_ONOFF_OUTPUT_Register?relay
        FUNCTION ??AT_ONOFF_OUTPUT_Register?relay,00H
        EXTERN ??AT_UartInit?relay
        FUNCTION ??AT_UartInit?relay,00H
        EXTERN ??AT_ZCL_EP_ENABLE?relay
        FUNCTION ??AT_ZCL_EP_ENABLE?relay,00H
        EXTERN ??AT_ZCL_Init?relay
        FUNCTION ??AT_ZCL_Init?relay,00H
        EXTERN ??AT_ZCL_ONOFF_SWITCH_OnOffCB?relay
        FUNCTION ??AT_ZCL_ONOFF_SWITCH_OnOffCB?relay,00H
        EXTERN ??AT_ZCL_ONOFF_SWITCH_setting?relay
        FUNCTION ??AT_ZCL_ONOFF_SWITCH_setting?relay,00H
        EXTERN ??AT_ZCL_ProcessIncomingMsg?relay
        FUNCTION ??AT_ZCL_ProcessIncomingMsg?relay,00H
        EXTERN ??AT_ZDO_ProcessMsgCBs?relay
        FUNCTION ??AT_ZDO_ProcessMsgCBs?relay,00H
        EXTERN ??AT_ZDO_Register?relay
        FUNCTION ??AT_ZDO_Register?relay,00H
        EXTERN ??HalKeyConfig?relay
        FUNCTION ??HalKeyConfig?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??NLME_PermitJoiningRequest?relay
        FUNCTION ??NLME_PermitJoiningRequest?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??ZDOInitDevice?relay
        FUNCTION ??ZDOInitDevice?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_nv_read?relay
        FUNCTION ??osal_nv_read?relay,00H
        EXTERN ??osal_nv_write?relay
        FUNCTION ??osal_nv_write?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??printf?relay
        FUNCTION ??printf?relay,00H
        EXTERN ??zcl_SendCommand?relay
        FUNCTION ??zcl_SendCommand?relay,00H
        EXTERN ??zcl_registerForMsg?relay
        FUNCTION ??zcl_registerForMsg?relay,00H
        EXTERN AT_AF_TransID
        EXTERN AT_AF_epDesc
        EXTERN epList

// S:\zigbee\Myzigbe\version 3.0 for test\Projects\zstack\AT commands\AT command 3.2 -Body Sensor\Source\AT_App.c
//    1 /**************************************************************************************************
//    2   Filename:       AT_App.c
//    3 
//    4   Description:    AT command module
//    5   Author:         Xiao Wang
//    6 **************************************************************************************************/
//    7 #include "OSAL.h"
//    8 #include "OSAL_NV.h"
//    9 #include "ZGlobals.h"
//   10 #include "AF.h"
//   11 #include "aps_groups.h"
//   12 #include "ZDApp.h"
//   13 
//   14 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c9H
// unsigned char volatile __sfr WDCTL
WDCTL:
        DATA8
        DS 1
//   15 #include "ZDObject.h"
//   16 
//   17 #include "zcl.h"
//   18 #include "AT_ONOFF_output.h"
//   19 #include "AT_include.h"
//   20 #include "AT_ZCL_ONOFF_SWITCH.h"
//   21 #include "AT_printf.h"
//   22 
//   23 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   24 uint8 AT_App_TaskID;   // Task ID for internal task/event processing
AT_App_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   25                           // This variable will be received when
//   26                           // AT_App_Init() is called.
//   27 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   28 epList_t *removedEPList = NULL;  
removedEPList:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   29 AT_App_Cmd_POWER_SAVING_EXP_t AT_App_Cmd_POWER_SAVING_EXP={0,0,0};
AT_App_Cmd_POWER_SAVING_EXP:
        DS 6
        REQUIRE __INIT_XDATA_Z
//   30 /*********************************************************************
//   31  * LOCAL FUNCTIONS
//   32  *******************************************************************/
//   33 
//   34 uint8 AT_handleEntryEvt(void);
//   35 void AT_handleZCL_EP(void);
//   36 void AT_App_HandleKeys( uint8 shift, uint8 keys );
//   37 static void AT_App_process_Power_Saving_Exp_Evt(void);
//   38 
//   39 //initialize this task after the ZCL initialization, I have encounter the mistake that I initialized
//   40 //the task before the ZCL. this lead all the zcl layer work innormal.

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   41 void AT_App_Init(uint8 task_id ){
AT_App_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function AT_App_Init
        CODE
        FUNCALL AT_App_Init, AT_ZDO_Register
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_Init, AT_ONOFF_OUTPUT_Register
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_Init, AT_AF_Register
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_Init, AT_ZCL_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_Init, AT_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_Init, ZDOInitDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_Init, HalKeyConfig
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_Init, NLME_PermitJoiningRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_Init, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//   42   AT_App_TaskID=task_id;
        MOV     DPTR,#AT_App_TaskID
        MOVX    @DPTR,A
//   43   //ZDO_RegisterForZDOMsg( task_id, Device_annce );
//   44   AT_ZDO_Register(&AT_App_TaskID);
        ; Setup parameters for call to function AT_ZDO_Register
        MOV     R2,#AT_App_TaskID & 0xff
        MOV     R3,#(AT_App_TaskID >> 8) & 0xff
        LCALL   ??AT_ZDO_Register?relay
//   45   
//   46   AT_ONOFF_OUTPUT_Register(&AT_App_TaskID);
        ; Setup parameters for call to function AT_ONOFF_OUTPUT_Register
        MOV     R2,#AT_App_TaskID & 0xff
        MOV     R3,#(AT_App_TaskID >> 8) & 0xff
        LCALL   ??AT_ONOFF_OUTPUT_Register?relay
//   47   
//   48   //register AT command AF layer application
//   49   AT_AF_Register(&AT_App_TaskID);
        ; Setup parameters for call to function AT_AF_Register
        MOV     R2,#AT_App_TaskID & 0xff
        MOV     R3,#(AT_App_TaskID >> 8) & 0xff
        LCALL   ??AT_AF_Register?relay
//   50   
//   51   
//   52   // Register the Application to receive the unprocessed Foundation command/response messages
//   53   zcl_registerForMsg(task_id);
        ; Setup parameters for call to function zcl_registerForMsg
        MOV     A,R6
        MOV     R1,A
        LCALL   ??zcl_registerForMsg?relay
//   54   //Initialize the AT ZCL to send AT ZCL command
//   55   AT_ZCL_Init();
        ; Setup parameters for call to function AT_ZCL_Init
        LCALL   ??AT_ZCL_Init?relay
//   56   
//   57   
//   58   /*initialise AT_Uart*/
//   59   AT_UartInit(task_id);
        ; Setup parameters for call to function AT_UartInit
        MOV     A,R6
        MOV     R1,A
        LCALL   ??AT_UartInit?relay
//   60 
//   61 #if AT_MSG_SEND_MODE
//   62   AT_UartRegisterTaskID( task_id);
//   63 #endif
//   64   
//   65 #if defined ( HOLD_AUTO_START )
//   66   ZDOInitDevice(0);
        ; Setup parameters for call to function ZDOInitDevice
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??ZDOInitDevice?relay
//   67 #endif
//   68   
//   69   // Register for all key events - This app will handle all key events
//   70   HalKeyConfig (1, NULL);//enable interrupt
        ; Setup parameters for call to function HalKeyConfig
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R1,#0x1
        LCALL   ??HalKeyConfig?relay
//   71   RegisterForKeys( task_id );
        ; Setup parameters for call to function RegisterForKeys
        MOV     A,R6
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//   72   
//   73   NLME_PermitJoiningRequest(0);      //disable permit joining
        ; Setup parameters for call to function NLME_PermitJoiningRequest
        MOV     R1,#0x0
        LCALL   ??NLME_PermitJoiningRequest?relay
//   74   
//   75   osal_set_event(task_id, AT_ENTRY_EVENT);
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x0
        MOV     R3,#0x40
        MOV     A,R6
        MOV     R1,A
        LCALL   ??osal_set_event?relay
        CFI EndBlock cfiBlock0
//   76   
//   77 }
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//   78 
//   79 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   80 uint16 AT_App_ProcessEvent( uint8 task_id, uint16 events ){
AT_App_ProcessEvent:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function AT_App_ProcessEvent
        CODE
        FUNCALL AT_App_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_ProcessEvent, AT_App_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_ProcessEvent, AT_ONOFF_OUTPUT_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_ProcessEvent, AT_AF_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_ProcessEvent, AT_ZCL_ProcessIncomingMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_ProcessEvent, AT_ZDO_ProcessMsgCBs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_ProcessEvent, AT_handleZCL_EP
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_ProcessEvent, AT_handleEntryEvt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_ProcessEvent, AT_App_process_Power_Saving_Exp_Evt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//   81   
//   82   afIncomingMSGPacket_t *MSGpkt;
//   83   (void)task_id;  // Intentionally unreferenced parameter
//   84 
//   85   if ( events & SYS_EVENT_MSG )
        MOV     A,R3
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??AT_App_ProcessEvent_0 & 0xFFFF
//   86   {
//   87     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( AT_App_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??AT_App_ProcessEvent_1
//   88     while ( MSGpkt )
//   89     {
//   90       switch ( MSGpkt->hdr.event )
//   91       {
//   92         // Received when a messages is received (OTA) for this endpoint
//   93         case AF_INCOMING_MSG_CMD:
//   94           switch(MSGpkt->endPoint)
//   95           {
//   96             case AT_ONOFF_OUTPUT_ENDPOINT:
//   97               AT_ONOFF_OUTPUT_MessageMSGCB( MSGpkt );
//   98               break;
//   99             case AT_AF_ENDPOINT:
//  100               AT_AF_MessageMSGCB( MSGpkt );
//  101               break;
//  102               
//  103             default:
//  104               break;
//  105           }
//  106           break;
//  107           
//  108         case ZCL_INCOMING_MSG:
//  109           // Incoming ZCL Foundation command/response messages
//  110           AT_ZCL_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
//  111           break;
//  112           
//  113         // Received whenever the device changes state in the network
//  114         case ZDO_STATE_CHANGE:
//  115           // If the device has started up, notify the application
//  116           if (((osal_event_hdr_t *) MSGpkt)->status == DEV_END_DEVICE ||
//  117               ((osal_event_hdr_t *) MSGpkt)->status == DEV_ROUTER ||
//  118               ((osal_event_hdr_t *) MSGpkt)->status == DEV_ZB_COORD )
//  119           {
//  120             HalLedSet (HAL_LED_2, HAL_LED_MODE_ON);
//  121           }
//  122           else  if (((osal_event_hdr_t *) MSGpkt)->status == DEV_HOLD ||
//  123                   ((osal_event_hdr_t *) MSGpkt)->status == DEV_INIT)
//  124           {
//  125             HalLedSet ( HAL_LED_2, HAL_LED_MODE_FLASH );
//  126           }
//  127 #if AT_MSG_SEND_MODE
//  128         case AT_CMD_MSG:
//  129           //HalUARTWrite ( 0, " received \n", sizeof(" received \n") );
//  130           AT_HandleCMD(((atOSALSerialData_t*) MSGpkt)->msg);
//  131          break;
//  132 #endif
//  133         case ZDO_CB_MSG:
//  134             AT_ZDO_ProcessMsgCBs( (zdoIncomingMsg_t *)MSGpkt );
//  135           break;
//  136           
//  137         // Received when a key is pressed
//  138         case KEY_CHANGE:
//  139           AT_App_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
??AT_App_ProcessEvent_2:
        ; Setup parameters for call to function AT_App_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??AT_App_HandleKeys?relay
//  140           break;
//  141       }
//  142 
//  143       // Release the memory
//  144       osal_msg_deallocate( (uint8 *)MSGpkt );
??AT_App_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
//  145 
//  146       // Next - if one is available
//  147       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( AT_App_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??AT_App_ProcessEvent_1:
        MOV     DPTR,#AT_App_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??AT_App_ProcessEvent_4 & 0xFFFF
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??AT_App_ProcessEvent_5
        ADD     A,#-0x1a
        JZ      ??AT_App_ProcessEvent_6
        ADD     A,#0x74
        JZ      ??AT_App_ProcessEvent_2
        ADD     A,#-0x11
        JZ      ??AT_App_ProcessEvent_7
        ADD     A,#-0x2
        JZ      ??AT_App_ProcessEvent_8
        SJMP    ??AT_App_ProcessEvent_3
??AT_App_ProcessEvent_5:
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#0x37
        JZ      ??AT_App_ProcessEvent_9
        ADD     A,#-0x3
        JZ      ??AT_App_ProcessEvent_10
        SJMP    ??AT_App_ProcessEvent_3
??AT_App_ProcessEvent_9:
        ; Setup parameters for call to function AT_ONOFF_OUTPUT_MessageMSGCB
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??AT_ONOFF_OUTPUT_MessageMSGCB?relay
        SJMP    ??AT_App_ProcessEvent_3
??AT_App_ProcessEvent_10:
        ; Setup parameters for call to function AT_AF_MessageMSGCB
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??AT_AF_MessageMSGCB?relay
        SJMP    ??AT_App_ProcessEvent_3
??AT_App_ProcessEvent_6:
        ; Setup parameters for call to function AT_ZCL_ProcessIncomingMsg
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??AT_ZCL_ProcessIncomingMsg?relay
        SJMP    ??AT_App_ProcessEvent_3
??AT_App_ProcessEvent_7:
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x6
        JZ      ??AT_App_ProcessEvent_11
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??AT_App_ProcessEvent_11
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x9
        JNZ     ??AT_App_ProcessEvent_12
??AT_App_ProcessEvent_11:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        SJMP    ??AT_App_ProcessEvent_13
??AT_App_ProcessEvent_12:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??AT_App_ProcessEvent_14
        XRL     A,#0x1
        JNZ     ??AT_App_ProcessEvent_8
??AT_App_ProcessEvent_14:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
??AT_App_ProcessEvent_13:
        MOV     R1,#0x2
        LCALL   ??HalLedSet?relay
??AT_App_ProcessEvent_8:
        ; Setup parameters for call to function AT_ZDO_ProcessMsgCBs
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??AT_ZDO_ProcessMsgCBs?relay
        LJMP    ??AT_App_ProcessEvent_3 & 0xFFFF
//  148     }
//  149 
//  150     // return unprocessed events
//  151     return (events ^ SYS_EVENT_MSG);
??AT_App_ProcessEvent_4:
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        XRL     A,#0x80
??AT_App_ProcessEvent_15:
        MOV     R3,A
        SJMP    ??AT_App_ProcessEvent_16
//  152   }
//  153   else if( events & AT_ENTRY_EVENT){
??AT_App_ProcessEvent_0:
        MOV     A,R3
        ANL     A,#0x40
        JZ      ??AT_App_ProcessEvent_17
//  154     AT_handleZCL_EP();
        ; Setup parameters for call to function AT_handleZCL_EP
        LCALL   ??AT_handleZCL_EP?relay
//  155     AT_handleEntryEvt();
        ; Setup parameters for call to function AT_handleEntryEvt
        LCALL   ??AT_handleEntryEvt?relay
//  156     return (events ^ AT_ENTRY_EVENT);
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        XRL     A,#0x40
        SJMP    ??AT_App_ProcessEvent_15
//  157   }
//  158   else if( events & AT_POWER_SAVING_EXP_EVENT){
??AT_App_ProcessEvent_17:
        MOV     A,R3
        ANL     A,#0x10
        JZ      ??AT_App_ProcessEvent_18
//  159     AT_App_process_Power_Saving_Exp_Evt();
        ; Setup parameters for call to function AT_App_process_Power_Saving_Exp_Evt
        LCALL   ??AT_App_process_Power_Saving_Exp_Evt?relay
//  160     return (events ^ AT_POWER_SAVING_EXP_EVENT);
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        XRL     A,#0x10
        SJMP    ??AT_App_ProcessEvent_15
//  161   }else if( events & AT_RESET_EVENT ){
??AT_App_ProcessEvent_18:
        MOV     A,R3
        ANL     A,#0x20
        JZ      ??AT_App_ProcessEvent_19
//  162     SystemReset(); 
        CLR     0xa8.7
        CLR     0xa8.7
        MOV     0xc9,#-0x55
        MOV     0xc9,#0x5b
??AT_App_ProcessEvent_20:
        SJMP    ??AT_App_ProcessEvent_20
//  163   }
//  164 
//  165   // Discard unknown events
//  166   return 0;
??AT_App_ProcessEvent_19:
        MOV     R2,#0x0
        MOV     R3,#0x0
??AT_App_ProcessEvent_16:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
        REQUIRE _A_IEN0
        REQUIRE WDCTL
//  167 }
//  168 
//  169 /*********************************************************
//  170 when the device just starts, this function will remove end point from AF layer, according 
//  171 to NV record.
//  172 ***************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  173 void AT_handleZCL_EP(void){
AT_handleZCL_EP:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function AT_handleZCL_EP
        CODE
        FUNCALL AT_handleZCL_EP, AT_NV_ZCL_readEPStatus
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_handleZCL_EP, AT_ZCL_EP_ENABLE
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_handleZCL_EP, AT_af_remove_ep
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_handleZCL_EP, AT_ZCL_EP_ENABLE
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_handleZCL_EP, AT_Cmd_EPENABLE
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 2)
//  174   const uint8 AT_CMD_EP_ARRAY[]=AT_CMD_EPs;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {7}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {7}>` & 0xff
        MOV     A,#0x1
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  175   uint8 i;
//  176   uint8 enable;
//  177   for(i=0;i<sizeof(AT_CMD_EP_ARRAY);i++){
//  178     //read ZCL NV
//  179     AT_NV_ZCL_readEPStatus(i,&enable);
        ; Setup parameters for call to function AT_NV_ZCL_readEPStatus
        INC     A
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??AT_NV_ZCL_readEPStatus?relay
//  180     //if the NV indicate the enpoint is not enable, remove it
//  181     if(enable == 1) {
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        JNZ     ??AT_handleZCL_EP_0
//  182       
//  183       //enable the ZCL layer
//  184       AT_ZCL_EP_ENABLE( 1,AT_CMD_EP_ARRAY[i]);
        ; Setup parameters for call to function AT_ZCL_EP_ENABLE
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,#0x1
        SJMP    ??AT_handleZCL_EP_1
//  185     }else{
//  186       AT_af_remove_ep(AT_CMD_EP_ARRAY[i]);
??AT_handleZCL_EP_0:
        ; Setup parameters for call to function AT_af_remove_ep
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??AT_af_remove_ep?relay
//  187       //enable the ZCL layer
//  188       AT_ZCL_EP_ENABLE( 0,AT_CMD_EP_ARRAY[i]);
        ; Setup parameters for call to function AT_ZCL_EP_ENABLE
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,#0x0
??AT_handleZCL_EP_1:
        LCALL   ??AT_ZCL_EP_ENABLE?relay
//  189     }
//  190   }
//  191   //ninglvfeihong
//  192   AT_Cmd_EPENABLE(0, ":0,7\r");//force to enable Light end point
        ; Setup parameters for call to function AT_Cmd_EPENABLE
        MOV     R2,#`?<Constant ":0,7\\r">` & 0xff
        MOV     R3,#(`?<Constant ":0,7\\r">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??AT_Cmd_EPENABLE?relay
//  193 }
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock3
//  194 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  195 uint8 AT_handleEntryEvt(void){
AT_handleEntryEvt:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function AT_handleEntryEvt
        CODE
        FUNCALL AT_handleEntryEvt, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_handleEntryEvt, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  196   
//  197   //zgWriteStartupOptions( ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
//  198   uint8 status;
//  199   uint8 startupOptions = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        LCALL   ?Subroutine4 & 0xFFFF
//  200   
//  201   status = osal_nv_read( ZCD_NV_STARTUP_OPTION,
//  202                 0,
//  203                 sizeof( startupOptions ),
//  204                 &startupOptions );
??CrossCallReturnLabel_2:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x3
        MOV     R3,#0x0
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
//  205 
//  206   if ( status == ZSUCCESS )
        JNZ     ??AT_handleEntryEvt_0
//  207   {
//  208     
//  209     if(startupOptions & (ZCD_STARTOPT_DEFAULT_NETWORK_STATE|ZCD_STARTOPT_DEFAULT_CONFIG_STATE)  ){
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ANL     A,#0x3
        JZ      ??AT_handleEntryEvt_0
//  210       
//  211       startupOptions &= (~(ZCD_STARTOPT_DEFAULT_NETWORK_STATE|ZCD_STARTOPT_DEFAULT_CONFIG_STATE));
        MOVX    A,@DPTR
        ANL     A,#0xfc
        LCALL   ?Subroutine4 & 0xFFFF
//  212       status = osal_nv_write( ZCD_NV_STARTUP_OPTION,
//  213                  0,
//  214                  sizeof( startupOptions ),
//  215                  &startupOptions );
//  216      }
//  217    }
??CrossCallReturnLabel_3:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x3
        MOV     R3,#0x0
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  218    return status;
??AT_handleEntryEvt_0:
        MOV     A,#0x1
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock4
//  219 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond5 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker7 Using cfiCommon1
        CFI (cfiPicker7) NoFunction
        CFI (cfiPicker7) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_nv_read
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiPicker7
//  220 
//  221 /********************************************************
//  222 Handles all key events for this device.
//  223 *******************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  224 void AT_App_HandleKeys( uint8 shift, uint8 keys ){
AT_App_HandleKeys:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function AT_App_HandleKeys
        CODE
        FUNCALL AT_App_HandleKeys, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_HandleKeys, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_HandleKeys, AT_ZCL_ONOFF_SWITCH_OnOffCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_HandleKeys, AT_ZCL_ONOFF_SWITCH_setting
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_HandleKeys, AT_Cmd_ANNCE
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_HandleKeys, NLME_PermitJoiningRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_HandleKeys, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_HandleKeys, AT_Cmd_AT_F
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  225   switch (shift){
        MOV     A,R6
        JZ      ??AT_App_HandleKeys_0
        DEC     A
        JNZ     $+5
        LJMP    ??AT_App_HandleKeys_1 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??AT_App_HandleKeys_2 & 0xFFFF
        LJMP    ??AT_App_HandleKeys_3 & 0xFFFF
//  226   case 0: //pressing time less than 5 seconds
//  227     if ( keys & HAL_KEY_SW_1 )
??AT_App_HandleKeys_0:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??AT_App_HandleKeys_3 & 0xFFFF
//  228     {
//  229       
//  230       afAddrType_t dstAddr;
//  231       dstAddr.endPoint = 7;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x7
        MOVX    @DPTR,A
//  232       //dstAddr.panId =2016;//0;
//  233       dstAddr.addrMode =(afAddrMode_t)Addr16Bit;
        INC     A
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  234       dstAddr.addr.shortAddr=NLME_GetShortAddr();     
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  235       uint8 status;
//  236       //this is allow the socket is locked by parent to prevent child from playing it
//  237       status=zclGeneral_SendOnOff_CmdToggle(AT_ZCL_ENDPOINT,&dstAddr,0,1); //stand for without onoff parameter, toggle
//  238       if(status==ZSUCCESS){
        ; Setup parameters for call to function zcl_SendCommand
        CLR     A
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 27)
        CLR     A
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#-0x35
        LCALL   ??zcl_SendCommand?relay
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R1
        JNZ     $+5
        LJMP    ??AT_App_HandleKeys_3 & 0xFFFF
//  239       }else{
//  240         //execute when the node isn't in the PAN
//  241         extern void AT_ZCL_ONOFF_SWITCH_OnOffCB( uint8 cmd );
//  242         AT_ZCL_ONOFF_SWITCH_OnOffCB(2);//toggle switch when the network isn't connected
        ; Setup parameters for call to function AT_ZCL_ONOFF_SWITCH_OnOffCB
        MOV     R1,#0x2
        LCALL   ??AT_ZCL_ONOFF_SWITCH_OnOffCB?relay
        SJMP    ??AT_App_HandleKeys_3
//  243        
//  244       }
//  245     }
//  246     break;
//  247   case 1: //pressing time during 5 to 10 seconds
//  248     
//  249     if ( keys & HAL_KEY_SW_1 )
??AT_App_HandleKeys_1:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.0
        JNC     ??AT_App_HandleKeys_3
//  250     {
//  251       //ninglvfeihong modified for light sensor
//  252       AT_ZCL_ONOFF_SWITCH_setting(AT_ZCL_ONOFF_SWITCH_setting_Reverse);
        ; Setup parameters for call to function AT_ZCL_ONOFF_SWITCH_setting
        MOV     R1,#0x2
        LCALL   ??AT_ZCL_ONOFF_SWITCH_setting?relay
//  253       
//  254       AT_Cmd_ANNCE(0,"\r");//announce in the network
        ; Setup parameters for call to function AT_Cmd_ANNCE
        MOV     R2,#`?<Constant "\\r">` & 0xff
        MOV     R3,#(`?<Constant "\\r">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??AT_Cmd_ANNCE?relay
//  255       NLME_PermitJoiningRequest(30);//allow join in 30 seconds
        ; Setup parameters for call to function NLME_PermitJoiningRequest
        MOV     R1,#0x1e
        LCALL   ??NLME_PermitJoiningRequest?relay
//  256       //build broadcast address
//  257       afAddrType_t AT_AF_broad_addr={
//  258         {AT_AF_GROUP_ID},                       //addr
//  259         (afAddrMode_t)AddrGroup,              //addr mode
//  260         AT_AF_ENDPOINT,                         //end point
//  261         NULL                                    //PAN ID
//  262       };
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {{32768}, 1, 204, 0}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {{32768}, 1, 204, 0}>` & 0xff
        MOV     A,#0xc
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  263       AF_DataRequest( &AT_AF_broad_addr, &AT_AF_epDesc,
//  264                          AT_AF_TEST_KEY_CLUSTERID,
//  265                          0,
//  266                          0,
//  267                          &AT_AF_TransID,
//  268                          AF_DISCV_ROUTE,
//  269                          AF_DEFAULT_RADIUS );
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V0 + 0,#AT_AF_TransID & 0xff
        MOV     ?V0 + 1,#(AT_AF_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 25)
        CLR     A
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 0,#0x5
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     R1,#0x20
        MOV     R4,#AT_AF_epDesc & 0xff
        MOV     R5,#(AT_AF_epDesc >> 8) & 0xff
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        SJMP    ??AT_App_HandleKeys_3
//  270       
//  271     }
//  272     break;
//  273   case 2: //pressing time during 10 to 15 
//  274     AT_Cmd_AT_F(0, "\r");//recover factory setting, so it will search PAN which has the strongest singal and join that PAN
??AT_App_HandleKeys_2:
        ; Setup parameters for call to function AT_Cmd_AT_F
        MOV     R2,#`?<Constant "\\r">` & 0xff
        MOV     R3,#(`?<Constant "\\r">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??AT_Cmd_AT_F?relay
//  275     break;
//  276   default:
//  277     break;
//  278   }
//  279 }
??AT_App_HandleKeys_3:
        MOV     A,#0xc
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock8
//  280 
//  281 /*******************************************************
//  282 the reverse proces of afRegister() function
//  283 ********************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  284 afStatus_t AT_af_remove_ep(uint8 EndPoint){
AT_af_remove_ep:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function AT_af_remove_ep
        CODE
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  285   
//  286   
//  287   epList_t *epSearchpre;
//  288   epList_t *epSearchcur;
//  289 
//  290   //endPoint range:(1-240)
//  291   if(EndPoint<1 || EndPoint>240 ) return ( afStatus_INVALID_PARAMETER);
        MOV     A,#-0x1
        ADD     A,R6
        CLR     C
        SUBB    A,#-0x10
        JC      ??AT_af_remove_ep_0
??AT_af_remove_ep_1:
        MOV     R1,#0x2
        SJMP    ??AT_af_remove_ep_2
//  292   
//  293   // Start at the beginning
//  294   epSearchcur = epList;
??AT_af_remove_ep_0:
        MOV     DPTR,#epList
        LCALL   ?Subroutine15 & 0xFFFF
//  295   epSearchpre = NULL;
??CrossCallReturnLabel_26:
        SJMP    ??CrossCallReturnLabel_34
//  296 
//  297   // Look through the list until the end
//  298   while ( epSearchcur )
//  299   {
//  300     // Is there a match?
//  301     if ( epSearchcur->epDesc->endPoint == EndPoint )
//  302     {
//  303       //the enpoint is found
//  304       //delete the epSearchcur
//  305       if(epSearchpre==NULL)//check whether the aim is the first one
//  306           epList = epSearchcur->nextDesc;
//  307       else epSearchpre->nextDesc = epSearchcur->nextDesc;
//  308       
//  309       epSearchcur->nextDesc=removedEPList;
//  310       removedEPList = epSearchcur;
//  311       //osal_mem_free(epSearchcur);
//  312       return afStatus_SUCCESS;
//  313     }
//  314     else
//  315       
//  316       epSearchpre = epSearchcur;
??AT_af_remove_ep_3:
        LCALL   ?Subroutine16 & 0xFFFF
//  317       epSearchcur = epSearchcur->nextDesc;  // Next entry
??CrossCallReturnLabel_34:
        MOV     A,R0
        ORL     A,R1
        JZ      ??AT_af_remove_ep_1
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_20:
        JNZ     ??AT_af_remove_ep_3
        MOV     A,R2
        ORL     A,R3
        MOV     DPL,R0
        MOV     DPH,R1
        JNZ     ??AT_af_remove_ep_4
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_22:
        MOV     DPTR,#epList
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        SJMP    ??CrossCallReturnLabel_10
??AT_af_remove_ep_4:
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_10:
        MOVX    @DPTR,A
        MOV     DPTR,#removedEPList
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV     DPTR,#removedEPList
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     R1,#0x0
//  318   }
??AT_af_remove_ep_2:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock9
//  319   return ( afStatus_INVALID_PARAMETER);
//  320 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_34
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     DPL,R0
        MOV     DPH,R1
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12
        REQUIRE ??Subroutine20_0
        ; // Fall through to label ??Subroutine20_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine20_0:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_36
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond15) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond15) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond15) CFA_SP SP+-5
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond16) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond16) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond16) CFA_SP SP+-5
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond17) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond17) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond17) CFA_SP SP+-5
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_47:
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_34
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_35
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_36
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_37
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_38
        CFI (cfiCond25) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond25) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond25) CFA_SP SP+-5
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_39
        CFI (cfiCond26) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond26) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond26) CFA_SP SP+-5
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_40
        CFI (cfiCond27) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond27) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond27) CFA_SP SP+-5
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_26
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_27
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_6
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_7
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_43
        CFI (cfiCond32) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond32) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond32) CFA_SP SP+-5
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_44
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_41
        CFI (cfiCond34) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond34) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond34) CFA_SP SP+-5
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_42
        CFI (cfiCond35) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond35) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond35) CFA_SP SP+-5
        CFI Block cfiPicker36 Using cfiCommon1
        CFI (cfiPicker36) NoFunction
        CFI (cfiPicker36) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiPicker36
//  321 
//  322 /*******************************************************
//  323 the afRegister() function for register an endpoint with provided endpoint
//  324 ********************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  325 afStatus_t AT_af_register_ep(uint8 EndPoint){
AT_af_register_ep:
        CFI Block cfiBlock37 Using cfiCommon0
        CFI Function AT_af_register_ep
        CODE
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  326   
//  327   
//  328   epList_t *epSearchpre;
//  329   epList_t *epSearchcur;
//  330   //endPoint range:(1-240)
//  331   if(EndPoint<1 || EndPoint>240 ) return ( afStatus_INVALID_PARAMETER);
        MOV     A,#-0x1
        ADD     A,R6
        CLR     C
        SUBB    A,#-0x10
        JC      ??AT_af_register_ep_0
??AT_af_register_ep_1:
        MOV     R1,#0x2
        SJMP    ??AT_af_register_ep_2
//  332   
//  333   // Start at the beginning
//  334   epSearchcur = removedEPList;
??AT_af_register_ep_0:
        MOV     DPTR,#removedEPList
        LCALL   ?Subroutine15 & 0xFFFF
//  335   epSearchpre = NULL;
??CrossCallReturnLabel_27:
        SJMP    ??CrossCallReturnLabel_35
//  336   
//  337   // Look through the list until the end
//  338   while ( epSearchcur )
//  339   {
//  340     // Is there a match?
//  341     if ( epSearchcur->epDesc->endPoint == EndPoint )
//  342     {
//  343       //the enpoint is found
//  344       //delete the epSearchcur
//  345       if(epSearchpre==NULL)//check whether the aim is the first one
//  346           removedEPList = epSearchcur->nextDesc;
//  347       else epSearchpre->nextDesc = epSearchcur->nextDesc;
//  348       
//  349       epSearchcur->nextDesc=epList;
//  350       epList = epSearchcur;
//  351       
//  352       //osal_mem_free(epSearchcur);
//  353       return afStatus_SUCCESS;
//  354     }
//  355     else
//  356       
//  357       epSearchpre = epSearchcur;
??AT_af_register_ep_3:
        LCALL   ?Subroutine16 & 0xFFFF
//  358       epSearchcur = epSearchcur->nextDesc;  // Next entry
??CrossCallReturnLabel_35:
        MOV     A,R0
        ORL     A,R1
        JZ      ??AT_af_register_ep_1
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_21:
        JNZ     ??AT_af_register_ep_3
        MOV     A,R2
        ORL     A,R3
        MOV     DPL,R0
        MOV     DPH,R1
        JNZ     ??AT_af_register_ep_4
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV     DPTR,#removedEPList
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        SJMP    ??CrossCallReturnLabel_11
??AT_af_register_ep_4:
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_11:
        MOVX    @DPTR,A
        MOV     DPTR,#epList
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     DPTR,#epList
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     R1,#0x0
//  359   }
??AT_af_register_ep_2:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock37
//  360   return ( afStatus_INVALID_PARAMETER);
//  361 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond38 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_26
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker40 Using cfiCommon1
        CFI (cfiPicker40) NoFunction
        CFI (cfiPicker40) Picker
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_46:
        MOV     R2,#0x0
        MOV     R3,#0x0
        RET
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiPicker40

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond41 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond43) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond43) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond43) CFA_SP SP+-5
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond44) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond44) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond44) CFA_SP SP+-5
        CFI Block cfiPicker45 Using cfiCommon1
        CFI (cfiPicker45) NoFunction
        CFI (cfiPicker45) Picker
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_33:
        RET
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiPicker45

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond46 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_23
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_24
        CFI (cfiCond48) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond48) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond48) CFA_SP SP+-5
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_25
        CFI (cfiCond49) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond49) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond49) CFA_SP SP+-5
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_8
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_9
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_12
        CFI (cfiCond52) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond52) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond52) CFA_SP SP+-5
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_13
        CFI (cfiCond53) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond53) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond53) CFA_SP SP+-5
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_14
        CFI (cfiCond54) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond54) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond54) CFA_SP SP+-5
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_15
        CFI (cfiCond55) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond55) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond55) CFA_SP SP+-5
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_32, ??CrossCallReturnLabel_16
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_32, ??CrossCallReturnLabel_17
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker58 Using cfiCommon1
        CFI (cfiPicker58) NoFunction
        CFI (cfiPicker58) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiPicker58

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond59 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker61 Using cfiCommon1
        CFI (cfiPicker61) NoFunction
        CFI (cfiPicker61) Picker
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R4
        MOVX    A,@DPTR
        XRL     A,R6
        RET
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiPicker61

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond62 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker64 Using cfiCommon1
        CFI (cfiPicker64) NoFunction
        CFI (cfiPicker64) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        RET
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiPicker64

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond65 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker67 Using cfiCommon1
        CFI (cfiPicker67) NoFunction
        CFI (cfiPicker67) Picker
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_30:
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiPicker67
//  362 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  363 epList_t* AT_af_get_ep(uint8 EndPoint){
AT_af_get_ep:
        CFI Block cfiBlock68 Using cfiCommon0
        CFI Function AT_af_get_ep
        CODE
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  364   
//  365   epList_t *epSearch;
//  366   // Start at the beginning
//  367   epSearch = removedEPList;
        MOV     DPTR,#removedEPList
        SJMP    ??AT_af_get_ep_0
//  368   // Look through the list until the end
//  369   while ( epSearch )
//  370   {
//  371     // Is there a match?
//  372     if ( epSearch->epDesc->endPoint == EndPoint )
//  373     {
//  374       return epSearch;
//  375     }
//  376     else
//  377       epSearch = epSearch->nextDesc;  // Next entry
??AT_af_get_ep_1:
        MOV     DPL,R2
        MOV     DPH,R3
??AT_af_get_ep_0:
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_24:
        MOV     A,R2
        ORL     A,R3
        JZ      ??AT_af_get_ep_2
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_18:
        JNZ     ??AT_af_get_ep_1
        SJMP    ??AT_af_get_ep_3
//  378   }
//  379   epSearch = epList;
??AT_af_get_ep_2:
        MOV     DPTR,#epList
        SJMP    ??AT_af_get_ep_4
//  380   // Look through the list until the end
//  381   while ( epSearch )
//  382   {
//  383     // Is there a match?
//  384     if ( epSearch->epDesc->endPoint == EndPoint )
??AT_af_get_ep_5:
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_19:
        JZ      ??AT_af_get_ep_3
//  385     {
//  386       return epSearch;
//  387     }
//  388     else
//  389       epSearch = epSearch->nextDesc;  // Next entry
        MOV     DPL,R2
        MOV     DPH,R3
//  390   }
??AT_af_get_ep_4:
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_25:
        MOV     A,R2
        ORL     A,R3
        JNZ     ??AT_af_get_ep_5
//  391 
//  392   return false;
        MOV     R2,#0x0
        MOV     R3,#0x0
??AT_af_get_ep_3:
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock68
//  393 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond69 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond70) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond70) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond70) CFA_SP SP+-5
        CFI Block cfiPicker71 Using cfiCommon1
        CFI (cfiPicker71) NoFunction
        CFI (cfiPicker71) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        XRL     A,R1
        RET
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiPicker71
//  394 
//  395 
//  396 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  397 uint8 AT_af_ep_num( void ){
AT_af_ep_num:
        CFI Block cfiBlock72 Using cfiCommon0
        CFI Function AT_af_ep_num
        CODE
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  398   epList_t *epSearch;
//  399   uint8 cnt=0;
        MOV     R1,#0x0
//  400   // Start at the beginning
//  401   epSearch = removedEPList;
        MOV     DPTR,#removedEPList
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_12:
        SJMP    ??AT_af_ep_num_0
//  402   // Look through the list until the end
//  403   while ( epSearch )
//  404   {
//  405       epSearch = epSearch->nextDesc;  // Next entry
??AT_af_ep_num_1:
        LCALL   ?Subroutine10 & 0xFFFF
//  406       cnt++;
??CrossCallReturnLabel_13:
        INC     R1
//  407   }
??AT_af_ep_num_0:
        MOV     A,DPL
        ORL     A,DPH
        JNZ     ??AT_af_ep_num_1
//  408   epSearch = epList;
        MOV     DPTR,#epList
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_14:
        SJMP    ??AT_af_ep_num_2
//  409   // Look through the list until the end
//  410   while ( epSearch )
//  411   {
//  412       epSearch = epSearch->nextDesc;  // Next entry
??AT_af_ep_num_3:
        LCALL   ?Subroutine10 & 0xFFFF
//  413       cnt++;
??CrossCallReturnLabel_15:
        INC     R1
//  414   }
??AT_af_ep_num_2:
        MOV     A,DPL
        ORL     A,DPH
        JNZ     ??AT_af_ep_num_3
        CFI EndBlock cfiBlock72
//  415 
//  416   return cnt;
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  417   
//  418 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock73 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock73

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond74 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond75 Using cfiCommon0
        CFI (cfiCond75) NoFunction
        CFI (cfiCond75) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond75) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond75) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond75) CFA_SP SP+-5
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond76) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond76) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond76) CFA_SP SP+-5
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond77) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond77) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond77) CFA_SP SP+-5
        CFI Block cfiPicker78 Using cfiCommon1
        CFI (cfiPicker78) NoFunction
        CFI (cfiPicker78) Picker
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_31:
        MOV     DPL,R2
        MOV     DPH,R3
        RET
        CFI EndBlock cfiCond74
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiPicker78
//  419 
//  420 /********************************************************************
//  421 give all endpoint, indcluding deleted endpoint by AT_af_remove_ep;
//  422 *************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  423 void AT_af_ep_list( uint8 len, uint8 *list ){
AT_af_ep_list:
        CFI Block cfiBlock79 Using cfiCommon0
        CFI Function AT_af_ep_list
        CODE
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  424   epList_t *epSearch;
//  425   uint8 cnt=0;
        MOV     R4,#0x0
//  426   // Start at the beginning
//  427   epSearch = removedEPList;
        MOV     DPTR,#removedEPList
        LCALL   ??Subroutine20_0 & 0xFFFF
??CrossCallReturnLabel_36:
        SJMP    ??AT_af_ep_list_0
//  428   // Look through the list until the end
//  429   while ( epSearch )
//  430   {
//  431       epSearch = epSearch->nextDesc;  // Next entry
??AT_af_ep_list_1:
        LCALL   ?Subroutine6 & 0xFFFF
//  432       list[cnt] = epSearch->epDesc->endPoint;
??CrossCallReturnLabel_6:
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_28:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  433       cnt++;
        INC     R4
//  434   }
??AT_af_ep_list_0:
        MOV     A,R0
        ORL     A,R1
        JNZ     ??AT_af_ep_list_1
//  435   epSearch = epList;
        MOV     DPTR,#epList
        LCALL   ??Subroutine20_0 & 0xFFFF
??CrossCallReturnLabel_37:
        SJMP    ??AT_af_ep_list_2
//  436   // Look through the list until the end
//  437   while ( epSearch )
//  438   {
//  439       epSearch = epSearch->nextDesc;  // Next entry
??AT_af_ep_list_3:
        LCALL   ?Subroutine6 & 0xFFFF
//  440       list[cnt] = epSearch->epDesc->endPoint;
??CrossCallReturnLabel_7:
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_29:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  441       cnt++;
        INC     R4
//  442   }
??AT_af_ep_list_2:
        MOV     A,R0
        ORL     A,R1
        JNZ     ??AT_af_ep_list_3
//  443 }
        LJMP    ??Subroutine21_0 & 0xFFFF
        CFI EndBlock cfiBlock79

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond80 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+-1
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker82 Using cfiCommon1
        CFI (cfiPicker82) NoFunction
        CFI (cfiPicker82) Picker
        MOV     ?V0 + 0,R4
        MOV     A,R2
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiPicker82

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond83 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+0
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker85 Using cfiCommon1
        CFI (cfiPicker85) NoFunction
        CFI (cfiPicker85) Picker
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_45:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R5
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiPicker85
//  444 /*********************************************************************
//  445 for power saving experiment command 
//  446 Power Saving Experiment PSEXP:<address><count><interval>
//  447 *************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  448 uint8 AT_App_Power_saving_exp(AT_App_Cmd_POWER_SAVING_EXP_t* pBuf){
AT_App_Power_saving_exp:
        CFI Block cfiBlock86 Using cfiCommon0
        CFI Function AT_App_Power_saving_exp
        CODE
        FUNCALL AT_App_Power_saving_exp, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  449   //Error check
//  450   if(AT_App_Cmd_POWER_SAVING_EXP.count!=0) return AT_isActive_ERROR;
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_43:
        JZ      ??AT_App_Power_saving_exp_0
        MOV     R1,#0x8
        SJMP    ??AT_App_Power_saving_exp_1
//  451   if(pBuf->count==0 || pBuf->interval==0) return AT_PARA_ERROR;  
??AT_App_Power_saving_exp_0:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine22_0 & 0xFFFF
??CrossCallReturnLabel_41:
        JZ      ??AT_App_Power_saving_exp_2
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine22_0 & 0xFFFF
??CrossCallReturnLabel_42:
        JNZ     ??AT_App_Power_saving_exp_3
??AT_App_Power_saving_exp_2:
        MOV     R1,#0x24
        SJMP    ??AT_App_Power_saving_exp_1
//  452   
//  453   
//  454   AT_App_Cmd_POWER_SAVING_EXP.count= pBuf->count;
??AT_App_Power_saving_exp_3:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine20_0 & 0xFFFF
??CrossCallReturnLabel_38:
        MOV     DPTR,#AT_App_Cmd_POWER_SAVING_EXP + 2
        LCALL   ?Subroutine5 & 0xFFFF
//  455   AT_App_Cmd_POWER_SAVING_EXP.nwkAddr= pBuf->nwkAddr;
??CrossCallReturnLabel_4:
        LCALL   ??Subroutine20_0 & 0xFFFF
??CrossCallReturnLabel_39:
        MOV     DPTR,#AT_App_Cmd_POWER_SAVING_EXP
        LCALL   ?Subroutine5 & 0xFFFF
//  456   AT_App_Cmd_POWER_SAVING_EXP.interval= pBuf->interval;
??CrossCallReturnLabel_5:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine20_0 & 0xFFFF
??CrossCallReturnLabel_40:
        MOV     DPTR,#AT_App_Cmd_POWER_SAVING_EXP + 4
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  457   
//  458   //start timer to start send task
//  459   osal_start_timerEx( AT_App_TaskID, AT_POWER_SAVING_EXP_EVENT, 500 );  
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R2,#0x0
        MOV     R3,#0x10
        MOV     DPTR,#AT_App_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  460   return AT_NO_ERROR;
        MOV     R1,#0x0
??AT_App_Power_saving_exp_1:
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock86
//  461 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond87 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond88) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond88) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond88) CFA_SP SP+-5
        CFI Block cfiPicker89 Using cfiCommon1
        CFI (cfiPicker89) NoFunction
        CFI (cfiPicker89) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        RET
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiPicker89
//  462 
//  463 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  464 static void AT_App_process_Power_Saving_Exp_Evt(){
AT_App_process_Power_Saving_Exp_Evt:
        CFI Block cfiBlock90 Using cfiCommon0
        CFI Function AT_App_process_Power_Saving_Exp_Evt
        CODE
        FUNCALL AT_App_process_Power_Saving_Exp_Evt, AT_AF_Cmd_send_simple_
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_process_Power_Saving_Exp_Evt, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_process_Power_Saving_Exp_Evt, AT_HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_process_Power_Saving_Exp_Evt, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_process_Power_Saving_Exp_Evt, AT_HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_process_Power_Saving_Exp_Evt, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_process_Power_Saving_Exp_Evt, AT_AF_Cmd_send_simple_
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AT_App_process_Power_Saving_Exp_Evt, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  465   AT_AF_hdr buf;
//  466   buf.cmd =AT_AT_PSE_EXP_req;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x2
        MOVX    @DPTR,A
//  467   if(AT_App_Cmd_POWER_SAVING_EXP.count==0) {
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_44:
        JNZ     ??AT_App_process_Power_Saving_Exp_Evt_0
//  468     AT_App_Cmd_POWER_SAVING_EXP.interval=0;//not necessay but for robust;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  469     //send end information
//  470     buf.info =AT_AF_PSE_info_end;
        INC     A
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        LCALL   ?Subroutine3 & 0xFFFF
//  471     AT_AF_Cmd_send_simple(AT_App_Cmd_POWER_SAVING_EXP.nwkAddr,AT_AF_POWER_SVING_EXP_CLUSTERID,sizeof(buf), &buf);
??CrossCallReturnLabel_0:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  472     
//  473     HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  474     AT_RESP_START();
        ; Setup parameters for call to function AT_HalUARTWrite
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??AT_HalUARTWrite?relay
//  475     printf("Power Saving Experiment finished");
        ; Setup parameters for call to function printf
        MOV     R2,#`?<Constant "Power Saving Experime...">` & 0xff
        MOV     R3,#(`?<Constant "Power Saving Experime...">` >> 8) & 0xff
        LCALL   ??printf?relay
//  476     AT_RESP_END();
        ; Setup parameters for call to function AT_HalUARTWrite
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??AT_HalUARTWrite?relay
//  477     return;
        SJMP    ??AT_App_process_Power_Saving_Exp_Evt_1
//  478   }
//  479   HalLedSet ( HAL_LED_1, HAL_LED_MODE_TOGGLE );
??AT_App_process_Power_Saving_Exp_Evt_0:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x8
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  480   buf.info =AT_AF_PSE_info_ing;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        MOVX    @DPTR,A
//  481   AT_App_Cmd_POWER_SAVING_EXP.count--;
        MOV     DPTR,#AT_App_Cmd_POWER_SAVING_EXP + 2
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        LCALL   ?Subroutine3 & 0xFFFF
//  482   AT_AF_Cmd_send_simple(AT_App_Cmd_POWER_SAVING_EXP.nwkAddr,AT_AF_POWER_SVING_EXP_CLUSTERID,sizeof(buf), &buf);
??CrossCallReturnLabel_1:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  483   osal_start_timerEx( AT_App_TaskID, AT_POWER_SAVING_EXP_EVENT, AT_App_Cmd_POWER_SAVING_EXP.interval );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#AT_App_Cmd_POWER_SAVING_EXP + 4
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,#0x0
        MOV     R3,#0x10
        MOV     DPTR,#AT_App_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  484 }
??AT_App_process_Power_Saving_Exp_Evt_1:
        MOV     A,#0x2
        CFI EndBlock cfiBlock90
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock91 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock91
        REQUIRE ??Subroutine21_0
        ; // Fall through to label ??Subroutine21_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine21_0:
        CFI Block cfiBlock92 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock92

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond93 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond94) CFA_SP SP+0
        CFI (cfiCond94) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker95 Using cfiCommon1
        CFI (cfiPicker95) NoFunction
        CFI (cfiPicker95) Picker
        MOV     R1,#0x2
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     DPTR,#AT_App_Cmd_POWER_SAVING_EXP
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_32:
        LCALL   ??AT_AF_Cmd_send_simple_?relay
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiPicker95

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond96 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_43
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker98 Using cfiCommon1
        CFI (cfiPicker98) NoFunction
        CFI (cfiPicker98) Picker
        MOV     DPTR,#AT_App_Cmd_POWER_SAVING_EXP + 2
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiPicker98
        REQUIRE ??Subroutine22_0
        ; // Fall through to label ??Subroutine22_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine22_0:
        CFI Block cfiCond99 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_41
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond100 Using cfiCommon0
        CFI (cfiCond100) NoFunction
        CFI (cfiCond100) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond100) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond100) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond100) CFA_SP SP+-5
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond101) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond101) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond101) CFA_SP SP+-5
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker103 Using cfiCommon1
        CFI (cfiPicker103) NoFunction
        CFI (cfiPicker103) Picker
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_48:
        MOV     A,R0
        ORL     A,R1
        RET
        CFI EndBlock cfiCond99
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiPicker103

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond104 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond105) CFA_SP SP+0
        CFI (cfiCond105) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker106 Using cfiCommon1
        CFI (cfiPicker106) NoFunction
        CFI (cfiPicker106) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function AT_AF_Cmd_send_simple_
        ; Setup parameters for call to function AT_AF_Cmd_send_simple_
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiPicker106
//  485 /*********************************************************************
//  486 for power saving experiment command 
//  487 stop experiment
//  488 *************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  489 void AT_App_Power_saving_exp_stop(void ){
AT_App_Power_saving_exp_stop:
        CFI Block cfiBlock107 Using cfiCommon0
        CFI Function AT_App_Power_saving_exp_stop
        CODE
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  490   AT_App_Cmd_POWER_SAVING_EXP.count=0;
        MOV     DPTR,#AT_App_Cmd_POWER_SAVING_EXP + 2
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  491 }
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock107

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AT_App_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    AT_App_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AT_App_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    AT_App_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AT_handleZCL_EP?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    AT_handleZCL_EP

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AT_handleEntryEvt?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    AT_handleEntryEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AT_App_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    AT_App_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AT_af_remove_ep?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    AT_af_remove_ep

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AT_af_register_ep?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    AT_af_register_ep

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AT_af_get_ep?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    AT_af_get_ep

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AT_af_ep_num?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    AT_af_ep_num

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AT_af_ep_list?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    AT_af_ep_list

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AT_App_Power_saving_exp?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    AT_App_Power_saving_exp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AT_App_process_Power_Saving_Exp_Evt?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    AT_App_process_Power_Saving_Exp_Evt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AT_App_Power_saving_exp_stop?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    AT_App_Power_saving_exp_stop

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {7}>`:
        DB 7

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant ":0,7\\r">`:
        DB ":0,7\015"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "\\r">`:
        DB "\015"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {{32768}, 1, 204, 0}>`:
        DATA16
        DW 32768
        DB 0, 0, 0, 0, 0, 0
        DATA8
        DB 1
        DB 204
        DATA16
        DW 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\r\\n">`:
        DB "\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Power Saving Experime...">`:
        DB "Power Saving Experiment finished"

        END
// 
// 1 648 bytes in segment BANKED_CODE
//    78 bytes in segment BANK_RELAYS
//     2 bytes in segment SFR_AN
//    57 bytes in segment XDATA_ROM_C
//     9 bytes in segment XDATA_Z
// 
// 1 726 bytes of CODE  memory
//    57 bytes of CONST memory
//     0 bytes of DATA  memory (+ 2 bytes shared)
//     9 bytes of XDATA memory
//
//Errors: none
//Warnings: none
